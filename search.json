[{"path":"https://mt1022.github.io/cubar/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 cubar authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mt1022.github.io/cubar/articles/codon_optimization.html","id":"naive-method","dir":"Articles","previous_headings":"","what":"“naive” method","title":"Codon optimization","text":"default “naive” method simply replaces codon preferred one family subfamily.","code":"library(cubar)  seq <- 'ATGCTACGA' cf_all <- count_codons(yeast_cds) #> Loading required namespace: Biostrings optimal_codons <- est_optimal_codons(cf_all) seq_opt <- codon_optimize(seq, optimal_codons) print(seq_opt) #> 9-letter DNAString object #> seq: ATGCTACGT"},{"path":"https://mt1022.github.io/cubar/articles/codon_optimization.html","id":"idt-method","dir":"Articles","previous_headings":"","what":"“IDT” method","title":"Codon optimization","text":"“IDT” option implements method used codon optimization tool Integrated DNA Technologies. Briefly, method randomly selects synonymous codons family subfamily based relative frequency, excluding rare codons used 10% target organism.","code":"seq_opt <- codon_optimize(seq, cf = cf_all, method = \"IDT\") print(seq_opt) #> 9-letter DNAString object #> seq: ATGCTGCGA"},{"path":"https://mt1022.github.io/cubar/articles/codon_optimization.html","id":"codontransformer-method","dir":"Articles","previous_headings":"","what":"“CodonTransformer” method","title":"Codon optimization","text":"“CodonTransformer” method optimizes codon usage third-party software CodonTransformer directly using wrapper R. CodonTransformer deep learning model can generate coding sequences show similar codon usage distribution host genes reduced negative cis elements wide range organisms across tree life. Please refer original study details. cubar can generate several optimized sequences time using argument num_sequences method “IDT” “CodonTransformer”. num_sequences greater 1, identical duplicate sequences retained single copy, potentially resulting final sequence count less specified value.","code":"seq_opt <- codon_optimize(seq, method = \"CodonTransformer\", organism = \"Saccharomyces cerevisiae\") print(seq_opt) seqs_opt <- codon_optimize(seq, cf = cf_all, method = \"IDT\", num_sequences = 10) print(seqs_opt) seqs_opt <- codon_optimize(seq, method = \"CodonTransformer\", organism = \"Saccharomyces cerevisiae\", num_sequences = 10, deterministic =FALSE, temperature = 0.4) print(seqs_opt)"},{"path":"https://mt1022.github.io/cubar/articles/codon_optimization.html","id":"splice-site-detection","dir":"Articles","previous_headings":"","what":"Splice site detection","title":"Codon optimization","text":"addition, cubar integrated deep learning tool SpliceAI identify potential splice sites argument spliceai. probabilities non-splice site base greater 0.5, considered potential splice junction sites, Possible_splice_junction output marked FALSE, otherwise marked TRUE.","code":"seqs_opt <- codon_optimize(seq, cf = cf_all, method = \"IDT\", num_sequences = 10, spliceai = TRUE) print(seqs_opt) seq_opt <- codon_optimize(seq, method = \"CodonTransformer\", organism = \"Saccharomyces cerevisiae\", spliceai = TRUE) print(seq_opt)"},{"path":"https://mt1022.github.io/cubar/articles/codon_optimization.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Codon optimization","text":"Fallahpour , Gureghian V, Filion GJ, Lindner AB, Pandi . CodonTransformer: multispecies codon optimizer using context-aware neural networks. Nat Commun. 2025 Apr 3;16(1):3205. doi: 10.1038/s41467-025-58588-7. PMID: 40180930; PMCID: PMC11968976. Jaganathan K, Kyriazopoulou Panagiotopoulou S, McRae JF, Darbandi SF, Knowles D, Li YI, Kosmicki JA, Arbelaez J, Cui W, Schwartz GB, Chow ED, Kanterakis E, Gao H, Kia , Batzoglou S, Sanders SJ, Farh KK. Predicting Splicing Primary Sequence Deep Learning. Cell. 2019 Jan 24;176(3):535-548.e24. doi: 10.1016/j.cell.2018.12.015. Epub 2019 Jan 17. PMID: 30661751. Method used IDT codon optimization tool: https://sg.idtdna.com/pages/education/decoded/article/idt-codon-optimization-tool-makes-synthetic-gene-design-easy","code":""},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"sequences-and-the-genetic-code","dir":"Articles","previous_headings":"","what":"Sequences and the Genetic Code","title":"Get started","text":"First, quality control performed provided Yeast CDS sequences ensure sequence correct start codon, stop codon, internal stop codons. Additionally, length sequence verified multiple three. QC procedures can adjusted based input sequences. example, sequences contain 3’ stop codons, can skip check setting check_stop = FALSE. CDSs sequences can convert codon sequences seq_to_codons translated corresponding amino acid sequences translate Biostrings. Many codon usage metrics depend codon frequencies, can calculated easily function count_codons. resulting matrix, row represents gene, column represents codon. values matrix represent frequency codon corresponding gene. interact genetic code, cubar provided helpful function convert genetic code Biostrings handy table option visualize possible codon-anticodon pairing.  Alternatively, user can create custom genetic code table providing mapping amino acids codons.","code":"# example data yeast_cds #> DNAStringSet object of length 6600: #>        width seq                                            names                #>    [1]   471 ATGAGTTCCCGGTTTGCAAGAA...GATGTGGATATGGATGCGTAA YPL071C #>    [2]   432 ATGTCTAGATCTGGTGTTGCTG...AGAGGCGCTGGTTCTCATTAA YLL050C #>    [3]  2160 ATGTCTGGAATGGGTATTGCGA...GAGAGCCTTGCTGGAATATAG YMR172W #>    [4]   663 ATGTCAGCACCTGCTCAAAACA...GAAGACGATGCTGATTTATAA YOR185C #>    [5]  2478 ATGGATAACTTCAAAATTTACA...TATCAAAATGGCAGAAAATGA YLL032C #>    ...   ... ... #> [6596]  1902 ATGCCAGACAATCTATCATTAC...CACGAAAAGACTTTCATTTAA YBR021W #> [6597]   138 ATGAGGGTTCTCCATGTTATGC...AAAAAAAAAAAAAAAAGATGA YDR320W-B #> [6598]   360 ATGTTTATTCTAGCAGAGGTTT...AATGCCGCGCTGGACGATTAA YBR232C #> [6599]  1704 ATGGCAAGCGAACAGTCCTCAC...TTCCCAAAGAGTTTTAATTGA YDL245C #> [6600]   906 ATGTTGAATAGTTCAAGAAAAT...TACTCTTTTATCTTCAATTGA YBR024W  # qc yeast_cds_qc <- check_cds(yeast_cds) yeast_cds_qc #> DNAStringSet object of length 6574: #>        width seq                                            names                #>    [1]   465 AGTTCCCGGTTTGCAAGAAGTA...ACTGATGTGGATATGGATGCG YPL071C #>    [2]   426 TCTAGATCTGGTGTTGCTGTTG...AGCAGAGGCGCTGGTTCTCAT YLL050C #>    [3]  2154 TCTGGAATGGGTATTGCGATTC...CAAGAGAGCCTTGCTGGAATA YMR172W #>    [4]   657 TCAGCACCTGCTCAAAACAATG...GATGAAGACGATGCTGATTTA YOR185C #>    [5]  2472 GATAACTTCAAAATTTACAGTA...AAATATCAAAATGGCAGAAAA YLL032C #>    ...   ... ... #> [6570]  1896 CCAGACAATCTATCATTACATT...GAACACGAAAAGACTTTCATT YBR021W #> [6571]   132 AGGGTTCTCCATGTTATGCTTT...ATGAAAAAAAAAAAAAAAAGA YDR320W-B #> [6572]   354 TTTATTCTAGCAGAGGTTTCGG...TTTAATGCCGCGCTGGACGAT YBR232C #> [6573]  1698 GCAAGCGAACAGTCCTCACCAG...AAGTTCCCAAAGAGTTTTAAT YDL245C #> [6574]   900 TTGAATAGTTCAAGAAAATATG...TGGTACTCTTTTATCTTCAAT YBR024W # convert a CDS to codon sequence seq_to_codons(yeast_cds_qc[['YDR320W-B']]) #>  [1] \"AGG\" \"GTT\" \"CTC\" \"CAT\" \"GTT\" \"ATG\" \"CTT\" \"TCT\" \"TTC\" \"CTA\" \"AAC\" \"TCA\" #> [13] \"CTT\" \"CTT\" \"TTC\" \"CTC\" \"CCT\" \"ATC\" \"TGC\" \"TTT\" \"TGT\" \"TTA\" \"TTA\" \"CAG\" #> [25] \"TTG\" \"AAG\" \"GCT\" \"ACT\" \"TGT\" \"GCC\" \"GTT\" \"CGT\" \"GTG\" \"AAA\" \"AAA\" \"TAC\" #> [37] \"TCG\" \"ATG\" \"AAA\" \"AAA\" \"AAA\" \"AAA\" \"AAA\" \"AGA\"  # convert a CDS to amino acid sequence Biostrings::translate(yeast_cds_qc[['YDR320W-B']]) #> 44-letter AAString object #> seq: RVLHVMLSFLNSLLFLPICFCLLQLKATCAVRVKKYSMKKKKKR # get codon frequency yeast_cf <- count_codons(yeast_cds_qc) yeast_cf[1:3, 1:3] #>         AAA AAC AAG #> YPL071C  10   4   5 #> YLL050C   6   3   5 #> YMR172W  16  37  25 # get codon table for the standard genetic code ctab <- get_codon_table(gcid = '1')  # plot possible codon and anticodon pairings pairing <- ca_pairs(ctab, plot = TRUE) plot_ca_pairs(ctab, pairing) # example of a custom mapping head(aa2codon) #>   amino_acid codon #> 1          *   TAA #> 2          *   TAG #> 3          *   TGA #> 4        Ala   GCT #> 5        Ala   GCC #> 6        Ala   GCA  # create a custom codon table custom_ctab <- create_codon_table(aa2codon) head(custom_ctab) #>    aa_code amino_acid  codon subfam #>     <char>     <char> <char> <char> #> 1:       *          *    TAA   *_TA #> 2:       *          *    TAG   *_TA #> 3:       *          *    TGA   *_TG #> 4:       A        Ala    GCT Ala_GC #> 5:       A        Ala    GCC Ala_GC #> 6:       A        Ala    GCA Ala_GC"},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"codon-usage-indices","dir":"Articles","previous_headings":"","what":"Codon usage indices","title":"Get started","text":"indices can calculate get_* series functions return value usually vector value names identical names sequences. demonstrate calculate various indices yeast CDS data.","code":""},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"effective-number-of-codons-enc","dir":"Articles","previous_headings":"Codon usage indices","what":"Effective Number of Codons (ENC)","title":"Get started","text":"","code":"# get enc enc <- get_enc(yeast_cf) head(enc) #>  YPL071C  YLL050C  YMR172W  YOR185C  YLL032C  YBR225W  #> 52.93616 44.57694 56.03833 50.82037 53.34254 53.85807  plot_dist <- function(x, xlab = 'values'){     x <- stack(x)     ggplot(x, aes(x = values)) +         geom_histogram(bins = 40, fill = '#88CCEE') +         labs(x = xlab, y = 'Number of genes') +         theme_classic(base_size = 12) +         theme(axis.text = element_text(color = 'black')) }  plot_dist(enc, 'ENC')"},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"fraction-of-optimal-codons-fop","dir":"Articles","previous_headings":"Codon usage indices","what":"Fraction of optimal codons (Fop)","title":"Get started","text":"cubar provides method determine optimal (“preferred”) codon codon subfamily based regression codon usage scores genes. Preferred codons likely used genes high scores. Consequently, preferred codons positive coefficients regression analysis. Users can provide vector gene scores, example, log1p-transformed gene expression levels (RPKM TPM). worthy noting order gene scores match order genes codon frequency matrix. Otherwise, results meaningless. gene scores provided, cubar use opposite ENC default (genes stronger codon usage bias larger scores). view optimal codons, can manually run est_optimal_codons function.","code":"# get fop fop <- get_fop(yeast_cf) plot_dist(fop, 'Fop') optimal_codons <- est_optimal_codons(yeast_cf, codon_table = ctab) head(optimal_codons[optimal == TRUE]) #>    aa_code amino_acid  codon subfam       coef        pvalue        qvalue #>     <char>     <char> <char> <char>      <num>         <num>         <num> #> 1:       A        Ala    GCT Ala_GC 0.08568964  0.000000e+00  0.000000e+00 #> 2:       A        Ala    GCC Ala_GC 0.01832810  3.668732e-40  4.068957e-40 #> 3:       R        Arg    AGA Arg_AG 0.12797761  0.000000e+00  0.000000e+00 #> 4:       R        Arg    CGT Arg_CG 0.20166334  0.000000e+00  0.000000e+00 #> 5:       N        Asn    AAC Asn_AA 0.05713515 8.995130e-298 1.770009e-297 #> 6:       D        Asp    GAC Asp_GA 0.01870822  4.222671e-38  4.518999e-38 #>    optimal #>     <lgcl> #> 1:    TRUE #> 2:    TRUE #> 3:    TRUE #> 4:    TRUE #> 5:    TRUE #> 6:    TRUE"},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"codon-adaptation-index-cai","dir":"Articles","previous_headings":"Codon usage indices","what":"Codon Adaptation Index (CAI)","title":"Get started","text":"","code":"# estimate RSCU of highly expressed genes yeast_exp <- as.data.table(yeast_exp) yeast_exp <- yeast_exp[gene_id %in% rownames(yeast_cf), ] yeast_heg <- head(yeast_exp[order(-fpkm), ], n = 500) rscu_heg <- est_rscu(yeast_cf[yeast_heg$gene_id, ], codon_table = ctab) head(rscu_heg) # RSCU values are shown in the column `rscu` #>    aa_code amino_acid  codon subfam   cts      prop     w_cai      rscu #>     <char>     <char> <char> <char> <num>     <num>     <num>     <num> #> 1:       F        Phe    TTT Phe_TT  2710 0.4013918 0.6705417 0.8027835 #> 2:       F        Phe    TTC Phe_TT  4042 0.5986082 1.0000000 1.1972165 #> 3:       L        Leu    TTA Leu_TT  3231 0.3234264 0.4780358 0.6468528 #> 4:       L        Leu    TTG Leu_TT  6760 0.6765736 1.0000000 1.3531472 #> 5:       S        Ser    TCT Ser_TC  4646 0.4897249 1.0000000 1.9588998 #> 6:       S        Ser    TCC Ser_TC  2892 0.3048793 0.6225522 1.2195173  # calculate CAI of all genes # note: CAI values are usually calculated based RSCU of highly expressed genes. cai <- get_cai(yeast_cf, rscu = rscu_heg) plot_dist(cai, xlab = 'CAI')"},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"trna-adaptation-index-tai","dir":"Articles","previous_headings":"Codon usage indices","what":"tRNA Adaptation Index (tAI)","title":"Get started","text":"Note cubar internal copy yeast_trna. can also download mature tRNA sequences GtRNADB website (lucky good internet connection) read R using following code:","code":"# get tRNA gene copy number from GtRNADB trna_gcn <- extract_trna_gcn(yeast_trna)  # calculate tRNA weight for each codon trna_w <- est_trna_weight(trna_level = trna_gcn, codon_table = ctab)  # get tAI tai <- get_tai(yeast_cf, trna_w = trna_w) plot_dist(tai, 'tAI') # path_gtrnadb <- 'http://gtrnadb.ucsc.edu/genomes/eukaryota/Scere3/sacCer3-mature-tRNAs.fa' # yeast_trna <- Biostrings::readRNAStringSet(path_gtrnadb)"},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"indices-that-require-additional-data","dir":"Articles","previous_headings":"Codon usage indices","what":"Indices that require additional data","title":"Get started","text":"following table outlines indices can derived directly sequence require experimental data databases obtain codon weights.","code":""},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"correlation-between-indices","dir":"Articles","previous_headings":"Codon usage indices","what":"Correlation between indices","title":"Get started","text":"","code":"pairs(cbind(CAI = cai, ENC = enc, Fop = fop, TAI = tai),       cex = 0.5, col = alpha('black', 0.2))"},{"path":[]},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"test-of-differential-usage","dir":"Articles","previous_headings":"Utilities","what":"Test of differential usage","title":"Get started","text":"cubar provides function test differential codon usage two sets sequences. function codon_diff calculates odds ratio p-value codon, comparing usage two sets sequences. function returns data table results global, family, subfamily tests. , compare codon usage lowly expressed genes highly expressed genes yeast. results differential usage test can visualized using bar plot odds ratios codon. Codons odds ratios greater 1 used frequently highly expressed genes, codons odds ratios less 1 used frequently lowly expressed genes.  cubar also tests differences codon usage family subfamily levels.","code":"# get lowly expressed genes yeast_leg <- head(yeast_exp[order(fpkm), ], n = 500) yeast_leg <- yeast_leg[gene_id %in% rownames(yeast_cf), ]  # differetial usage test du_test <- codon_diff(yeast_cds_qc[yeast_heg$gene_id], yeast_cds_qc[yeast_leg$gene_id]) du_test <- du_test[amino_acid != '*', ] du_test$codon <- factor(du_test$codon, levels = du_test[order(-global_or), codon])  ggplot(du_test, aes(x = codon, y = log2(global_or))) +     geom_col() +     labs(x = NULL, y = 'log2(OR)') +     theme_classic(base_size = 12) +     theme(axis.text = element_text(color = 'black'),           axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) du_test2 <- du_test[!amino_acid %in% c('Met', 'Trp'), ] du_test2$codon <- factor(du_test2$codon, levels = du_test2[order(-fam_or), codon])  ggplot(du_test2, aes(x = codon, y = log2(fam_or))) +     geom_col() +     labs(x = NULL, y = 'log2(OR)') +     facet_grid(cols = vars(amino_acid), space = 'free', scales = 'free', drop = TRUE) +     theme_light() +     theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))"},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"codon-usage-optimization","dir":"Articles","previous_headings":"Utilities","what":"Codon usage optimization","title":"Get started","text":"cubar provides function optimize codon usage heterologous expression. example optimizing codon usage yeast gene YFR025C (HIS2) based optimal codons calculated earlier.","code":"# optimize codon usage to the optimal codon of each amino acid opc_aa <- est_optimal_codons(yeast_cf, codon_table = ctab, level = 'amino_acid') seq_optimized <- codon_optimize(yeast_cds_qc[['YFR025C']], optimal_codons, level = 'amino_acid')  # CAI before and after optimization plot_dist(cai, 'CAI') +      geom_vline(xintercept = cai['YFR025C'], linetype = 'dashed', color = 'red') +  # before     geom_vline(xintercept = get_cai(count_codons(seq_optimized), rscu_heg),                linetype = 'dashed', color = 'black')  # after"},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"sliding-window-analysis","dir":"Articles","previous_headings":"Utilities","what":"Sliding-window analysis","title":"Get started","text":"cubar provides function perform sliding-window analysis codon usage bias. analysis can useful identifying regions gene exhibit distinct codon usage patterns. , demonstrate perform sliding-window analysis YLR106C, one longest yeast genes.","code":"swa <- slide_apply(yeast_cds_qc[['YHR099W']], .f = get_cai,                    step = 30, before = 20, after = 20, rscu = rscu_heg)  # plot the results slide_plot(swa, 'CAI')"},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"faq","dir":"Articles","previous_headings":"","what":"FAQ","title":"Get started","text":"families subfamilies mean cubar? > codon family set codons encoding amino acid. large codon family four synonymous codons, cubar break two subfamilies depending first two nucleotides codons. example, leucine encoded six codons standard genetic code. cubar break six codons two subfamilies: Leu_UU UUA UUG; Leu_CU CUU, CUC, CUA, CUG. Unless otherwise stated, codon weights indices calculated subfamily level. However, options estimate optimal codons perform codon optimization family level suit different user needs.","code":""},{"path":"https://mt1022.github.io/cubar/articles/non_standard_genetic_code.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Non-standard genetic code","text":"cubar supports codon usage bias analysis sequences utilizing non-standard genetic codes, found mitochondrial chloroplast protein-coding sequences. illustrate application, demonstrate calculation effective number codons (ENC) human mitochondrial CDS sequences.","code":"suppressPackageStartupMessages(library(Biostrings)) library(cubar)"},{"path":"https://mt1022.github.io/cubar/articles/non_standard_genetic_code.html","id":"main-analysis","dir":"Articles","previous_headings":"","what":"Main analysis","title":"Non-standard genetic code","text":"First, Load sequences get corresponding codon table. check CDS length stop codons incomplete stop codons prevalent among MT CDSs. stop codons present, now manually remove . Finally, calculate codon frequencies ENC. important note check_cds function stop codon trimming optional steps, can implement quality control procedures. However, crucial ensure input sequences suitable codon usage bias analysis. Failure may lead ambiguous misleading results problematic sequences.","code":"human_mt #> DNAStringSet object of length 13: #>      width seq                                              names                #>  [1]   681 ATGAACGAAAATCTGTTCGCTTC...CTACCTGCACGACAACACATAA MT-ATP6 #>  [2]   346 ATAAACTTCGCCTTAATTTTAAT...AAAGGATTAGACTGAACCGAAT MT-ND3 #>  [3]   956 ATACCCATGGCCAACCTCCTACT...CCAGCATTCCCCCTCAAACCTA MT-ND1 #>  [4]   207 ATGCCCCAACTAAATACTACCGT...TTCATTGCCCCCACAATCCTAG MT-ATP8 #>  [5]  1141 ATGACCCCAATACGCAAAACTAA...AACAAAATACTCAAATGGGCCT MT-CYB #>  ...   ... ... #>  [9]  1042 ATTAATCCCCTGGCCCAACCCGT...CCTTTTATACTAATAATCTTAT MT-ND2 #> [10]   525 ATGATGTATGCTTTGTTTCTGTT...TGAGATTGCTCGGGGGAATAGG MT-ND6 #> [11]  1542 ATGTTCGCCGACCGTTGACTATT...ACCCGTATACATAAAATCTAGA MT-CO1 #> [12]   684 ATGGCACATGCAGCGCAAGTAGG...AGGGCCCGTATTTACCCTATAG MT-CO2 #> [13]   784 ATGACCCACCAATCACATGCCTA...TCCATCTATTGATGAGGGTCTT MT-CO3  ctab <- get_codon_table(gcid = '2') head(ctab) #>    aa_code amino_acid  codon subfam #>     <char>     <char> <char> <char> #> 1:       F        Phe    TTT Phe_TT #> 2:       F        Phe    TTC Phe_TT #> 3:       L        Leu    TTA Leu_TT #> 4:       L        Leu    TTG Leu_TT #> 5:       S        Ser    TCT Ser_TC #> 6:       S        Ser    TCC Ser_TC human_mt_qc <- check_cds(     human_mt,     codon_table = ctab,     check_stop = FALSE,     rm_stop = FALSE,     check_len = FALSE,     start_codons = c('ATG', 'ATA', 'ATT'))  human_mt_qc #> DNAStringSet object of length 13: #>      width seq                                              names                #>  [1]   678 AACGAAAATCTGTTCGCTTCATT...CTACCTGCACGACAACACATAA MT-ATP6 #>  [2]   343 AACTTCGCCTTAATTTTAATAAT...AAAGGATTAGACTGAACCGAAT MT-ND3 #>  [3]   953 CCCATGGCCAACCTCCTACTCCT...CCAGCATTCCCCCTCAAACCTA MT-ND1 #>  [4]   204 CCCCAACTAAATACTACCGTATG...TTCATTGCCCCCACAATCCTAG MT-ATP8 #>  [5]  1138 ACCCCAATACGCAAAACTAACCC...AACAAAATACTCAAATGGGCCT MT-CYB #>  ...   ... ... #>  [9]  1039 AATCCCCTGGCCCAACCCGTCAT...CCTTTTATACTAATAATCTTAT MT-ND2 #> [10]   522 ATGTATGCTTTGTTTCTGTTGAG...TGAGATTGCTCGGGGGAATAGG MT-ND6 #> [11]  1539 TTCGCCGACCGTTGACTATTCTC...ACCCGTATACATAAAATCTAGA MT-CO1 #> [12]   681 GCACATGCAGCGCAAGTAGGTCT...AGGGCCCGTATTTACCCTATAG MT-CO2 #> [13]   781 ACCCACCAATCACATGCCTATCA...TCCATCTATTGATGAGGGTCTT MT-CO3 len_trim <- width(human_mt_qc) %% 3 len_trim <- ifelse(len_trim == 0, 3, len_trim) human_mt_qc <- subseq(human_mt_qc, start = 1, end = width(human_mt_qc) - len_trim)  human_mt_qc #> DNAStringSet object of length 13: #>      width seq                                              names                #>  [1]   675 AACGAAAATCTGTTCGCTTCATT...CCTCTACCTGCACGACAACACA MT-ATP6 #>  [2]   342 AACTTCGCCTTAATTTTAATAAT...AAAAGGATTAGACTGAACCGAA MT-ND3 #>  [3]   951 CCCATGGCCAACCTCCTACTCCT...CTCCAGCATTCCCCCTCAAACC MT-ND1 #>  [4]   201 CCCCAACTAAATACTACCGTATG...TCATTCATTGCCCCCACAATCC MT-ATP8 #>  [5]  1137 ACCCCAATACGCAAAACTAACCC...AAACAAAATACTCAAATGGGCC MT-CYB #>  ...   ... ... #>  [9]  1038 AATCCCCTGGCCCAACCCGTCAT...CCCTTTTATACTAATAATCTTA MT-ND2 #> [10]   519 ATGTATGCTTTGTTTCTGTTGAG...AATTGAGATTGCTCGGGGGAAT MT-ND6 #> [11]  1536 TTCGCCGACCGTTGACTATTCTC...AGAACCCGTATACATAAAATCT MT-CO1 #> [12]   678 GCACATGCAGCGCAAGTAGGTCT...AATAGGGCCCGTATTTACCCTA MT-CO2 #> [13]   780 ACCCACCAATCACATGCCTATCA...CTCCATCTATTGATGAGGGTCT MT-CO3 # calculate codon frequency mt_cf <- count_codons(human_mt_qc)  # calculate ENC get_enc(mt_cf, codon_table = ctab) #>  MT-ATP6   MT-ND3   MT-ND1  MT-ATP8   MT-CYB  MT-ND4L   MT-ND4   MT-ND5  #> 46.53816 44.10626 42.45881 48.39553 43.06242 45.65955 42.69293 43.50872  #>   MT-ND2   MT-ND6   MT-CO1   MT-CO2   MT-CO3  #> 44.94793 45.50197 44.84836 49.21580 47.18339"},{"path":"https://mt1022.github.io/cubar/articles/theory.html","id":"the-codon-adaptation-index-cai","dir":"Articles","previous_headings":"","what":"The Codon Adaptation Index (CAI)","title":"Theories behind cubar","text":"CAI measures similarity codon usage coding sequence (CDS) set highly expressed genes (Sharp Li 1987). quantify relative synonymous codon usage (RSCU) values among set highly expressed genes, observed frequency codon divided frequency expected assumption equal usage synonymous codons amino acid (referred codon family hereafter): RSCUij=Xij1ni∑k=1niXik=Xij1niXi \\text{RSCU}_{ij} = \\frac{X_{ij}}{\\frac{1}{n_i}\\sum_{k=1}^{n_i}{X_{ik}}}=\\frac{X_{ij}}{\\frac{1}{n_i}X_i} XijX_{ij} number occurrences jjth codon iith codon family CDSs highly expressed genes, nin_i total number alternative codons iith codon family. XiX_i number occurrence codons iith codon family. relative adaptiveness codon, ww, defined RSCU codon divided maximum RSCU codon family: wij=RSCUijmaxk=1,…,niRSCUik w_{ij}=\\frac{\\text{RSCU}_{ij}}{\\max_{k=1,\\dots,n_i}{\\text{RSCU}_{ik}}} CAI CDS calculated geometric mean relative adaptiveness codons used CDS gene: CAI=(∏k=1Lwk)1L=exp(1L∑k=1Llnwk)=exp(∑∑jXijlnwij∑∑jXij) \\text{CAI} = \\bigg(\\prod_{k=1}^L w_k\\bigg)^{\\frac{1}{L}} =\\text{exp}\\bigg(\\frac{1}{L}\\sum_{k=1}^L \\ln w_k\\bigg) = \\text{exp}\\bigg( \\frac{\\sum_i\\sum_j {X_{ij}\\ln w_{ij}}}{\\sum_i\\sum_j X_{ij}} \\bigg) LL total number codons CDS.","code":""},{"path":"https://mt1022.github.io/cubar/articles/theory.html","id":"the-effective-number-of-codons-enc","dir":"Articles","previous_headings":"","what":"The effective number of codons (ENC)","title":"Theories behind cubar","text":"ENC reflects unequal usage codons CDS gene (Wright 1990). lower ENC, larger overall bias codon usage. original implementation ENC calculates homozygosity codon usage codon family ii follows: Fiori=Xi∑j=1ni(XijXi)2−1Xi−1 F_i^{\\text{ori}} = \\frac{X_i \\sum_{j=1}^{n_i}{(\\frac{X_{ij}}{X_i})^2} - 1}{X_i - 1} XiX_i number occurrence codons iith codon family used . cubar, codon family homozygosity calculated improved implementation robust bias due small nin_i (Sun, et al. 2013): Fi=∑j=1ni(Xij+1Xi+ni)2 F_i = \\sum_{j=1}^{n_i}(\\frac{X_{ij} + 1}{X_i + n_i})^2 can calculate final ENC CDS gene follows: ENC=K1+K2∑=1K2Xi∑=1K2XiFi+K3∑=1K3Xi∑=1K3XiFi+K4∑=1K4Xi∑=1K4XiFi \\text{ENC}=K_1 + K_2\\frac{\\sum_{=1}^{K_2}{X_i}}{\\sum_{=1}^{K_2}{X_iF_i}} + K_3\\frac{\\sum_{=1}^{K_3}{X_i}}{\\sum_{=1}^{K_3}{X_iF_i}} + K_4\\frac{\\sum_{=1}^{K_4}{X_i}}{\\sum_{=1}^{K_4}{X_iF_i}} KmK_m denotes number codon families mm synonymous codons: Km=∑iδ(ni−m) K_m=\\sum_{}{\\delta(n_i-m)} noted throughout cubar, codon families four synomymous codons divided different subfamilies based first two nucleotides codons.","code":""},{"path":"https://mt1022.github.io/cubar/articles/theory.html","id":"the-fraction-of-optimal-codons-fop","dir":"Articles","previous_headings":"","what":"The fraction of optimal codons (Fop)","title":"Theories behind cubar","text":"FopF_{op} measures fraction optimal codons CDS gene given list optimal codons (Ikemura 1981). calculated follows: Fop=∑k=1LI(k-th codon optimal)L F_{\\text{op}}=\\frac{\\sum_{k=1}^L{(k\\text{-th codon optimal})}}{L} II indicator function. case optimal codons unknown, cubar automatically determines optimal codons codon family based rationale optimal codons tend used frequently genes showing stronger codon usage bias. Specifically, number occurrence codon jj among codon family ii gene kk follows Binomial distribution: Xijk∼Binomial(Xik,pk) X_{ij}^k \\sim \\text{Binomial}(X_i^k, p_k) influence codon usage bias tendency use codon jj can estimated binomial regression using following link function: lnp1−p∼β0+β1⋅ENC+ϵ \\ln{\\frac{p}{1-p}} \\sim \\beta_0 + \\beta_1 \\cdot \\text{ENC} + \\epsilon codon jj likely used genes higher overall codon bias (.e., smaller ENC), regression coefficient negative significantly differs zero. cubar implements binomial regression using glm function binomial family R. Optimal codons determined false discovery rate 0.001 multiple testing correction Benjamini-Hochberg procedure (Benjamini Hochberg 1995) default.","code":""},{"path":"https://mt1022.github.io/cubar/articles/theory.html","id":"trna-adaptation-index-tai","dir":"Articles","previous_headings":"","what":"tRNA Adaptation Index (tAI)","title":"Theories behind cubar","text":"tAI quantifies much usage codons CDS gene resembles abundance tRNAs (dos Reis, et al. 2004), often approximated tRNA gene copy numbers. determine tAI, absolute tRNA adaptiveness value WiW_i codon ii defined Wi=∑j=1ti(1−sij)Tij W_i = \\sum_{j=1}^{t_i}{(1 - s_{ij}) T_{ij}} tit_i number tRNA isoacceptors recognizing iith codon TiT_i abundance gene copy number jjth tRNA recognizing codon. sijs_{ij} panelty non-canonical codon–anticodon pairings differs among different species (Sabi Tuller 2014). Cubar uses average sijs_{ij} values eukaryotes (Sabi Tuller 2014) default. Absolute adaptiveness values normalized maximum follows: wi={WimaxjWj,Wi>0W‾|Wj≠0maxjWj,Wi=0 w_i =  \\begin{cases} \\frac{W_i}{\\max_{j}W_j},& \\text{} W_i > 0 \\\\ \\frac{\\bar W|_{W_j \\neq 0}}{\\max_j{W_j}}, & \\text{} W_i=0\\end{cases} W‾|Wj≠0\\bar W|_{W_j \\neq 0} geometric mean non-zero absolute adaptiveness values. tAI codons gene can calculated follows, similar CAI: TAI=(∏k=1Lwk)1L=exp(1L∑k=1Llnwk)=exp(∑∑jXijlnwij∑∑jXij) \\text{TAI} = \\bigg(\\prod_{k=1}^L w_k\\bigg)^{\\frac{1}{L}} =\\text{exp}\\bigg(\\frac{1}{L}\\sum_{k=1}^L \\ln w_k\\bigg) = \\text{exp}\\bigg( \\frac{\\sum_i\\sum_j {X_{ij}\\ln w_{ij}}}{\\sum_i\\sum_j X_{ij}} \\bigg)","code":""},{"path":"https://mt1022.github.io/cubar/articles/theory.html","id":"the-mean-codon-stabilization-coefficients-cscg","dir":"Articles","previous_headings":"","what":"The mean codon stabilization coefficients (CSCg)","title":"Theories behind cubar","text":"CSC codon Pearson correlation coefficient frequency codon mRNA half-lives across different genes (Presnyak, et al. 2015). CSCg average codon stabilization coefficient (CSC) codons CDS gene (Carneiro, et al. 2019): CSCg=1L∑k=1LCSCk=∑∑jXijCSCij∑∑jXij \\text{CSCg} = \\frac{1}{L}\\sum_{k=1}^L{\\text{CSC}_k}= \\frac{\\sum_i\\sum_j {X_{ij} \\text{CSC}_{ij}}}{\\sum_i{\\sum_j{X_{ij}}}}","code":""},{"path":"https://mt1022.github.io/cubar/articles/theory.html","id":"the-deviation-from-proportionality-dp","dir":"Articles","previous_headings":"","what":"The deviation from proportionality (Dp)","title":"Theories behind cubar","text":"DpD_p measures departure codon usage exogenous CDS tRNA pool host organism (Chen, et al. 2020; Chen Yang 2022). codon family ii nin_i synonymous codons (ni>1n_i>1), fraction codon jj among occurrences family exogenous CDS : Yij=XijXi Y_{ij} = \\frac{X_{ij}}{X_i} relative tRNA availability codon codon family host organism calculated : Rij=wij∑=1niwij R_{ij} = \\frac{w_{ij}}{\\sum_{=1}^{n_i}{w_{ij}}} wijw_{ij} can relative tRNA adaptiveness values calculation tAI RSCU host protein-coding genes calculation CAI. discrepancy codon proportions exogenous CDS host tRNA availability calculated Euclidean distance: Di=∑j(Yij−Rij)2 D_i = \\sqrt{\\sum_j(Y_{ij} - R_{ij})^2} Finally, DpD_p calculated geometric mean distances codon families least two synonymous codons: Dp=(∏=1KDi)1K=exp(1K∑=1KlnDi) D_p = (\\prod_{=1}^K{D_i})^{\\frac{1}{K}} = \\exp (\\frac{1}{K}\\sum_{=1}^K{\\ln D_i}) K=∑iI(ni>1)K=\\sum_{}{(n_i>1)} II indicator function.","code":""},{"path":"https://mt1022.github.io/cubar/articles/theory.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Theories behind cubar","text":"Benjamini Y, Hochberg Y. 1995. Controlling False Discovery Rate: Practical Powerful Approach Multiple Testing. Journal Royal Statistical Society: Series B (Methodological) 57:289-300. Carneiro RL, Requião RD, Rossetto S, Domitrovic T, Palhano FL. 2019. Codon stabilization coefficient metric gain insights mRNA stability codon bias relationships translation. Nucleic Acids Res 47:2216-2228. Chen F, Wu P, Deng S, Zhang H, Hou Y, Hu Z, Zhang J, Chen X, Yang JR. 2020. Dissimilation synonymous codon usage bias virus-host coevolution due translational selection. Nat Ecol Evol 4:589-600. Chen F, Yang JR. 2022. Distinct codon usage bias evolutionary patterns weakly strongly virulent respiratory viruses. iScience 25:103682. dos Reis M, Savva R, Wernisch L. 2004. Solving riddle codon usage preferences: test translational selection. Nucleic Acids Res 32:5036-5044. Ikemura T. 1981. Correlation abundance Escherichia coli transfer RNAs occurrence respective codons protein genes: proposal synonymous codon choice optimal E. coli translational system. J Mol Biol 151:389-409. Presnyak V, Alhusaini N, Chen YH, Martin S, Morris N, Kline N, Olson S, Weinberg D, Baker KE, Graveley BR, et al. 2015. Codon optimality major determinant mRNA stability. Cell 160:1111-1124. Sabi R, Tuller T. 2014. Modelling efficiency codon-tRNA interactions based codon usage bias. DNA Res 21:511-526. Sharp PM, Li WH. 1987. codon Adaptation Index–measure directional synonymous codon usage bias, potential applications. Nucleic Acids Res 15:1281-1295. Sun X, Yang Q, Xia X. 2013. improved implementation effective number codons (nc). Mol Biol Evol 30:191-196. Wright F. 1990. ‘effective number codons’ used gene. Gene 87:23-29.","code":""},{"path":"https://mt1022.github.io/cubar/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hong Zhang. Author, maintainer. Mengyue Liu. Author. Bu Zi. Author.","code":""},{"path":"https://mt1022.github.io/cubar/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhang H, Liu M, Zi B (2025). cubar: Codon Usage Bias Analysis. R package version 1.1.0.9000, https://github.com/mt1022/cubar.","code":"@Manual{,   title = {cubar: Codon Usage Bias Analysis},   author = {Hong Zhang and Mengyue Liu and Bu Zi},   year = {2025},   note = {R package version 1.1.0.9000},   url = {https://github.com/mt1022/cubar}, }"},{"path":"https://mt1022.github.io/cubar/index.html","id":"cubar","dir":"","previous_headings":"","what":"Codon Usage Bias Analysis","title":"Codon Usage Bias Analysis","text":"Comprehensive Codon Usage Bias Analysis R","code":""},{"path":"https://mt1022.github.io/cubar/index.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of Contents","title":"Codon Usage Bias Analysis","text":"Overview 🧬 Codon-Level Analysis 📊 Gene-Level Metrics 🛠️ Utilities & Tools Choose cubar? Stable Release (Recommended) Development Version Dependencies 🎯 Getting Started 📚 Advanced Topics Example Workflow 🆘 Getting Help Related Packages License Acknowledgments","code":""},{"path":"https://mt1022.github.io/cubar/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Codon Usage Bias Analysis","text":"Codon usage bias refers non-uniform usage synonymous codons (codons encode amino acid) across different organisms, genes, functional categories. cubar comprehensive R package analyzing codon usage bias coding sequences. provides unified framework calculating established codon usage metrics, conducting sliding-window analyses differential usage analyses, optimizing sequences heterologous expression.","code":""},{"path":[]},{"path":"https://mt1022.github.io/cubar/index.html","id":"id_-codon-level-analysis","dir":"","previous_headings":"Features","what":"🧬 Codon-Level Analysis","title":"Codon Usage Bias Analysis","text":"RSCU calculation: Relative synonymous codon usage analysis Amino acid usage: Frequency amino acid sequences Codon weights: Calculate weights based gene expression, tRNA availability, mRNA stability Optimal codon inference: Machine learning-based identification optimal codons Codon-anticodon visualization: Visualization codon-tRNA pairing relationships","code":""},{"path":"https://mt1022.github.io/cubar/index.html","id":"id_-gene-level-metrics","dir":"","previous_headings":"Features","what":"📊 Gene-Level Metrics","title":"Codon Usage Bias Analysis","text":"Codon frequency tabulation: Count codon occurrences across sequences CAI (Codon Adaptation Index): Measure similarity highly expressed genes ENC (Effective Number Codons): Assess codon usage bias strength Fop (Fraction Optimal codons): Calculate proportion optimal codons tAI (tRNA Adaptation Index): Match codon usage tRNA availability CSCg (Codon Stabilization Coefficients): Quantify mRNA stability effects Dp (Deviation Proportionality): Analyze virus-host codon usage relationships GC content metrics: Overall GC, GC3s (3rd codon positions), GC4d (4-fold degenerate sites)","code":""},{"path":"https://mt1022.github.io/cubar/index.html","id":"id_️-utilities--tools","dir":"","previous_headings":"Features","what":"🛠️ Utilities & Tools","title":"Codon Usage Bias Analysis","text":"Sliding window analysis: Positional codon usage patterns within genes Sequence optimization: Redesign sequences optimal expression Differential codon usage: Statistical comparison sequence sets Quality control: Comprehensive CDS validation preprocessing","code":""},{"path":"https://mt1022.github.io/cubar/index.html","id":"why-choose-cubar","dir":"","previous_headings":"","what":"Why Choose cubar?","title":"Codon Usage Bias Analysis","text":"🚀 High Performance: Process large datasets (>100,000 sequences) efficiently using optimized Biostrings data.table backends 🧬 Flexible Genetic Codes: Support NCBI genetic codes plus custom genetic code tables 🔗 R Ecosystem Integration: Seamlessly integrate bioinformatics data analysis packages 📚 Comprehensive Documentation: Extensive tutorials, examples, theoretical background 🔬 Research Ready: Implements established metrics proper citations validation","code":""},{"path":[]},{"path":"https://mt1022.github.io/cubar/index.html","id":"stable-release-recommended","dir":"","previous_headings":"Installation","what":"Stable Release (Recommended)","title":"Codon Usage Bias Analysis","text":"Install latest stable version CRAN:","code":"install.packages(\"cubar\")"},{"path":"https://mt1022.github.io/cubar/index.html","id":"development-version","dir":"","previous_headings":"Installation","what":"Development Version","title":"Codon Usage Bias Analysis","text":"Install latest development version GitHub:","code":"# Install devtools if not already installed if (!requireNamespace(\"devtools\", quietly = TRUE)) {     install.packages(\"devtools\") }  # Install cubar from GitHub devtools::install_github(\"mt1022/cubar\", dependencies = TRUE)"},{"path":"https://mt1022.github.io/cubar/index.html","id":"dependencies","dir":"","previous_headings":"Installation","what":"Dependencies","title":"Codon Usage Bias Analysis","text":"System Requirements: - R (≥ 4.1.0) Required Packages: - Biostrings (≥ 2.60.0) - Bioconductor package sequence manipulation - IRanges (≥ 2.34.0) - Bioconductor infrastructure range operations - data.table (≥ 1.14.0) - High-performance data manipulation - ggplot2 (≥ 3.3.5) - Data visualization - rlang (≥ 0.4.11) - Language tools Note: Bioconductor packages installed automatically, may need update R installation encounter compatibility issues.","code":""},{"path":"https://mt1022.github.io/cubar/index.html","id":"documentation--tutorials","dir":"","previous_headings":"","what":"Documentation & Tutorials","title":"Codon Usage Bias Analysis","text":"📖 Complete documentation available within R (?function_name) package website.","code":""},{"path":"https://mt1022.github.io/cubar/index.html","id":"id_-getting-started","dir":"","previous_headings":"Documentation & Tutorials","what":"🎯 Getting Started","title":"Codon Usage Bias Analysis","text":"Introduction cubar - Basic usage core functionality Non-standard Genetic Codes - Working alternative genetic codes Codon Optimization - Sequence optimization strategies","code":""},{"path":"https://mt1022.github.io/cubar/index.html","id":"id_-advanced-topics","dir":"","previous_headings":"Documentation & Tutorials","what":"📚 Advanced Topics","title":"Codon Usage Bias Analysis","text":"Mathematical Foundations - Detailed theory behind metrics Function Reference - Complete function documentation","code":""},{"path":"https://mt1022.github.io/cubar/index.html","id":"example-workflow","dir":"","previous_headings":"","what":"Example Workflow","title":"Codon Usage Bias Analysis","text":"’s typical analysis workflow demonstrating key functionality:","code":"library(cubar) library(ggplot2)  # 1. Load and quality-check sequences data(yeast_cds) clean_cds <- check_cds(yeast_cds)  # 2. Calculate codon frequencies codon_freq <- count_codons(clean_cds)  # 3. Calculate multiple metrics enc <- get_enc(codon_freq)           # Effective number of codons gc3s <- get_gc3s(codon_freq)         # GC content at 3rd positions  # 4. Analyze highly expressed genes data(yeast_exp) yeast_exp <- yeast_exp[yeast_exp$gene_id %in% rownames(codon_freq), ] high_expr <- head(yeast_exp[order(-yeast_exp$fpkm), ], 500) rscu_high <- est_rscu(codon_freq[high_expr$gene_id, ]) cai <- get_cai(codon_freq, rscu_high)  # 5. Visualize results df <- data.frame(ENC = enc, CAI = cai, GC3s = gc3s) ggplot(df, aes(color = GC3s, x = ENC, y = CAI)) +    geom_point(alpha = 0.6) +    scale_color_viridis_c() +   labs(title = \"Codon Usage Bias Relationships\",        x = \"Effective Number of Codons\", y = \"Codon Adaptation Index\")"},{"path":"https://mt1022.github.io/cubar/index.html","id":"id_-getting-help","dir":"","previous_headings":"","what":"🆘 Getting Help","title":"Codon Usage Bias Analysis","text":"📋 GitHub Issues: Report bugs, request features, ask questions 📖 Documentation: Check function help (?function_name) online docs","code":""},{"path":"https://mt1022.github.io/cubar/index.html","id":"related-packages","dir":"","previous_headings":"","what":"Related Packages","title":"Codon Usage Bias Analysis","text":"complementary analysis, consider R packages: Biostrings - Sequence input/output manipulation Peptides - Peptide protein property calculations","code":""},{"path":"https://mt1022.github.io/cubar/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Codon Usage Bias Analysis","text":"project licensed MIT License - see LICENSE file details.","code":""},{"path":"https://mt1022.github.io/cubar/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Codon Usage Bias Analysis","text":"GitHub Copilot used suggest code snippets development GitHub Education providing free access development tools R Bioconductor communities excellent foundational packages Contributors users provided feedback improvements 📚 Documentation • 🐛 Report Bug • 💡 Request Feature","code":""},{"path":"https://mt1022.github.io/cubar/reference/aa2codon.html","id":null,"dir":"Reference","previous_headings":"","what":"amino acids to codons — aa2codon","title":"amino acids to codons — aa2codon","text":"data.frame mapping amino acids codons","code":""},{"path":"https://mt1022.github.io/cubar/reference/aa2codon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"amino acids to codons — aa2codon","text":"","code":"aa2codon"},{"path":"https://mt1022.github.io/cubar/reference/aa2codon.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"amino acids to codons — aa2codon","text":"data.frame two columns: amino_acid, codon. amino_acid amino acid corresponding codon codon codon identity","code":""},{"path":"https://mt1022.github.io/cubar/reference/aa2codon.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"amino acids to codons — aa2codon","text":"actually standard genetic code.","code":""},{"path":"https://mt1022.github.io/cubar/reference/aa2codon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"amino acids to codons — aa2codon","text":"","code":"aa2codon #>    amino_acid codon #> 1           *   TAA #> 2           *   TAG #> 3           *   TGA #> 4         Ala   GCT #> 5         Ala   GCC #> 6         Ala   GCA #> 7         Ala   GCG #> 8         Arg   CGT #> 9         Arg   CGC #> 10        Arg   CGA #> 11        Arg   CGG #> 12        Arg   AGA #> 13        Arg   AGG #> 14        Asn   AAT #> 15        Asn   AAC #> 16        Asp   GAT #> 17        Asp   GAC #> 18        Cys   TGT #> 19        Cys   TGC #> 20        Gln   CAA #> 21        Gln   CAG #> 22        Glu   GAA #> 23        Glu   GAG #> 24        Gly   GGT #> 25        Gly   GGC #> 26        Gly   GGA #> 27        Gly   GGG #> 28        His   CAT #> 29        His   CAC #> 30        Ile   ATT #> 31        Ile   ATC #> 32        Ile   ATA #> 33        Leu   TTA #> 34        Leu   TTG #> 35        Leu   CTT #> 36        Leu   CTC #> 37        Leu   CTA #> 38        Leu   CTG #> 39        Lys   AAA #> 40        Lys   AAG #> 41        Met   ATG #> 42        Phe   TTT #> 43        Phe   TTC #> 44        Pro   CCT #> 45        Pro   CCC #> 46        Pro   CCA #> 47        Pro   CCG #> 48        Ser   TCT #> 49        Ser   TCC #> 50        Ser   TCA #> 51        Ser   TCG #> 52        Ser   AGT #> 53        Ser   AGC #> 54        Thr   ACT #> 55        Thr   ACC #> 56        Thr   ACA #> 57        Thr   ACG #> 58        Trp   TGG #> 59        Tyr   TAT #> 60        Tyr   TAC #> 61        Val   GTT #> 62        Val   GTC #> 63        Val   GTA #> 64        Val   GTG"},{"path":"https://mt1022.github.io/cubar/reference/ca_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate codon-anticodon pairing relationship — ca_pairs","title":"Generate codon-anticodon pairing relationship — ca_pairs","text":"ca_pairs show possible codon-anticodons pairings","code":""},{"path":"https://mt1022.github.io/cubar/reference/ca_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate codon-anticodon pairing relationship — ca_pairs","text":"","code":"ca_pairs(codon_table = get_codon_table(), domain = \"Eukarya\", plot = FALSE)"},{"path":"https://mt1022.github.io/cubar/reference/ca_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate codon-anticodon pairing relationship — ca_pairs","text":"codon_table table genetic code derived get_codon_table create_codon_table. domain taxonomic domain interest. \"Eukarya\" (default), \"Bacteria\" \"Archaea\". plot FALSE (default) TRUE. Whether keep columns required plotting.","code":""},{"path":"https://mt1022.github.io/cubar/reference/ca_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate codon-anticodon pairing relationship — ca_pairs","text":"data.table codon-anticodon pairing information. columns represent pairing type, codon, corresponding anticodon, encoded amino acid argument \"plot\" FALSE.","code":""},{"path":"https://mt1022.github.io/cubar/reference/ca_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate codon-anticodon pairing relationship — ca_pairs","text":"","code":"# get possible codon and anticodon pairings for the vertebrate mitochondrial genetic code ctab <- get_codon_table(gcid = '2') pairing <- ca_pairs(ctab) head(pairing) #>      type  codon anticodon amino_acid #>    <char> <char>    <char>     <char> #> 1:     WC    TTG       CAA        Leu #> 2:     UG    TTG       TAA        Leu #> 3:     WC    TTA       TAA        Leu #> 4:     WC    TTC       GAA        Phe #> 5:     IC    TTC       AAA        Phe #> 6:     IU    TTT       AAA        Phe"},{"path":"https://mt1022.github.io/cubar/reference/check_cds.html","id":null,"dir":"Reference","previous_headings":"","what":"Quality control and preprocessing of coding sequences — check_cds","title":"Quality control and preprocessing of coding sequences — check_cds","text":"check_cds performs comprehensive quality control coding sequences (CDS) filtering sequences based various criteria optionally removing start stop codons. function ensures sequences meet requirements downstream codon usage analysis.","code":""},{"path":"https://mt1022.github.io/cubar/reference/check_cds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quality control and preprocessing of coding sequences — check_cds","text":"","code":"check_cds(   seqs,   codon_table = get_codon_table(),   min_len = 6,   check_len = TRUE,   check_start = TRUE,   check_stop = TRUE,   check_istop = TRUE,   rm_start = TRUE,   rm_stop = TRUE,   start_codons = c(\"ATG\") )"},{"path":"https://mt1022.github.io/cubar/reference/check_cds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quality control and preprocessing of coding sequences — check_cds","text":"seqs Input CDS sequences DNAStringSet compatible object. codon_table Codon table matching genetic code input sequences. Generated using get_codon_table() create_codon_table(). min_len Minimum CDS length nucleotides (default: 6). check_len Logical. Check whether CDS length divisible 3 (default: TRUE). check_start Logical. Check whether CDSs begin valid start codons (default: TRUE). check_stop Logical. Check whether CDSs end valid stop codons (default: TRUE). check_istop Logical. Check internal stop codons (default: TRUE). rm_start Logical. Remove start codons sequences (default: TRUE). rm_stop Logical. Remove stop codons sequences (default: TRUE). start_codons Character vector specifying valid start codons (default: \"ATG\").","code":""},{"path":"https://mt1022.github.io/cubar/reference/check_cds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quality control and preprocessing of coding sequences — check_cds","text":"DNAStringSet containing filtered optionally trimmed CDS sequences   pass quality control checks.","code":""},{"path":"https://mt1022.github.io/cubar/reference/check_cds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quality control and preprocessing of coding sequences — check_cds","text":"","code":"# Perform CDS sequence quality control for a sample of yeast genes s <- head(yeast_cds, 10) print(s) #> DNAStringSet object of length 10: #>      width seq                                              names                #>  [1]   471 ATGAGTTCCCGGTTTGCAAGAAG...TGATGTGGATATGGATGCGTAA YPL071C #>  [2]   432 ATGTCTAGATCTGGTGTTGCTGT...CAGAGGCGCTGGTTCTCATTAA YLL050C #>  [3]  2160 ATGTCTGGAATGGGTATTGCGAT...AGAGAGCCTTGCTGGAATATAG YMR172W #>  [4]   663 ATGTCAGCACCTGCTCAAAACAA...TGAAGACGATGCTGATTTATAA YOR185C #>  [5]  2478 ATGGATAACTTCAAAATTTACAG...ATATCAAAATGGCAGAAAATGA YLL032C #>  [6]  2703 ATGGGCTCCAATAAGGAAGCAAA...AAAGCTGCCATATACCAAATAA YBR225W #>  [7]  1488 ATGAAAACTGATAGATTACTGAT...TCAGGCTCATTTTGCAATCTAA YEL041W #>  [8]  1305 ATGTCTCAACACGCAAGCTCATC...GGAGAACGAAATTACTATATAA YOR237W #>  [9]  1413 ATGACTATCCCTGGAAGATTTAT...CTGCTCTGGTATACATAAATAA YMR027W #> [10]   195 ATGAAGATTTTCACGCTGTATAC...TGGCACTCACACTACGCACTAG YBR182C-A check_cds(s) #> DNAStringSet object of length 10: #>      width seq                                              names                #>  [1]   465 AGTTCCCGGTTTGCAAGAAGTAA...TACTGATGTGGATATGGATGCG YPL071C #>  [2]   426 TCTAGATCTGGTGTTGCTGTTGC...CAGCAGAGGCGCTGGTTCTCAT YLL050C #>  [3]  2154 TCTGGAATGGGTATTGCGATTCT...GCAAGAGAGCCTTGCTGGAATA YMR172W #>  [4]   657 TCAGCACCTGCTCAAAACAATGC...TGATGAAGACGATGCTGATTTA YOR185C #>  [5]  2472 GATAACTTCAAAATTTACAGTAC...TAAATATCAAAATGGCAGAAAA YLL032C #>  [6]  2697 GGCTCCAATAAGGAAGCAAAAAA...GCCAAAGCTGCCATATACCAAA YBR225W #>  [7]  1482 AAAACTGATAGATTACTGATTAA...TCGTCAGGCTCATTTTGCAATC YEL041W #>  [8]  1299 TCTCAACACGCAAGCTCATCTTC...GAGGGAGAACGAAATTACTATA YOR237W #>  [9]  1407 ACTATCCCTGGAAGATTTATGAC...TTTCTGCTCTGGTATACATAAA YMR027W #> [10]   189 AAGATTTTCACGCTGTATACCAT...TAGTGGCACTCACACTACGCAC YBR182C-A"},{"path":"https://mt1022.github.io/cubar/reference/codon_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential codon usage analysis — codon_diff","title":"Differential codon usage analysis — codon_diff","text":"codon_diff takes two set coding sequences perform differential codon usage analysis.","code":""},{"path":"https://mt1022.github.io/cubar/reference/codon_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential codon usage analysis — codon_diff","text":"","code":"codon_diff(seqs1, seqs2, codon_table = get_codon_table())"},{"path":"https://mt1022.github.io/cubar/reference/codon_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential codon usage analysis — codon_diff","text":"seqs1 DNAStringSet, object can coerced DNAStringSet seqs2 DNAStringSet, object can coerced DNAStringSet codon_table table genetic code derived get_codon_table create_codon_table.","code":""},{"path":"https://mt1022.github.io/cubar/reference/codon_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential codon usage analysis — codon_diff","text":"data.table differential codon usage analysis. Global tests examine wthether codon   used differently relative codons. Family tests examine whether codon used   differently relative codons encode amino acid. Subfamily tests examine whether   codon used differently relative synonymous codons share first two nucleotides.   Odds ratio > 1 suggests codon used higher frequency seqs1 seqs2.","code":""},{"path":"https://mt1022.github.io/cubar/reference/codon_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential codon usage analysis — codon_diff","text":"","code":"yeast_exp_sorted <- yeast_exp[order(yeast_exp$fpkm),] seqs1 <- yeast_cds[names(yeast_cds) %in% head(yeast_exp_sorted$gene_id, 1000)] seqs2 <- yeast_cds[names(yeast_cds) %in% tail(yeast_exp_sorted$gene_id, 1000)] cudiff <- codon_diff(seqs1, seqs2)"},{"path":"https://mt1022.github.io/cubar/reference/codon_optimize.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize codon usage in coding sequences — codon_optimize","title":"Optimize codon usage in coding sequences — codon_optimize","text":"codon_optimize redesigns coding sequence replacing codon optimal synonymous alternative, maintaining amino acid sequence. function supports multiple optimization methods useful improving protein expression heterologous systems.","code":""},{"path":"https://mt1022.github.io/cubar/reference/codon_optimize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize codon usage in coding sequences — codon_optimize","text":"","code":"codon_optimize(   seq,   optimal_codons = optimal_codons,   cf = NULL,   codon_table = get_codon_table(),   level = \"subfam\",   method = \"naive\",   num_sequences = 1,   organism = NULL,   envname = \"cubar_env\",   attention_type = \"original_full\",   deterministic = TRUE,   temperature = 0.2,   top_p = 0.95,   match_protein = FALSE,   spliceai = FALSE )"},{"path":"https://mt1022.github.io/cubar/reference/codon_optimize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize codon usage in coding sequences — codon_optimize","text":"seq coding sequence DNAString object object can coerced DNAString. sequence include stop codons. optimal_codons table optimal codons generated est_optimal_codons(), containing optimality information codon. cf Matrix codon frequencies count_codons(). Required \"IDT\" method determine codon frequency distributions. codon_table codon table defining genetic code, derived get_codon_table() create_codon_table(). level Character string specifying optimization level: \"subfam\" (default, within codon subfamilies) \"amino_acid\" (within amino acid groups). Required \"naive\" \"IDT\" methods. method Character string specifying optimization algorithm: \"naive\" (default): Simple replacement optimal codons \"IDT\": Method Integrated DNA Technologies tool \"CodonTransformer\": Neural network-based optimization num_sequences Integer. Number different optimized sequences generate (default: 1). \"CodonTransformer\" deterministic=FALSE, sequence independently sampled. organism Organism identifier (integer ID string name) \"CodonTransformer\" method. Must ORGANISM2ID CodonUtils (e.g., \"Escherichia coli general\"). envname Environment name \"CodonTransformer\" method. match conda environment name (default: \"cubar_env\"). attention_type Attention mechanism type \"CodonTransformer\": \"original_full\" (default): Standard attention \"block_sparse\": Memory-efficient sparse attention deterministic Logical. \"CodonTransformer\" method: TRUE (default): Deterministic decoding (likely tokens) FALSE: Probabilistic sampling based temperature temperature Numeric. Controls randomness non-deterministic mode \"CodonTransformer\". Lower values (0.2, default) conservative; higher values (0.8) increase diversity. Must positive. top_p Numeric. Nucleus sampling threshold (0-1) \"CodonTransformer\". tokens cumulative probability value considered. Default: 0.95. match_protein Logical. \"CodonTransformer\", constrains predictions maintain exact amino acid sequence. Recommended unusual proteins high temperature settings (default: FALSE). spliceai Logical. Whether predict splice sites using SpliceAI (default: FALSE). Requires appropriate environment setup.","code":""},{"path":"https://mt1022.github.io/cubar/reference/codon_optimize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize codon usage in coding sequences — codon_optimize","text":"return type depends parameters: Single DNAString: num_sequences=1 spliceai=FALSE DNAStringSet: num_sequences>1 spliceai=FALSE data.table: spliceai=TRUE (includes sequences splice predictions)","code":""},{"path":"https://mt1022.github.io/cubar/reference/codon_optimize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Optimize codon usage in coding sequences — codon_optimize","text":"Fallahpour , Gureghian V, Filion GJ, Lindner AB, Pandi . CodonTransformer: multispecies codon optimizer using context-aware neural networks. Nat Commun. 2025 Apr 3;16(1):3205. Jaganathan K, Panagiotopoulou S K, McRae J F, et al. Predicting splicing primary sequence  deep learning. Cell, 2019, 176(3): 535-548.e24.","code":""},{"path":"https://mt1022.github.io/cubar/reference/codon_optimize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimize codon usage in coding sequences — codon_optimize","text":"","code":"cf_all <- count_codons(yeast_cds) optimal_codons <- est_optimal_codons(cf_all) seq <- 'ATGCTACGA' # method \"naive\": codon_optimize(seq, optimal_codons) #> 9-letter DNAString object #> seq: ATGCTACGT # method \"IDT\": codon_optimize(seq, cf = cf_all, method = \"IDT\") #> 9-letter DNAString object #> seq: ATGCTACGT codon_optimize(seq, cf = cf_all, method = \"IDT\", num_sequences = 10) #> DNAStringSet object of length 8: #>     width seq #> [1]     9 ATGCTTCGT #> [2]     9 ATGCTACGT #> [3]     9 ATGCTACGC #> [4]     9 ATGCTACGG #> [5]     9 ATGCTACGA #> [6]     9 ATGCTGCGT #> [7]     9 ATGCTTCGC #> [8]     9 ATGCTTCGA  # # The following examples requires pre-installation of python package SpliceAI or Codon #  # Transformer. see the codon optimization vignette for further details. # seq_opt <- codon_optimize(seq, method = \"CodonTransformer\", #     organism = \"Saccharomyces cerevisiae\") # seqs_opt <- codon_optimize(seq, method = \"CodonTransformer\", #     organism = \"Saccharomyces cerevisiae\", num_sequences = 10, #     deterministic =FALSE, temperature = 0.4) # seqs_opt <- codon_optimize(seq, cf = cf_all, method = \"IDT\", #     num_sequences = 10, spliceai = TRUE) # seq_opt <- codon_optimize(seq, method = \"CodonTransformer\", #     organism = \"Saccharomyces cerevisiae\", spliceai = TRUE)"},{"path":"https://mt1022.github.io/cubar/reference/count_codons.html","id":null,"dir":"Reference","previous_headings":"","what":"Count codon frequencies in coding sequences — count_codons","title":"Count codon frequencies in coding sequences — count_codons","text":"count_codons tabulates frequency 64 possible codons across input coding sequences. function provides foundation codon usage bias analyses cubar package.","code":""},{"path":"https://mt1022.github.io/cubar/reference/count_codons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count codon frequencies in coding sequences — count_codons","text":"","code":"count_codons(seqs, ...)"},{"path":"https://mt1022.github.io/cubar/reference/count_codons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count codon frequencies in coding sequences — count_codons","text":"seqs Coding sequences DNAStringSet object, compatible input can coerced DNAStringSet. ... Additional arguments passed Biostrings::trinucleotideFrequency.","code":""},{"path":"https://mt1022.github.io/cubar/reference/count_codons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count codon frequencies in coding sequences — count_codons","text":"matrix rows represent individual CDS sequences columns   represent 64 possible codons. cell contains frequency count   corresponding codon respective sequence.","code":""},{"path":"https://mt1022.github.io/cubar/reference/count_codons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count codon frequencies in coding sequences — count_codons","text":"","code":"# Count codon frequencies across all yeast CDS sequences cf_all <- count_codons(yeast_cds) dim(cf_all) #> [1] 6600   64 cf_all[1:5, 1:5] #>         AAA AAC AAG AAT ACA #> YPL071C  10   4   5  10   2 #> YLL050C   6   3   5   3   0 #> YMR172W  16  37  25  48  21 #> YOR185C   8   4  10   8   1 #> YLL032C  39  26  20  44  17  # Count codons for a single sequence count_codons(yeast_cds[1]) #>         AAA AAC AAG AAT ACA ACC ACG ACT AGA AGC AGG AGT ATA ATC ATG ATT CAA CAC #> YPL071C  10   4   5  10   2   1   0   3   5   1   2   3   6   2   5   6   2   1 #>         CAG CAT CCA CCC CCG CCT CGA CGC CGG CGT CTA CTC CTG CTT GAA GAC GAG GAT #> YPL071C   0   4   2   2   0   0   0   1   1   1   3   0   1   1   4   5   3  15 #>         GCA GCC GCG GCT GGA GGC GGG GGT GTA GTC GTG GTT TAA TAC TAG TAT TCA TCC #> YPL071C   3   0   1   3   3   2   1   0   2   1   2   1   1   1   0   5   0   3 #>         TCG TCT TGA TGC TGG TGT TTA TTC TTG TTT #> YPL071C   1   1   0   0   5   1   3   2   2   2"},{"path":"https://mt1022.github.io/cubar/reference/create_codon_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create custom codon table from amino acid-codon mapping — create_codon_table","title":"Create custom codon table from amino acid-codon mapping — create_codon_table","text":"create_codon_table generates codon table user-defined data frame maps codons corresponding amino acids. function enables analysis non-standard artificial genetic codes available NCBI genetic code collection.","code":""},{"path":"https://mt1022.github.io/cubar/reference/create_codon_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create custom codon table from amino acid-codon mapping — create_codon_table","text":"","code":"create_codon_table(aa2codon)"},{"path":"https://mt1022.github.io/cubar/reference/create_codon_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create custom codon table from amino acid-codon mapping — create_codon_table","text":"aa2codon data frame two required columns: amino_acid: Three-letter amino acid abbreviations (e.g., \"Ala\", \"Arg\") codon: Corresponding three-nucleotide codon sequences","code":""},{"path":"https://mt1022.github.io/cubar/reference/create_codon_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create custom codon table from amino acid-codon mapping — create_codon_table","text":"data.table four columns: aa_code: Single-letter amino acid code amino_acid: Three-letter amino acid abbreviation codon: Three-nucleotide codon sequence subfam: Codon subfamily identifier (amino_acid_XY format)","code":""},{"path":"https://mt1022.github.io/cubar/reference/create_codon_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create custom codon table from amino acid-codon mapping — create_codon_table","text":"","code":"# View the example amino acid to codon mapping head(aa2codon) #>   amino_acid codon #> 1          *   TAA #> 2          *   TAG #> 3          *   TGA #> 4        Ala   GCT #> 5        Ala   GCC #> 6        Ala   GCA  # Create a custom codon table custom_table <- create_codon_table(aa2codon = aa2codon) head(custom_table) #>    aa_code amino_acid  codon subfam #>     <char>     <char> <char> <char> #> 1:       *          *    TAA   *_TA #> 2:       *          *    TAG   *_TA #> 3:       *          *    TGA   *_TG #> 4:       A        Ala    GCT Ala_GC #> 5:       A        Ala    GCC Ala_GC #> 6:       A        Ala    GCA Ala_GC"},{"path":"https://mt1022.github.io/cubar/reference/est_aau.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Amino Acid Usage Frequencies of CDSs. — est_aau","title":"Estimate Amino Acid Usage Frequencies of CDSs. — est_aau","text":"Estimate Amino Acid Usage Frequencies CDSs.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_aau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Amino Acid Usage Frequencies of CDSs. — est_aau","text":"","code":"est_aau(cf, codon_table = get_codon_table())"},{"path":"https://mt1022.github.io/cubar/reference/est_aau.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Amino Acid Usage Frequencies of CDSs. — est_aau","text":"cf matrix codon frequencies calculated `count_codons()`. codon_table codon_table table genetic code derived get_codon_table create_codon_table.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_aau.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Amino Acid Usage Frequencies of CDSs. — est_aau","text":"data.table amino acid frequencies CDSs. columns include three-letter abbreviation amino acid, single-letter abbreviation, usage frequency amino acid sequences, usage frequency proportion.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_aau.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Amino Acid Usage Frequencies of CDSs. — est_aau","text":"","code":"# estimate amino acid frequencies of yeast genes cf_all <- count_codons(yeast_cds) aau <- est_aau(cf_all) print(aau) #>     amino_acid aa_code  count proportion #>         <char>  <char>  <num>      <num> #>  1:        Phe       F 133094 0.04567496 #>  2:        Leu       L 281010 0.09643651 #>  3:        Ser       S 263057 0.09027543 #>  4:        Tyr       Y  97696 0.03352714 #>  5:        Cys       C  38839 0.01332870 #>  6:        Trp       W  30566 0.01048958 #>  7:        Pro       P 125783 0.04316598 #>  8:        His       H  62347 0.02139613 #>  9:        Gln       Q 113195 0.03884606 #> 10:        Arg       R 130244 0.04469690 #> 11:        Ile       I 191381 0.06567779 #> 12:        Met       M  61057 0.02095343 #> 13:        Thr       T 170219 0.05841545 #> 14:        Asn       N 176635 0.06061728 #> 15:        Lys       K 212102 0.07278878 #> 16:        Val       V 163969 0.05627059 #> 17:        Ala       A 160384 0.05504029 #> 18:        Asp       D 167835 0.05759731 #> 19:        Glu       E 188978 0.06485313 #> 20:        Gly       G 145547 0.04994856 #>     amino_acid aa_code  count proportion"},{"path":"https://mt1022.github.io/cubar/reference/est_csc.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Codon Stabilization Coefficient — est_csc","title":"Estimate Codon Stabilization Coefficient — est_csc","text":"get_csc calculate codon occurrence mRNA stability correlation coefficients (Default Pearson's).","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_csc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Codon Stabilization Coefficient — est_csc","text":"","code":"est_csc(   seqs,   half_life,   codon_table = get_codon_table(),   cor_method = \"pearson\" )"},{"path":"https://mt1022.github.io/cubar/reference/est_csc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Codon Stabilization Coefficient — est_csc","text":"seqs CDS sequences protein-coding genes. One gene. half_life data.frame mRNA half life (gene_id & half_life column names). codon_table table genetic code derived get_codon_table create_codon_table. cor_method method name passed `cor.test` used calculating correlation coefficients.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_csc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Codon Stabilization Coefficient — est_csc","text":"data.table codons CSCs. columns include codon, codon stability coefficient, correlation P-value.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_csc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate Codon Stabilization Coefficient — est_csc","text":"Presnyak V, Alhusaini N, Chen YH, Martin S, Morris N, Kline N, Olson S, Weinberg D, Baker KE, Graveley BR, et al. 2015. Codon optimality major determinant mRNA stability. Cell 160:1111-1124.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_csc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Codon Stabilization Coefficient — est_csc","text":"","code":"# estimate yeast mRNA CSC est_csc(yeast_cds, yeast_half_life) #>      codon           csc       pvalue #>     <char>         <num>        <num> #>  1:    TTT -0.0787283632 8.875234e-07 #>  2:    TTC  0.0936332740 4.934393e-09 #>  3:    TTA -0.0376998334 1.873266e-02 #>  4:    TTG  0.1988622236 5.724661e-36 #>  5:    TCT  0.1417985154 6.463819e-19 #>  6:    TCC  0.1348394407 3.076104e-17 #>  7:    TCA -0.1159288994 4.144862e-13 #>  8:    TCG -0.1263538419 2.619266e-15 #>  9:    TAT -0.0881160809 3.727148e-08 #> 10:    TAC  0.0992062077 5.675264e-10 #> 11:    TGT -0.0327802019 4.096707e-02 #> 12:    TGC -0.0808426979 4.476432e-07 #> 13:    TGG -0.0222377555 1.656447e-01 #> 14:    CTT -0.1291276840 6.325694e-16 #> 15:    CTC -0.1361863222 1.479116e-17 #> 16:    CTA -0.1294744450 5.284708e-16 #> 17:    CTG -0.1643147443 6.185476e-25 #> 18:    CCT  0.0002650952 9.868160e-01 #> 19:    CCC -0.0880401578 3.829159e-08 #> 20:    CCA  0.1558224407 1.473949e-22 #> 21:    CCG -0.1804587973 8.134753e-30 #> 22:    CAT -0.0865936247 6.377939e-08 #> 23:    CAC  0.0680092776 2.193847e-05 #> 24:    CAA  0.0718391124 7.332632e-06 #> 25:    CAG -0.1305086656 3.082292e-16 #> 26:    CGT  0.0791013333 7.875633e-07 #> 27:    CGC -0.1015374063 2.215377e-10 #> 28:    CGA -0.1966457587 3.407156e-35 #> 29:    CGG -0.1272088127 1.695961e-15 #> 30:    ATT  0.0480969867 2.701542e-03 #> 31:    ATC  0.1117000075 2.857699e-12 #> 32:    ATA -0.2568927250 1.217191e-59 #> 33:    ATG -0.0644903332 5.718986e-05 #> 34:    ACT  0.1431269860 3.023536e-19 #> 35:    ACC  0.1264144565 2.540030e-15 #> 36:    ACA -0.1426175629 4.049665e-19 #> 37:    ACG -0.1552369990 2.125992e-22 #> 38:    AAT -0.1285588646 8.486818e-16 #> 39:    AAC  0.0673723086 2.618359e-05 #> 40:    AAA -0.1497286397 6.225878e-21 #> 41:    AAG  0.1022785721 1.635387e-10 #> 42:    AGT -0.1552420723 2.119267e-22 #> 43:    AGC -0.1489732334 9.797090e-21 #> 44:    AGA  0.0412850037 1.003712e-02 #> 45:    AGG -0.1932809538 4.905373e-34 #> 46:    GTT  0.1904668721 4.395850e-33 #> 47:    GTC  0.1990981824 4.728645e-36 #> 48:    GTA -0.1895276774 9.069717e-33 #> 49:    GTG -0.0955719036 2.357610e-09 #> 50:    GCT  0.2488397109 5.896098e-56 #> 51:    GCC  0.1754110472 3.075101e-28 #> 52:    GCA -0.0849723268 1.119066e-07 #> 53:    GCG -0.1019375045 1.881052e-10 #> 54:    GAT -0.0544183892 6.872410e-04 #> 55:    GAC  0.0603621379 1.658610e-04 #> 56:    GAA  0.0903827731 1.647429e-08 #> 57:    GAG -0.1193680732 8.181022e-14 #> 58:    GGT  0.2131801918 3.377969e-41 #> 59:    GGC -0.0116004256 4.696045e-01 #> 60:    GGA -0.1229495155 1.435996e-14 #> 61:    GGG -0.0934788330 5.230147e-09 #>      codon           csc       pvalue"},{"path":"https://mt1022.github.io/cubar/reference/est_optimal_codons.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify optimal codons using statistical modeling — est_optimal_codons","title":"Identify optimal codons using statistical modeling — est_optimal_codons","text":"est_optimal_codons identifies optimal codons within codon family amino acid group using binomial regression. Optimal codons whose usage correlates positively high gene expression negatively codon usage bias (ENC), suggesting preferred efficient translation.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_optimal_codons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify optimal codons using statistical modeling — est_optimal_codons","text":"","code":"est_optimal_codons(   cf,   codon_table = get_codon_table(),   level = \"subfam\",   gene_score = NULL,   fdr = 0.001 )"},{"path":"https://mt1022.github.io/cubar/reference/est_optimal_codons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify optimal codons using statistical modeling — est_optimal_codons","text":"cf matrix codon frequencies calculated count_codons(). Rows represent sequences columns represent codons. codon_table codon table defining genetic code, derived get_codon_table() create_codon_table(). level Character string specifying analysis level: \"subfam\" (default, analyzes codon subfamilies) \"amino_acid\" (analyzes amino acid level). gene_score numeric vector gene-level scores used identify optimal codons. Length must equal number rows cf. Common choices include: Gene expression levels (RPKM, TPM, FPKM) - optionally log-transformed Protein abundance measurements Custom gene importance scores provided, negative ENC values used (lower ENC = higher bias). fdr Numeric value specifying false discovery rate threshold determining statistical significance codon optimality (default depends method).","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_optimal_codons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify optimal codons using statistical modeling — est_optimal_codons","text":"data.table containing input codon table additional columns   indicating codon optimality status, statistical significance, effect sizes   regression analysis.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_optimal_codons.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Identify optimal codons using statistical modeling — est_optimal_codons","text":"Presnyak V, Alhusaini N, Chen YH, Martin S, Morris N, Kline N, Olson S, Weinberg D, Baker KE, Graveley BR, et al. 2015. Codon optimality major determinant mRNA stability. Cell 160:1111-1124.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_optimal_codons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify optimal codons using statistical modeling — est_optimal_codons","text":"","code":"# perform binomial regression for optimal codon estimation cf_all <- count_codons(yeast_cds) codons_opt <- est_optimal_codons(cf_all) codons_opt <- codons_opt[optimal == TRUE] codons_opt #>     aa_code amino_acid  codon subfam       coef        pvalue        qvalue #>      <char>     <char> <char> <char>      <num>         <num>         <num> #>  1:       A        Ala    GCT Ala_GC 0.08454964  0.000000e+00  0.000000e+00 #>  2:       A        Ala    GCC Ala_GC 0.01621930  2.127082e-32  2.359128e-32 #>  3:       R        Arg    AGA Arg_AG 0.12902657  0.000000e+00  0.000000e+00 #>  4:       R        Arg    CGT Arg_CG 0.20090361  0.000000e+00  0.000000e+00 #>  5:       N        Asn    AAC Asn_AA 0.04208269 8.024342e-185 1.223712e-184 #>  6:       D        Asp    GAC Asp_GA 0.01574961  3.398292e-28  3.636768e-28 #>  7:       C        Cys    TGT Cys_TG 0.09889375 4.697718e-150 6.512746e-150 #>  8:       Q        Gln    CAA Gln_CA 0.11196536  0.000000e+00  0.000000e+00 #>  9:       E        Glu    GAA Glu_GA 0.08458541  0.000000e+00  0.000000e+00 #> 10:       G        Gly    GGT Gly_GG 0.16530194  0.000000e+00  0.000000e+00 #> 11:       H        His    CAC His_CA 0.03127977  7.294628e-42  8.240228e-42 #> 12:       I        Ile    ATT Ile_AT 0.03956734 1.625599e-208 2.754487e-208 #> 13:       I        Ile    ATC Ile_AT 0.03975891 1.099697e-188 1.765303e-188 #> 14:       L        Leu    CTT Leu_CT 0.02178829  6.897132e-23  7.253880e-23 #> 15:       L        Leu    CTA Leu_CT 0.05101078 7.732994e-124 1.025462e-123 #> 16:       L        Leu    TTG Leu_TT 0.03514392 7.751784e-158 1.125854e-157 #> 17:       K        Lys    AAG Lys_AA 0.05853116  0.000000e+00  0.000000e+00 #> 18:       F        Phe    TTC Phe_TT 0.05451940 3.720900e-254 7.092965e-254 #> 19:       P        Pro    CCA Pro_CC 0.10328272  0.000000e+00  0.000000e+00 #> 20:       S        Ser    AGT Ser_AG 0.02452355  2.109510e-19  2.144669e-19 #> 21:       S        Ser    TCT Ser_TC 0.06070916  0.000000e+00  0.000000e+00 #> 22:       S        Ser    TCC Ser_TC 0.02605206  1.324126e-70  1.583759e-70 #> 23:       T        Thr    ACT Thr_AC 0.04838553 2.506592e-292 5.272486e-292 #> 24:       T        Thr    ACC Thr_AC 0.04684950 2.157821e-230 3.760774e-230 #> 25:       Y        Tyr    TAC Tyr_TA 0.04206093 1.244976e-121 1.582157e-121 #> 26:       V        Val    GTT Val_GT 0.05787243  0.000000e+00  0.000000e+00 #> 27:       V        Val    GTC Val_GT 0.04995247 1.700719e-281 3.458128e-281 #>     aa_code amino_acid  codon subfam       coef        pvalue        qvalue #>     optimal #>      <lgcl> #>  1:    TRUE #>  2:    TRUE #>  3:    TRUE #>  4:    TRUE #>  5:    TRUE #>  6:    TRUE #>  7:    TRUE #>  8:    TRUE #>  9:    TRUE #> 10:    TRUE #> 11:    TRUE #> 12:    TRUE #> 13:    TRUE #> 14:    TRUE #> 15:    TRUE #> 16:    TRUE #> 17:    TRUE #> 18:    TRUE #> 19:    TRUE #> 20:    TRUE #> 21:    TRUE #> 22:    TRUE #> 23:    TRUE #> 24:    TRUE #> 25:    TRUE #> 26:    TRUE #> 27:    TRUE #>     optimal"},{"path":"https://mt1022.github.io/cubar/reference/est_rscu.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Relative Synonymous Codon Usage (RSCU) — est_rscu","title":"Estimate Relative Synonymous Codon Usage (RSCU) — est_rscu","text":"est_rscu calculates Relative Synonymous Codon Usage (RSCU) values codons, quantify bias synonymous codon usage. RSCU values indicate whether codon used (>1) less (<1) frequently expected uniform usage within synonymous group.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_rscu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Relative Synonymous Codon Usage (RSCU) — est_rscu","text":"","code":"est_rscu(   cf,   weight = 1,   pseudo_cnt = 1,   codon_table = get_codon_table(),   level = \"subfam\",   incl_stop = FALSE )"},{"path":"https://mt1022.github.io/cubar/reference/est_rscu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Relative Synonymous Codon Usage (RSCU) — est_rscu","text":"cf matrix codon frequencies calculated count_codons(). Rows represent sequences columns represent codons. weight numeric vector length number sequences cf, providing different weights sequences calculating codon frequencies. example, gene expression levels. Default 1 (equal weights). pseudo_cnt Numeric pseudo count added avoid division zero sequences available RSCU calculation (default: 1). codon_table codon table defining genetic code, derived get_codon_table() create_codon_table(). level Character string specifying analysis level: \"subfam\" (default, analyzes codon subfamilies) \"amino_acid\" (analyzes amino acid level). incl_stop Logical. Whether include RSCU values stop codons output (default: FALSE).","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_rscu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Relative Synonymous Codon Usage (RSCU) — est_rscu","text":"data.table containing codon table additional columns   RSCU analysis: usage frequency counts (cts), frequency proportions (prop),   CAI weights (w_cai), RSCU values (rscu). table includes amino acid   codes, full amino acid names, codons, subfamily classifications.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_rscu.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate Relative Synonymous Codon Usage (RSCU) — est_rscu","text":"Sharp PM, Tuohy TM, Mosurski KR. 1986. Codon usage yeast: cluster analysis clearly differentiates highly lowly expressed genes. Nucleic Acids Res 14:5125-5143.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_rscu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Relative Synonymous Codon Usage (RSCU) — est_rscu","text":"","code":"# Calculate RSCU for all yeast genes cf_all <- count_codons(yeast_cds) rscu_all <- est_rscu(cf_all) head(rscu_all) #>    aa_code amino_acid  codon subfam   cts      prop     w_cai      rscu #>     <char>     <char> <char> <char> <num>     <num>     <num>     <num> #> 1:       F        Phe    TTT Phe_TT 79149 0.5946835 1.0000000 1.1893671 #> 2:       F        Phe    TTC Phe_TT 53945 0.4053165 0.6815666 0.8106329 #> 3:       L        Leu    TTA Leu_TT 77584 0.4968747 0.9875765 0.9937494 #> 4:       L        Leu    TTG Leu_TT 78560 0.5031253 1.0000000 1.0062506 #> 5:       S        Ser    TCT Ser_TC 68480 0.3590299 1.0000000 1.4361195 #> 6:       S        Ser    TCC Ser_TC 41295 0.2165053 0.6030286 0.8660211  # Calculate RSCU for highly expressed genes (top 500) heg <- head(yeast_exp[order(-yeast_exp$fpkm), ], n = 500) cf_heg <- count_codons(yeast_cds[heg$gene_id]) rscu_heg <- est_rscu(cf_heg) head(rscu_heg) #>    aa_code amino_acid  codon subfam   cts      prop     w_cai      rscu #>     <char>     <char> <char> <char> <num>     <num>     <num>     <num> #> 1:       F        Phe    TTT Phe_TT  2681 0.4000597 0.6668324 0.8001193 #> 2:       F        Phe    TTC Phe_TT  4021 0.5999403 1.0000000 1.1998807 #> 3:       L        Leu    TTA Leu_TT  3178 0.3213383 0.4734882 0.6426766 #> 4:       L        Leu    TTG Leu_TT  6713 0.6786617 1.0000000 1.3573234 #> 5:       S        Ser    TCT Ser_TC  4602 0.4891605 1.0000000 1.9566419 #> 6:       S        Ser    TCC Ser_TC  2885 0.3066950 0.6269824 1.2267800"},{"path":"https://mt1022.github.io/cubar/reference/est_trna_weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate tRNA weights for TAI calculation — est_trna_weight","title":"Estimate tRNA weights for TAI calculation — est_trna_weight","text":"est_trna_weight calculates tRNA weights codon based tRNA availability codon-anticodon pairing efficiency. weights used tRNA Adaptation Index (TAI) calculations reflect well codon supported cellular tRNA pool.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_trna_weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate tRNA weights for TAI calculation — est_trna_weight","text":"","code":"est_trna_weight(   trna_level,   codon_table = get_codon_table(),   domain = \"Eukarya\",   s = NULL )"},{"path":"https://mt1022.github.io/cubar/reference/est_trna_weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate tRNA weights for TAI calculation — est_trna_weight","text":"trna_level named numeric vector tRNA expression levels gene copy numbers. Names format \"AminoAcid-Anticodon\" (e.g., \"Ala-GCA\"). value represents abundance tRNA species. codon_table codon table defining genetic code, derived get_codon_table() create_codon_table(). domain Character string specifying taxonomic domain: \"Eukarya\" (default), \"Bacteria\", \"Archaea\". determines codon-anticodon pairing rules selection penalties. Specify either \"domain\" \"s\". s named list selection penalties non-Watson-Crick pairings. provided, overrides default domain-specific penalties. Specify either \"domain\" \"s\".","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_trna_weight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate tRNA weights for TAI calculation — est_trna_weight","text":"data.table containing comprehensive tRNA weight information columns: aa_code: Single-letter amino acid code amino_acid: Three-letter amino acid abbreviation codon: Codon sequence subfam: Codon subfamily identifier anticodon: Corresponding anticodon sequence trna_id: tRNA identifier (amino_acid-anticodon) ac_level: tRNA abundance level W: Absolute adaptiveness value w: Relative adaptiveness (normalized weight TAI)","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_trna_weight.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate tRNA weights for TAI calculation — est_trna_weight","text":"dos Reis M, Savva R, Wernisch L. 2004. Solving riddle codon usage preferences: test translational selection. Nucleic Acids Res 32:5036-5044. Sabi R, Tuller T. 2014. Modelling efficiency codon-tRNA interactions based codon usage bias. DNA Res 21:511-526.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_trna_weight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate tRNA weights for TAI calculation — est_trna_weight","text":"","code":"# Calculate tRNA weights for yeast using gene copy numbers yeast_trna_w <- est_trna_weight(yeast_trna_gcn) head(yeast_trna_w) #>    aa_code amino_acid  codon subfam anticodon trna_id ac_level       W #>     <char>     <char> <char> <char>    <char>  <char>  <table>   <num> #> 1:       F        Phe    TTT Phe_TT       AAA Phe-AAA        0  2.1390 #> 2:       F        Phe    TTC Phe_TT       GAA Phe-GAA       10 10.0000 #> 3:       L        Leu    TTA Leu_TT       TAA Leu-TAA        7  7.0000 #> 4:       L        Leu    TTG Leu_TT       CAA Leu-CAA       10 12.5935 #> 5:       S        Ser    TCT Ser_TC       AGA Ser-AGA       11 11.0000 #> 6:       S        Ser    TCC Ser_TC       GGA Ser-GGA        0  5.8751 #>            w #>        <num> #> 1: 0.1289059 #> 2: 0.6026456 #> 3: 0.4218519 #> 4: 0.7589418 #> 5: 0.6629102 #> 6: 0.3540603  # View the weight distribution hist(yeast_trna_w$w, main = \"Distribution of tRNA weights\")"},{"path":"https://mt1022.github.io/cubar/reference/extract_trna_gcn.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract tRNA gene copy numbers from nature tRNA sequences — extract_trna_gcn","title":"Extract tRNA gene copy numbers from nature tRNA sequences — extract_trna_gcn","text":"extract_trna_gcn processes tRNA sequence data  GtRNADB extract gene copy numbers tRNA  type. information essential calculating tRNA availability weights used TAI analysis.","code":""},{"path":"https://mt1022.github.io/cubar/reference/extract_trna_gcn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract tRNA gene copy numbers from nature tRNA sequences — extract_trna_gcn","text":"","code":"extract_trna_gcn(trna_seq)"},{"path":"https://mt1022.github.io/cubar/reference/extract_trna_gcn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract tRNA gene copy numbers from nature tRNA sequences — extract_trna_gcn","text":"trna_seq named vector DNAStringSet tRNA sequences, typically GtRNADB. Sequence names follow standard format containing amino acid anticodon information (e.g., \"tRNA-Ala-AGC-1-1\").","code":""},{"path":"https://mt1022.github.io/cubar/reference/extract_trna_gcn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract tRNA gene copy numbers from nature tRNA sequences — extract_trna_gcn","text":"named table tRNA gene copy numbers. Names format   \"AminoAcid-Anticodon\" (e.g., \"Ala-AGC\") values represent count   genes encoding tRNA type. Initiator tRNAs (iMet, fMet)   undetermined tRNAs (Und-NNN) automatically excluded serve   specialized functions translation initiation.","code":""},{"path":"https://mt1022.github.io/cubar/reference/extract_trna_gcn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract tRNA gene copy numbers from nature tRNA sequences — extract_trna_gcn","text":"","code":"# Extract tRNA gene copy numbers for yeast trna_gcn <- extract_trna_gcn(yeast_trna) head(trna_gcn) #>  #> Ala-AGC Ala-TGC Arg-ACG Arg-CCG Arg-CCT Arg-TCT  #>      11       5       6       1       1      11   # View the distribution of tRNA gene copies hist(trna_gcn, main = \"Distribution of tRNA gene copy numbers\")"},{"path":"https://mt1022.github.io/cubar/reference/get_aau.html","id":null,"dir":"Reference","previous_headings":"","what":"Amino Acid Usage — get_aau","title":"Amino Acid Usage — get_aau","text":"Calculate Amino Acid Usage Frequencies CDS.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_aau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Amino Acid Usage — get_aau","text":"","code":"get_aau(cf, codon_table = get_codon_table())"},{"path":"https://mt1022.github.io/cubar/reference/get_aau.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Amino Acid Usage — get_aau","text":"cf matrix codon frequencies calculated `count_codons()`. codon_table table genetic code derived get_codon_table create_codon_table.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_aau.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Amino Acid Usage — get_aau","text":"matrix amino acid frequencies CDS. row corresponds sequence, column represents amino acid.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_aau.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Amino Acid Usage — get_aau","text":"","code":"# estimate amino acid frequencies of yeast CDSs cf_all <- count_codons(yeast_cds) aau_gene <- get_aau(cf_all) head(aau_gene) #>                Ala        Arg        Asn        Asp         Cys         Gln #> YPL071C 0.04487179 0.06410256 0.08974359 0.12820513 0.006410256 0.012820513 #> YLL050C 0.07692308 0.04895105 0.04195804 0.08391608 0.006993007 0.006993007 #> YMR172W 0.05563282 0.05006954 0.11821975 0.05841446 0.002781641 0.050069541 #> YOR185C 0.07727273 0.03636364 0.05454545 0.06363636 0.013636364 0.050000000 #> YLL032C 0.04242424 0.03515152 0.08484848 0.04242424 0.010909091 0.046060606 #> YBR225W 0.05444444 0.04333333 0.06888889 0.06444444 0.008888889 0.031111111 #>                Glu        Gly         His        Ile        Leu        Lys #> YPL071C 0.04487179 0.03846154 0.032051282 0.08974359 0.06410256 0.09615385 #> YLL050C 0.06993007 0.06293706 0.006993007 0.03496503 0.07692308 0.07692308 #> YMR172W 0.04728790 0.05285118 0.022253129 0.06119611 0.08484006 0.05702364 #> YOR185C 0.06363636 0.05909091 0.022727273 0.05000000 0.07727273 0.08181818 #> YLL032C 0.06666667 0.03878788 0.019393939 0.10060606 0.09090909 0.07151515 #> YBR225W 0.05444444 0.03777778 0.031111111 0.06111111 0.08555556 0.08000000 #>                Met        Phe        Pro        Ser        Thr         Trp #> YPL071C 0.03205128 0.02564103 0.02564103 0.05769231 0.03846154 0.032051282 #> YLL050C 0.01398601 0.05594406 0.02797203 0.11188811 0.05594406 0.006993007 #> YMR172W 0.02642559 0.02086231 0.04311544 0.11265647 0.08344924 0.004172462 #> YOR185C 0.01818182 0.05454545 0.05454545 0.02727273 0.05909091 0.013636364 #> YLL032C 0.02545455 0.05454545 0.04000000 0.08121212 0.05939394 0.002424242 #> YBR225W 0.01444444 0.04444444 0.05888889 0.13444444 0.05444444 0.011111111 #>                Tyr        Val #> YPL071C 0.03846154 0.03846154 #> YLL050C 0.04895105 0.08391608 #> YMR172W 0.01808067 0.03059805 #> YOR185C 0.04090909 0.08181818 #> YLL032C 0.04363636 0.04363636 #> YBR225W 0.02888889 0.03222222"},{"path":"https://mt1022.github.io/cubar/reference/get_cai.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Codon Adaptation Index (CAI) — get_cai","title":"Calculate Codon Adaptation Index (CAI) — get_cai","text":"get_cai calculates Codon Adaptation Index (CAI) input coding sequence. CAI measures similar codon usage gene highly expressed genes, serving indicator translational efficiency. Higher CAI values suggest better adaptation translational machinery.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Codon Adaptation Index (CAI) — get_cai","text":"","code":"get_cai(cf, rscu, level = \"subfam\")"},{"path":"https://mt1022.github.io/cubar/reference/get_cai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Codon Adaptation Index (CAI) — get_cai","text":"cf matrix codon frequencies calculated count_codons(). Rows represent sequences columns represent codons. rscu RSCU table containing CAI weights codon. table generated using est_rscu() based highly expressed genes, prepared manually appropriate weight values. level Character string specifying analysis level: \"subfam\" (default, analyzes codon subfamilies) \"amino_acid\" (analyzes amino acid level).","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Codon Adaptation Index (CAI) — get_cai","text":"named numeric vector CAI values ranging 0 1. Names   correspond sequence identifiers input matrix. Values closer   1 indicate higher similarity highly expressed genes.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cai.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Codon Adaptation Index (CAI) — get_cai","text":"Sharp PM, Li WH. 1987. codon Adaptation Index–measure directional   synonymous codon usage bias, potential applications. Nucleic Acids Res 15:1281-1295.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cai.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Codon Adaptation Index (CAI) — get_cai","text":"","code":"# Calculate CAI for yeast genes based on RSCU of highly expressed genes heg <- head(yeast_exp[order(-yeast_exp$fpkm), ], n = 500) cf_all <- count_codons(yeast_cds) cf_heg <- cf_all[heg$gene_id, ] rscu_heg <- est_rscu(cf_heg) cai <- get_cai(cf_all, rscu_heg) head(cai) #>   YPL071C   YLL050C   YMR172W   YOR185C   YLL032C   YBR225W  #> 0.5590442 0.8212905 0.5112301 0.6534497 0.5670395 0.5485641  hist(cai, main = \"Distribution of CAI values\")"},{"path":"https://mt1022.github.io/cubar/reference/get_codon_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve codon table by NCBI genetic code ID — get_codon_table","title":"Retrieve codon table by NCBI genetic code ID — get_codon_table","text":"get_codon_table creates standardized codon table based genetic codes cataloged NCBI. function provides mapping codons amino acids different organisms organelles, essential accurate codon usage analysis.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_codon_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve codon table by NCBI genetic code ID — get_codon_table","text":"","code":"get_codon_table(gcid = \"1\")"},{"path":"https://mt1022.github.io/cubar/reference/get_codon_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve codon table by NCBI genetic code ID — get_codon_table","text":"gcid character string specifying NCBI genetic code ID. Use show_codon_tables() view available genetic codes corresponding IDs. Default \"1\" (standard genetic code).","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_codon_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve codon table by NCBI genetic code ID — get_codon_table","text":"data.table four columns: aa_code: Single-letter amino acid code amino_acid: Three-letter amino acid abbreviation codon: Three-nucleotide codon sequence subfam: Codon subfamily identifier (amino_acid_XY format)","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_codon_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve codon table by NCBI genetic code ID — get_codon_table","text":"","code":"# Standard genetic code (used by most organisms) standard_code <- get_codon_table() head(standard_code) #>    aa_code amino_acid  codon subfam #>     <char>     <char> <char> <char> #> 1:       F        Phe    TTT Phe_TT #> 2:       F        Phe    TTC Phe_TT #> 3:       L        Leu    TTA Leu_TT #> 4:       L        Leu    TTG Leu_TT #> 5:       S        Ser    TCT Ser_TC #> 6:       S        Ser    TCC Ser_TC  # Vertebrate mitochondrial genetic code mito_code <- get_codon_table(gcid = '2') head(mito_code) #>    aa_code amino_acid  codon subfam #>     <char>     <char> <char> <char> #> 1:       F        Phe    TTT Phe_TT #> 2:       F        Phe    TTC Phe_TT #> 3:       L        Leu    TTA Leu_TT #> 4:       L        Leu    TTG Leu_TT #> 5:       S        Ser    TCT Ser_TC #> 6:       S        Ser    TCC Ser_TC"},{"path":"https://mt1022.github.io/cubar/reference/get_cscg.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean Codon Stabilization Coefficients — get_cscg","title":"Mean Codon Stabilization Coefficients — get_cscg","text":"get_cscg calculates Mean Codon Stabilization Coefficients CDS.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cscg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean Codon Stabilization Coefficients — get_cscg","text":"","code":"get_cscg(cf, csc)"},{"path":"https://mt1022.github.io/cubar/reference/get_cscg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean Codon Stabilization Coefficients — get_cscg","text":"cf matrix codon frequencies calculated count_codons(). csc table Codon Stabilization Coefficients calculated est_csc().","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cscg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean Codon Stabilization Coefficients — get_cscg","text":"named vector cscg values. names elements correspond sequence names.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cscg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mean Codon Stabilization Coefficients — get_cscg","text":"Presnyak V, Alhusaini N, Chen YH, Martin S, Morris N, Kline N, Olson S, Weinberg D,   Baker KE, Graveley BR, et al. 2015. Codon optimality major determinant mRNA stability.   Cell 160:1111-1124.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cscg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean Codon Stabilization Coefficients — get_cscg","text":"","code":"# estimate CSCg of yeast genes yeast_csc <- est_csc(yeast_cds, yeast_half_life) cf_all <- count_codons(yeast_cds) cscg <- get_cscg(cf_all, csc = yeast_csc) head(cscg) #>     YPL071C     YLL050C     YMR172W     YOR185C     YLL032C     YBR225W  #> -0.03363596  0.07754667 -0.01943528  0.02885805 -0.01350414 -0.01366274  hist(cscg)"},{"path":"https://mt1022.github.io/cubar/reference/get_dp.html","id":null,"dir":"Reference","previous_headings":"","what":"Deviation from Proportionality — get_dp","title":"Deviation from Proportionality — get_dp","text":"get_dp calculates Deviation Proportionality CDS.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_dp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deviation from Proportionality — get_dp","text":"","code":"get_dp(   cf,   host_weights,   codon_table = get_codon_table(),   level = \"subfam\",   missing_action = \"ignore\" )"},{"path":"https://mt1022.github.io/cubar/reference/get_dp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deviation from Proportionality — get_dp","text":"cf matrix codon frequencies calculated count_codons(). host_weights named vector tRNA weights codon reflects relative availability tRNAs host organism. codon_table table genetic code derived get_codon_table create_codon_table. level \"subfam\" (default) \"amino_acid\". \"subfam\", deviation calculated codon subfamily level. Otherwise, deviation calculated amino acid level. missing_action Actions take codon group found CDS. Options \"ignore\" (default), \"zero\" (set codon proportions 0).","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_dp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deviation from Proportionality — get_dp","text":"named vector dp values. names elements correspond sequence names.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_dp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Deviation from Proportionality — get_dp","text":"Chen F, Wu P, Deng S, Zhang H, Hou Y, Hu Z, Zhang J, Chen X, Yang JR. 2020.   Dissimilation synonymous codon usage bias virus-host coevolution due translational   selection. Nat Ecol Evol 4:589-600.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_dp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deviation from Proportionality — get_dp","text":"","code":"# estimate DP of yeast genes cf_all <- count_codons(yeast_cds) trna_weight <- est_trna_weight(yeast_trna_gcn) trna_weight <- setNames(trna_weight$w, trna_weight$codon) dp <- get_dp(cf_all, host_weights = trna_weight) head(dp) #>   YPL071C   YLL050C   YMR172W   YOR185C   YLL032C   YBR225W  #> 0.4158602 0.3747995 0.3446886 0.3269183 0.3186617 0.3131750  hist(dp)"},{"path":"https://mt1022.github.io/cubar/reference/get_enc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate effective number of codons (ENC) — get_enc","title":"Calculate effective number of codons (ENC) — get_enc","text":"get_enc computes effective number codons (ENC) coding sequence, quantifies degree codon usage bias. Lower ENC values indicate stronger bias (fewer codons used), higher values indicate uniform codon usage.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_enc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate effective number of codons (ENC) — get_enc","text":"","code":"get_enc(cf, codon_table = get_codon_table(), level = \"subfam\")"},{"path":"https://mt1022.github.io/cubar/reference/get_enc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate effective number of codons (ENC) — get_enc","text":"cf matrix codon frequencies calculated count_codons(). Rows represent sequences columns represent codons. codon_table codon table defining genetic code, derived get_codon_table() create_codon_table(). level Character string specifying analysis level: \"subfam\" (default, analyzes codon subfamilies) \"amino_acid\" (analyzes amino acid level).","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_enc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate effective number of codons (ENC) — get_enc","text":"named numeric vector ENC values. Names correspond sequence   identifiers input matrix. ENC values typically range 20   (maximum bias) 61 (uniform usage).","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_enc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate effective number of codons (ENC) — get_enc","text":"Wright F. 1990. 'effective number codons' used gene. Gene 87:23-29. Sun X, Yang Q, Xia X. 2013. improved implementation effective number codons (NC). Mol Biol Evol 30:191-196.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_enc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate effective number of codons (ENC) — get_enc","text":"","code":"# Calculate ENC for yeast genes cf_all <- count_codons(yeast_cds) enc <- get_enc(cf_all) head(enc) #>  YPL071C  YLL050C  YMR172W  YOR185C  YLL032C  YBR225W  #> 52.93616 44.57694 56.03833 50.82037 53.34254 53.85807  hist(enc, main = \"Distribution of ENC values\")"},{"path":"https://mt1022.github.io/cubar/reference/get_fop.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate fraction of optimal codons (Fop) — get_fop","title":"Calculate fraction of optimal codons (Fop) — get_fop","text":"get_fop calculates fraction optimal codons (Fop) coding sequence, represents proportion codons considered optimal translation efficiency. Higher Fop values suggest stronger selection optimal codon usage.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_fop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate fraction of optimal codons (Fop) — get_fop","text":"","code":"get_fop(cf, op = NULL, codon_table = get_codon_table(), ...)"},{"path":"https://mt1022.github.io/cubar/reference/get_fop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate fraction of optimal codons (Fop) — get_fop","text":"cf matrix codon frequencies calculated count_codons(). Rows represent sequences columns represent codons. op character vector specifying codons considered optimal. provided, optimal codons determined automatically using est_optimal_codons(). codon_table codon table defining genetic code, derived get_codon_table() create_codon_table(). ... Additional arguments passed est_optimal_codons() optimal codons determined automatically.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_fop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate fraction of optimal codons (Fop) — get_fop","text":"named numeric vector Fop values (ranging 0 1). Names   correspond sequence identifiers input matrix. Higher values   indicate greater usage optimal codons.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_fop.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate fraction of optimal codons (Fop) — get_fop","text":"Ikemura T. 1981. Correlation abundance Escherichia coli transfer RNAs   occurrence respective codons protein genes: proposal synonymous   codon choice optimal E. coli translational system. J Mol Biol 151:389-409.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_fop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate fraction of optimal codons (Fop) — get_fop","text":"","code":"# Calculate Fop for yeast genes (optimal codons determined automatically) cf_all <- count_codons(yeast_cds) fop <- get_fop(cf_all) head(fop) #>   YPL071C   YLL050C   YMR172W   YOR185C   YLL032C   YBR225W  #> 0.4315068 0.7785714 0.4763271 0.6009390 0.5112219 0.4846066  hist(fop, main = \"Distribution of Fop values\")"},{"path":"https://mt1022.github.io/cubar/reference/get_gc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate GC content of coding sequences — get_gc","title":"Calculate GC content of coding sequences — get_gc","text":"get_gc calculates overall GC content (percentage guanine cytosine nucleotides) coding sequence.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate GC content of coding sequences — get_gc","text":"","code":"get_gc(cf)"},{"path":"https://mt1022.github.io/cubar/reference/get_gc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate GC content of coding sequences — get_gc","text":"cf matrix codon frequencies calculated count_codons(). Rows represent sequences columns represent codons.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate GC content of coding sequences — get_gc","text":"named numeric vector GC content values (ranging 0 1).   Names correspond sequence identifiers input matrix.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate GC content of coding sequences — get_gc","text":"","code":"# Calculate GC content for yeast genes cf_all <- count_codons(yeast_cds) gc <- get_gc(cf_all) head(gc) #>   YPL071C   YLL050C   YMR172W   YOR185C   YLL032C   YBR225W  #> 0.3566879 0.3981481 0.4101852 0.4027149 0.3454399 0.3880873  hist(gc, main = \"Distribution of GC content\")"},{"path":"https://mt1022.github.io/cubar/reference/get_gc3s.html","id":null,"dir":"Reference","previous_headings":"","what":"GC contents at synonymous 3rd codon positions — get_gc3s","title":"GC contents at synonymous 3rd codon positions — get_gc3s","text":"Calculate GC content synonymous 3rd codon positions.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc3s.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GC contents at synonymous 3rd codon positions — get_gc3s","text":"","code":"get_gc3s(cf, codon_table = get_codon_table(), level = \"subfam\")"},{"path":"https://mt1022.github.io/cubar/reference/get_gc3s.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GC contents at synonymous 3rd codon positions — get_gc3s","text":"cf matrix codon frequencies calculated count_codons(). codon_table table genetic code derived get_codon_table create_codon_table. level \"subfam\" (default) \"amino_acid\". level determine GC content synonymous 3rd codon positions.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc3s.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GC contents at synonymous 3rd codon positions — get_gc3s","text":"named vector GC3s values. names elements correspond sequence names.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc3s.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GC contents at synonymous 3rd codon positions — get_gc3s","text":"Peden JF. 2000. Analysis codon usage.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc3s.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GC contents at synonymous 3rd codon positions — get_gc3s","text":"","code":"# estimate GC3s of yeast genes cf_all <- count_codons(yeast_cds) gc3s <- get_gc3s(cf_all) head(gc3s) #>   YPL071C   YLL050C   YMR172W   YOR185C   YLL032C   YBR225W  #> 0.3082192 0.3571429 0.3902439 0.3474178 0.3204489 0.3375143  hist(gc3s)"},{"path":"https://mt1022.github.io/cubar/reference/get_gc4d.html","id":null,"dir":"Reference","previous_headings":"","what":"GC contents at 4-fold degenerate sites — get_gc4d","title":"GC contents at 4-fold degenerate sites — get_gc4d","text":"Calculate GC content synonymous position codons (using four-fold degenerate sites ).","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc4d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GC contents at 4-fold degenerate sites — get_gc4d","text":"","code":"get_gc4d(cf, codon_table = get_codon_table(), level = \"subfam\")"},{"path":"https://mt1022.github.io/cubar/reference/get_gc4d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GC contents at 4-fold degenerate sites — get_gc4d","text":"cf matrix codon frequencies calculated count_codons(). codon_table table genetic code derived get_codon_table create_codon_table. level \"subfam\" (default) \"amino_acid\". level determine GC contents 4-fold degenerate sites.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc4d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GC contents at 4-fold degenerate sites — get_gc4d","text":"named vector GC4d values. names elements correspond sequence names.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc4d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GC contents at 4-fold degenerate sites — get_gc4d","text":"","code":"# estimate GC4d of yeast genes cf_all <- count_codons(yeast_cds) gc4d <- get_gc4d(cf_all) head(gc4d) #>   YPL071C   YLL050C   YMR172W   YOR185C   YLL032C   YBR225W  #> 0.4047619 0.3114754 0.3652482 0.3372093 0.3259259 0.3304348  hist(gc4d)"},{"path":"https://mt1022.github.io/cubar/reference/get_tai.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate tRNA Adaptation Index (TAI) — get_tai","title":"Calculate tRNA Adaptation Index (TAI) — get_tai","text":"get_tai calculates tRNA Adaptation Index (TAI) coding sequence, measures well codon usage matches tRNA availability cell. Higher TAI values indicate better adaptation tRNA pool, suggesting efficient translation.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_tai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate tRNA Adaptation Index (TAI) — get_tai","text":"","code":"get_tai(cf, trna_w, w_format = \"cubar\")"},{"path":"https://mt1022.github.io/cubar/reference/get_tai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate tRNA Adaptation Index (TAI) — get_tai","text":"cf matrix codon frequencies calculated count_codons(). Note: Start codons removed sequences analysis avoid bias universal start codon usage. trna_w table tRNA weights codon, generated using est_trna_weight(). weights reflect relative tRNA availability. w_format Character string specifying format tRNA weights: \"cubar\" (default, weights cubar package) \"tAI\" (weights tAI package format).","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_tai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate tRNA Adaptation Index (TAI) — get_tai","text":"named numeric vector TAI values. Names correspond sequence   identifiers input matrix. Values range 0 1, higher   values indicating better adaptation tRNA availability.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_tai.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate tRNA Adaptation Index (TAI) — get_tai","text":"dos Reis M, Savva R, Wernisch L. 2004. Solving riddle codon usage   preferences: test translational selection. Nucleic Acids Res 32:5036-5044.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_tai.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate tRNA Adaptation Index (TAI) — get_tai","text":"","code":"# calculate TAI of yeast genes based on genomic tRNA copy numbers w <- est_trna_weight(yeast_trna_gcn) yeast_cds_qc <- check_cds(yeast_cds) cf <- count_codons(yeast_cds_qc) tai <- get_tai(cf, w) head(tai) #>   YPL071C   YLL050C   YMR172W   YOR185C   YLL032C   YBR225W  #> 0.2950325 0.4463443 0.2818053 0.3576659 0.3150053 0.3092631  hist(tai)"},{"path":"https://mt1022.github.io/cubar/reference/human_mt.html","id":null,"dir":"Reference","previous_headings":"","what":"human mitochondrial CDS sequences — human_mt","title":"human mitochondrial CDS sequences — human_mt","text":"CDSs 13 protein-coding genes human mitochondrial genome extracted ENSEMBL Biomart","code":""},{"path":"https://mt1022.github.io/cubar/reference/human_mt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"human mitochondrial CDS sequences — human_mt","text":"","code":"human_mt"},{"path":"https://mt1022.github.io/cubar/reference/human_mt.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"human mitochondrial CDS sequences — human_mt","text":"DNAStringSet 13 sequences","code":""},{"path":"https://mt1022.github.io/cubar/reference/human_mt.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"human mitochondrial CDS sequences — human_mt","text":"<https://www.ensembl.org/index.html>","code":""},{"path":"https://mt1022.github.io/cubar/reference/human_mt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"human mitochondrial CDS sequences — human_mt","text":"","code":"head(human_mt) #> DNAStringSet object of length 6: #>     width seq                                               names                #> [1]   681 ATGAACGAAAATCTGTTCGCTTC...TCTACCTGCACGACAACACATAA MT-ATP6 #> [2]   346 ATAAACTTCGCCTTAATTTTAAT...AAAAGGATTAGACTGAACCGAAT MT-ND3 #> [3]   956 ATACCCATGGCCAACCTCCTACT...TCCAGCATTCCCCCTCAAACCTA MT-ND1 #> [4]   207 ATGCCCCAACTAAATACTACCGT...ATTCATTGCCCCCACAATCCTAG MT-ATP8 #> [5]  1141 ATGACCCCAATACGCAAAACTAA...AAACAAAATACTCAAATGGGCCT MT-CYB #> [6]   297 ATGCCCCTCATTTACATAAATAT...ACCTAAACCTACTCCAATGCTAA MT-ND4L"},{"path":"https://mt1022.github.io/cubar/reference/plot_ca_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot codon-anticodon pairing relationship — plot_ca_pairs","title":"Plot codon-anticodon pairing relationship — plot_ca_pairs","text":"plot_ca_pairs show possible codon-anticodons pairings","code":""},{"path":"https://mt1022.github.io/cubar/reference/plot_ca_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot codon-anticodon pairing relationship — plot_ca_pairs","text":"","code":"plot_ca_pairs(codon_table = get_codon_table(), pairs = pairs)"},{"path":"https://mt1022.github.io/cubar/reference/plot_ca_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot codon-anticodon pairing relationship — plot_ca_pairs","text":"codon_table table genetic code derived get_codon_table create_codon_table. pairs table codon-anticodon pairing derived ca_pairs","code":""},{"path":"https://mt1022.github.io/cubar/reference/plot_ca_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot codon-anticodon pairing relationship — plot_ca_pairs","text":"plot possible codon-anticodons pairings","code":""},{"path":"https://mt1022.github.io/cubar/reference/plot_ca_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot codon-anticodon pairing relationship — plot_ca_pairs","text":"","code":"# plot possible codon and anticodon pairings for the vertebrate mitochondrial genetic code ctab <- get_codon_table(gcid = '2') pairs <- ca_pairs(ctab, plot = TRUE) plot_ca_pairs(ctab, pairs)   # plot possible codon and anticodon pairings for the standard genetic code in bacteria plot_ca_pairs(pairs = ca_pairs(domain = \"Bacteria\", plot = TRUE))"},{"path":"https://mt1022.github.io/cubar/reference/rev_comp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate reverse complement sequences — rev_comp","title":"Generate reverse complement sequences — rev_comp","text":"rev_comp generates reverse complement input DNA sequences. commonly used analyzing complementary strands anticodon sequences.","code":""},{"path":"https://mt1022.github.io/cubar/reference/rev_comp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate reverse complement sequences — rev_comp","text":"","code":"rev_comp(seqs)"},{"path":"https://mt1022.github.io/cubar/reference/rev_comp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate reverse complement sequences — rev_comp","text":"seqs Input DNA sequences DNAStringSet object, named vector sequences can coerced DNAStringSet.","code":""},{"path":"https://mt1022.github.io/cubar/reference/rev_comp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate reverse complement sequences — rev_comp","text":"DNAStringSet object containing reverse complemented sequences.","code":""},{"path":"https://mt1022.github.io/cubar/reference/rev_comp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate reverse complement sequences — rev_comp","text":"","code":"# Reverse complement of codons rev_comp(Biostrings::DNAStringSet(c('TAA', 'TAG'))) #> DNAStringSet object of length 2: #>     width seq #> [1]     3 TTA #> [2]     3 CTA"},{"path":"https://mt1022.github.io/cubar/reference/seq_to_codons.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a coding sequence to a codon vector — seq_to_codons","title":"Convert a coding sequence to a codon vector — seq_to_codons","text":"seq_to_codons converts coding sequence (CDS) vector codons splitting sequence non-overlapping triplets starting first position.","code":""},{"path":"https://mt1022.github.io/cubar/reference/seq_to_codons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a coding sequence to a codon vector — seq_to_codons","text":"","code":"seq_to_codons(seq)"},{"path":"https://mt1022.github.io/cubar/reference/seq_to_codons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a coding sequence to a codon vector — seq_to_codons","text":"seq coding sequence DNAString object, object can coerced DNAString (e.g., character string).","code":""},{"path":"https://mt1022.github.io/cubar/reference/seq_to_codons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a coding sequence to a codon vector — seq_to_codons","text":"character vector element represents codon (3-nucleotide sequence).","code":""},{"path":"https://mt1022.github.io/cubar/reference/seq_to_codons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a coding sequence to a codon vector — seq_to_codons","text":"","code":"# Convert a CDS sequence to a sequence of codons seq_to_codons('ATGTGGTAG') #> [1] \"ATG\" \"TGG\" \"TAG\" seq_to_codons(yeast_cds[[1]]) #>   [1] \"ATG\" \"AGT\" \"TCC\" \"CGG\" \"TTT\" \"GCA\" \"AGA\" \"AGT\" \"AAT\" \"GGC\" \"AAT\" \"CCC\" #>  [13] \"AAC\" \"CAC\" \"ATT\" \"AGG\" \"AAA\" \"AGA\" \"AAT\" \"CAT\" \"TCT\" \"CCA\" \"GAC\" \"CCA\" #>  [25] \"ATA\" \"GGA\" \"ATT\" \"GAT\" \"AAT\" \"TAT\" \"AAA\" \"AGA\" \"AAA\" \"AGA\" \"CTA\" \"ATT\" #>  [37] \"ATA\" \"GAT\" \"TTA\" \"GAG\" \"AAT\" \"TTA\" \"TCC\" \"TTA\" \"AAT\" \"GAT\" \"AAA\" \"GGG\" #>  [49] \"CCC\" \"AAG\" \"AAC\" \"GGA\" \"CAT\" \"GCA\" \"GAT\" \"GAT\" \"AAC\" \"AAT\" \"CTT\" \"ATT\" #>  [61] \"CAT\" \"AAC\" \"AAT\" \"ATA\" \"GTA\" \"TTC\" \"ACA\" \"GAC\" \"GCT\" \"ATT\" \"GAT\" \"GAT\" #>  [73] \"AAG\" \"GTC\" \"CTG\" \"AAA\" \"GAG\" \"ATC\" \"ATC\" \"AAG\" \"TGT\" \"TCC\" \"ACA\" \"AGT\" #>  [85] \"AAA\" \"CGC\" \"GGC\" \"GAC\" \"AAT\" \"GAC\" \"TTG\" \"TTT\" \"TAT\" \"GAC\" \"AAA\" \"ATA\" #>  [97] \"TGG\" \"GAA\" \"CGT\" \"TTG\" \"AGA\" \"GAA\" \"AAA\" \"AGG\" \"CTA\" \"CAA\" \"ATA\" \"ATA\" #> [109] \"AAA\" \"TGG\" \"GTA\" \"GAT\" \"TAT\" \"AAG\" \"GAA\" \"ATT\" \"GCT\" \"TAT\" \"CTA\" \"AGC\" #> [121] \"TGG\" \"TGG\" \"AAG\" \"TGG\" \"TTC\" \"CAT\" \"AAT\" \"CAA\" \"ATG\" \"ACT\" \"TCG\" \"AAA\" #> [133] \"TAC\" \"ACT\" \"TAT\" \"GAT\" \"GGA\" \"GAG\" \"GCT\" \"GAT\" \"ACC\" \"GAT\" \"GTT\" \"GAA\" #> [145] \"ATG\" \"ATG\" \"GCA\" \"GTG\" \"GAT\" \"ACT\" \"GAT\" \"GTG\" \"GAT\" \"ATG\" \"GAT\" \"GCG\" #> [157] \"TAA\""},{"path":"https://mt1022.github.io/cubar/reference/show_codon_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Display available genetic code tables — show_codon_tables","title":"Display available genetic code tables — show_codon_tables","text":"show_codon_tables displays formatted list genetic code tables available NCBI, showing ID numbers descriptive names. function helps users identify appropriate genetic code ID use get_codon_table().","code":""},{"path":"https://mt1022.github.io/cubar/reference/show_codon_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display available genetic code tables — show_codon_tables","text":"","code":"show_codon_tables()"},{"path":"https://mt1022.github.io/cubar/reference/show_codon_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display available genetic code tables — show_codon_tables","text":"return value (called side effects). function prints   formatted table available genetic codes console, line   showing numeric ID corresponding organism/organelle description.","code":""},{"path":"https://mt1022.github.io/cubar/reference/show_codon_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display available genetic code tables — show_codon_tables","text":"","code":"# Display all available NCBI genetic code tables show_codon_tables() #>  1: Standard #>  2: Vertebrate Mitochondrial #>  3: Yeast Mitochondrial #>  4: Mold Mitochondrial; Protozoan Mitochondrial; Coelenterate Mitochondrial; Mycoplasma; Spiroplasma #>  5: Invertebrate Mitochondrial #>  6: Ciliate Nuclear; Dasycladacean Nuclear; Hexamita Nuclear #>  9: Echinoderm Mitochondrial; Flatworm Mitochondrial #> 10: Euplotid Nuclear #> 11: Bacterial, Archaeal and Plant Plastid #> 12: Alternative Yeast Nuclear #> 13: Ascidian Mitochondrial #> 14: Alternative Flatworm Mitochondrial #> 15: Blepharisma Macronuclear #> 16: Chlorophycean Mitochondrial #> 21: Trematode Mitochondrial #> 22: Scenedesmus obliquus Mitochondrial #> 23: Thraustochytrium Mitochondrial #> 24: Pterobranchia Mitochondrial #> 25: Candidate Division SR1 and Gracilibacteria #> 26: Pachysolen tannophilus Nuclear"},{"path":"https://mt1022.github.io/cubar/reference/slide.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate sliding window intervals — slide","title":"Generate sliding window intervals — slide","text":"slide creates data.table defining sliding window positions analyzing sequences data along continuous range. function provides foundation positional analyses codon usage patterns within genes.","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate sliding window intervals — slide","text":"","code":"slide(from, to, step = 1, before = 0, after = 0)"},{"path":"https://mt1022.github.io/cubar/reference/slide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate sliding window intervals — slide","text":"Integer specifying start position analysis range. Integer specifying end position analysis range. step Integer specifying step size consecutive window centers (default: 1). Larger values create non-overlapping less overlapping windows. Integer specifying number positions include window center (default: 0). Determines left boundary window. Integer specifying number positions include window center (default: 0). Determines right boundary window.","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate sliding window intervals — slide","text":"data.table three columns: start: Start position window center: Center position window end: End position window","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate sliding window intervals — slide","text":"","code":"# Create sliding windows with step size 2 and window size 3 slide(1, 10, step = 2, before = 1, after = 1) #>    start center   end #>    <num>  <num> <num> #> 1:     1      2     3 #> 2:     3      4     5 #> 3:     5      6     7 #> 4:     7      8     9"},{"path":"https://mt1022.github.io/cubar/reference/slide_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"apply a cub index to a sliding window — slide_apply","title":"apply a cub index to a sliding window — slide_apply","text":"slide_apply applies function sliding window codons.","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"apply a cub index to a sliding window — slide_apply","text":"","code":"slide_apply(seq, .f, step = 1, before = 0, after = 0, ...)"},{"path":"https://mt1022.github.io/cubar/reference/slide_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"apply a cub index to a sliding window — slide_apply","text":"seq DNAString, sequence .f function, codon index calculation function apply, example, get_enc. step integer, step size number codons integer, number codons center window integer, number codons center window ... additional arguments pass function .f","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"apply a cub index to a sliding window — slide_apply","text":"data.table start, center, end, codon usage index columns","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"apply a cub index to a sliding window — slide_apply","text":"","code":"slide_apply(yeast_cds[[1]], get_enc, step = 1, before = 10, after = 10) #>      start center   end    index #>      <num>  <num> <num>    <num> #>   1:     1     31    63 55.15243 #>   2:     4     34    66 55.20681 #>   3:     7     37    69 55.63983 #>   4:    10     40    72 54.41121 #>   5:    13     43    75 54.34740 #>  ---                             #> 133:   397    427   459 49.88711 #> 134:   400    430   462 49.24240 #> 135:   403    433   465 49.44166 #> 136:   406    436   468 49.55795 #> 137:   409    439   471 50.11617"},{"path":"https://mt1022.github.io/cubar/reference/slide_codon.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate sliding windows for codon-level analysis — slide_codon","title":"Generate sliding windows for codon-level analysis — slide_codon","text":"slide_codon creates sliding window intervals specifically designed codon-based analysis DNA sequences. function automatically handles codon boundaries useful studying positional effects codon usage within genes.","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide_codon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate sliding windows for codon-level analysis — slide_codon","text":"","code":"slide_codon(seq, step = 1, before = 0, after = 0)"},{"path":"https://mt1022.github.io/cubar/reference/slide_codon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate sliding windows for codon-level analysis — slide_codon","text":"seq DNA sequence DNAString object, object can coerced DNAString. step Integer specifying step size consecutive window centers codons (default: 1). step 3 creates non-overlapping windows. Integer specifying number codons include window center (default: 0). Integer specifying number codons include window center (default: 0).","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide_codon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate sliding windows for codon-level analysis — slide_codon","text":"data.table three columns containing nucleotide positions: start: Start nucleotide position window center: Center nucleotide position window end: End nucleotide position window","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide_codon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate sliding windows for codon-level analysis — slide_codon","text":"","code":"# Create sliding windows for codon analysis x <- Biostrings::DNAString('ATCTACATAGCTACGTAGCTCGATGCTAGCATGCATCGTACGATCGTCGATCGTAG') slide_codon(x, step = 3, before = 1, after = 1) #>    start center   end #>    <num>  <num> <num> #> 1:     1      4     9 #> 2:    10     13    18 #> 3:    19     22    27 #> 4:    28     31    36 #> 5:    37     40    45 #> 6:    46     49    54"},{"path":"https://mt1022.github.io/cubar/reference/slide_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"plot sliding window codon usage — slide_plot","title":"plot sliding window codon usage — slide_plot","text":"slide_plot visualizes codon usage sliding window.","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot sliding window codon usage — slide_plot","text":"","code":"slide_plot(windt, index_name = \"Index\")"},{"path":"https://mt1022.github.io/cubar/reference/slide_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot sliding window codon usage — slide_plot","text":"windt data.table, sliding window codon usage generated slide_apply. index_name character, name index display.","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot sliding window codon usage — slide_plot","text":"ggplot2 plot.","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot sliding window codon usage — slide_plot","text":"","code":"sw <- slide_apply(yeast_cds[[1]], get_enc, step = 1, before = 10, after = 10) slide_plot(sw)"},{"path":"https://mt1022.github.io/cubar/reference/yeast_cds.html","id":null,"dir":"Reference","previous_headings":"","what":"yeast CDS sequences — yeast_cds","title":"yeast CDS sequences — yeast_cds","text":"CDSs protein-coding genes Saccharomyces_cerevisiae","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_cds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"yeast CDS sequences — yeast_cds","text":"","code":"yeast_cds"},{"path":"https://mt1022.github.io/cubar/reference/yeast_cds.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"yeast CDS sequences — yeast_cds","text":"DNAStringSet 6600 sequences","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_cds.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"yeast CDS sequences — yeast_cds","text":"<https://ftp.ensembl.org/pub/release-107/fasta/saccharomyces_cerevisiae/cds/Saccharomyces_cerevisiae.R64-1-1.cds..fa.gz>","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_cds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"yeast CDS sequences — yeast_cds","text":"","code":"head(yeast_cds) #> DNAStringSet object of length 6: #>     width seq                                               names                #> [1]   471 ATGAGTTCCCGGTTTGCAAGAAG...CTGATGTGGATATGGATGCGTAA YPL071C #> [2]   432 ATGTCTAGATCTGGTGTTGCTGT...GCAGAGGCGCTGGTTCTCATTAA YLL050C #> [3]  2160 ATGTCTGGAATGGGTATTGCGAT...AAGAGAGCCTTGCTGGAATATAG YMR172W #> [4]   663 ATGTCAGCACCTGCTCAAAACAA...ATGAAGACGATGCTGATTTATAA YOR185C #> [5]  2478 ATGGATAACTTCAAAATTTACAG...AATATCAAAATGGCAGAAAATGA YLL032C #> [6]  2703 ATGGGCTCCAATAAGGAAGCAAA...CAAAGCTGCCATATACCAAATAA YBR225W"},{"path":"https://mt1022.github.io/cubar/reference/yeast_exp.html","id":null,"dir":"Reference","previous_headings":"","what":"yeast mRNA expression levels — yeast_exp","title":"yeast mRNA expression levels — yeast_exp","text":"Yeast mRNA FPKM determined rRNA-depleted (RiboZero) total RNA-Seq libraries. RUN1_0_WT RUN2_0_WT (0 min RNA Pol II repression) averaged used .","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_exp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"yeast mRNA expression levels — yeast_exp","text":"","code":"yeast_exp"},{"path":"https://mt1022.github.io/cubar/reference/yeast_exp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"yeast mRNA expression levels — yeast_exp","text":"data.frame 6717 rows three columns: gene_id gene ID gene_name gene name fpkm mRNA expression level Fragments per kilobase per million reads","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_exp.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"yeast mRNA expression levels — yeast_exp","text":"<https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE57385>","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_exp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"yeast mRNA expression levels — yeast_exp","text":"Presnyak V, Alhusaini N, Chen YH, Martin S, Morris N, Kline N, Olson S, Weinberg D, Baker KE, Graveley BR, et al. 2015. Codon optimality major determinant mRNA stability. Cell 160:1111-1124.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_exp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"yeast mRNA expression levels — yeast_exp","text":"","code":"head(yeast_exp) #> # A tibble: 6 × 3 #>   gene_id gene_name  fpkm #>   <chr>   <chr>     <dbl> #> 1 YAL001C TFC3       28.8 #> 2 YAL002W VPS8       19.2 #> 3 YAL003W EFB1      889.  #> 4 YAL004W YAL004w    84.1 #> 5 YAL005C SSA1      385.  #> 6 YAL007C ERP2      123."},{"path":"https://mt1022.github.io/cubar/reference/yeast_half_life.html","id":null,"dir":"Reference","previous_headings":"","what":"Half life of yeast mRNAs — yeast_half_life","title":"Half life of yeast mRNAs — yeast_half_life","text":"Half life yeast mRNAs Saccharomyces_cerevisiae calculated rRNA-deleted total RNAs Presnyak et al.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_half_life.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Half life of yeast mRNAs — yeast_half_life","text":"","code":"yeast_half_life"},{"path":"https://mt1022.github.io/cubar/reference/yeast_half_life.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Half life of yeast mRNAs — yeast_half_life","text":"data.frame 3888 rows three columns: gene_id gene id gene_name gene name half_life mRNA half life minutes","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_half_life.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Half life of yeast mRNAs — yeast_half_life","text":"<https://doi.org/10.1016/j.cell.2015.02.029>","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_half_life.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Half life of yeast mRNAs — yeast_half_life","text":"Presnyak V, Alhusaini N, Chen YH, Martin S, Morris N, Kline N, Olson S, Weinberg D, Baker KE, Graveley BR, et al. 2015. Codon optimality major determinant mRNA stability. Cell 160:1111-1124.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_half_life.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Half life of yeast mRNAs — yeast_half_life","text":"","code":"head(yeast_half_life) #>   gene_id gene_name half_life #> 1 YAL001C      TFC3 10.794423 #> 2 YAL003W      EFB1 43.425357 #> 3 YAL007C      ERP2 10.089357 #> 4 YAL008W     FUN14 27.462701 #> 5 YAL009W      SPO7  4.378069 #> 6 YAL010C     MDM10  5.827223"},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna.html","id":null,"dir":"Reference","previous_headings":"","what":"yeast tRNA sequences — yeast_trna","title":"yeast tRNA sequences — yeast_trna","text":"Yeast tRNA sequences obtained gtRNAdb.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"yeast tRNA sequences — yeast_trna","text":"","code":"yeast_trna"},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"yeast tRNA sequences — yeast_trna","text":"RNAStringSet length 275.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"yeast tRNA sequences — yeast_trna","text":"<http://gtrnadb.ucsc.edu/genomes/eukaryota/Scere3/sacCer3-mature-tRNAs.fa>","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"yeast tRNA sequences — yeast_trna","text":"Chan PP, Lowe TM. 2016. GtRNAdb 2.0: expanded database transfer RNA genes identified complete draft genomes. Nucleic Acids Res 44:D184-189.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"yeast tRNA sequences — yeast_trna","text":"","code":"yeast_trna #> RNAStringSet object of length 275: #>       width seq                                             names                #>   [1]    73 GGGCGUGUGGCGUAGUCGGUAG...GGUUCGAUUCCGGACUCGUCCA Saccharomyces_cer... #>   [2]    73 GGGCGUGUGGCGUAGUCGGUAG...GGUUCGAUUCCGGACUCGUCCA Saccharomyces_cer... #>   [3]    73 GGGCGUGUGGCGUAGUCGGUAG...GGUUCGAUUCCGGACUCGUCCA Saccharomyces_cer... #>   [4]    73 GGGCGUGUGGCGUAGUCGGUAG...GGUUCGAUUCCGGACUCGUCCA Saccharomyces_cer... #>   [5]    73 GGGCGUGUGGCGUAGUCGGUAG...GGUUCGAUUCCGGACUCGUCCA Saccharomyces_cer... #>   ...   ... ... #> [271]    72 AGCGCCGUGGCGCAGUGGAAGC...GGAUCGAAACCGAGCGGCGCUA Saccharomyces_cer... #> [272]    72 AGCGCCGUGGCGCAGUGGAAGC...GGAUCGAAACCGAGCGGCGCUA Saccharomyces_cer... #> [273]    72 AGCGCCGUGGCGCAGUGGAAGC...GGAUCGAAACCGAGCGGCGCUA Saccharomyces_cer... #> [274]    72 AGCGCCGUGGCGCAGUGGAAGC...GGAUCGAAACCGAGCGGCGCUA Saccharomyces_cer... #> [275]    72 AGCGCCGUGGCGCAGUGGAAGC...GGAUCGAAACCGAGCGGCGCUA Saccharomyces_cer..."},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna_gcn.html","id":null,"dir":"Reference","previous_headings":"","what":"yeast tRNA gene copy numbers (GCN) — yeast_trna_gcn","title":"yeast tRNA gene copy numbers (GCN) — yeast_trna_gcn","text":"Yeast tRNA gene copy numbers (GCN) anticodon obtained gtRNAdb.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna_gcn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"yeast tRNA gene copy numbers (GCN) — yeast_trna_gcn","text":"","code":"yeast_trna_gcn"},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna_gcn.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"yeast tRNA gene copy numbers (GCN) — yeast_trna_gcn","text":"named vector length 41. Value names anticodons.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna_gcn.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"yeast tRNA gene copy numbers (GCN) — yeast_trna_gcn","text":"<http://gtrnadb.ucsc.edu/genomes/eukaryota/Scere3/sacCer3-mature-tRNAs.fa>","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna_gcn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"yeast tRNA gene copy numbers (GCN) — yeast_trna_gcn","text":"Chan PP, Lowe TM. 2016. GtRNAdb 2.0: expanded database transfer RNA genes identified complete draft genomes. Nucleic Acids Res 44:D184-189.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna_gcn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"yeast tRNA gene copy numbers (GCN) — yeast_trna_gcn","text":"","code":"yeast_trna_gcn #>  #> Ala-AGC Ala-TGC Arg-ACG Arg-CCG Arg-CCT Arg-TCT Asn-GTT Asp-GTC Cys-GCA Gln-CTG  #>      11       5       6       1       1      11      10      16       4       1  #> Gln-TTG Glu-CTC Glu-TTC Gly-CCC Gly-GCC Gly-TCC His-GTG Ile-AAT Ile-TAT Leu-CAA  #>       9       2      14       2      16       3       7      13       2      10  #> Leu-GAG Leu-TAA Leu-TAG Lys-CTT Lys-TTT Met-CAT Phe-GAA Pro-AGG Pro-TGG Ser-AGA  #>       1       7       3      14       7       5      10       2      10      11  #> Ser-CGA Ser-GCT Ser-TGA Thr-AGT Thr-CGT Thr-TGT Trp-CCA Tyr-GTA Val-AAC Val-CAC  #>       1       2       3      11       1       4       6       8      14       2  #> Val-TAC  #>       2"},{"path":[]},{"path":"https://mt1022.github.io/cubar/news/index.html","id":"cubar-110","dir":"Changelog","previous_headings":"","what":"cubar 1.1.0","title":"cubar 1.1.0","text":"CRAN release: 2024-12-07 Added options codon-family level analysis (default, subfamily). Improved documentation GitHub workflow.","code":""},{"path":"https://mt1022.github.io/cubar/news/index.html","id":"cubar-100","dir":"Changelog","previous_headings":"","what":"cubar 1.0.0","title":"cubar 1.0.0","text":"CRAN release: 2024-08-01 est_optimal_codons get_fop now work codon frequency matrix like cubar functions. codon optimization can done family(amino acid) subfamily level now optimal codons can estimated level using either codon bias gene expression levels (Thanks @maltesemike valuable suggestions feedback). false discovery rate controlled fdr argument. two RSCU columns (RSCU rscu) output est_optimal_codons get_fop. Now rscu kept represents RSCU values. New functions perform sliding window analysis codon usage: slide, slide_codon, slide_apply slide_plot. New function calculate deviation proportionality (Dp) host tRNA availability: get_dp.","code":""},{"path":"https://mt1022.github.io/cubar/news/index.html","id":"cubar-060","dir":"Changelog","previous_headings":"","what":"cubar 0.6.0","title":"cubar 0.6.0","text":"CRAN release: 2024-07-04 Add util functions (codon_optimize & codon_diff) Fix url failure gtRNAdb, caused remove cubar cran :(","code":""},{"path":"https://mt1022.github.io/cubar/news/index.html","id":"cubar-051","dir":"Changelog","previous_headings":"","what":"cubar 0.5.1","title":"cubar 0.5.1","text":"fix bug get_cscg caused error input codon frequency matrix single row. finish unit tests functions internal data.","code":""},{"path":"https://mt1022.github.io/cubar/news/index.html","id":"cubar-050","dir":"Changelog","previous_headings":"","what":"cubar 0.5.0","title":"cubar 0.5.0","text":"CRAN release: 2024-01-09 fixed bug est_trna_weight. Now zero w values replaced geometric mean (rather arithmetic mean) non-zero w values. fixed unexpected warnings est_optimal_codons. fixed bugs update input codon table due data.table reference semantics. added new vignette explaining mathematical details implementation.","code":""},{"path":"https://mt1022.github.io/cubar/news/index.html","id":"cubar-042","dir":"Changelog","previous_headings":"","what":"cubar 0.4.2","title":"cubar 0.4.2","text":"CRAN release: 2023-11-18 adjust formatting fix typo get_enc code","code":""},{"path":"https://mt1022.github.io/cubar/news/index.html","id":"cubar-041","dir":"Changelog","previous_headings":"","what":"cubar 0.4.1","title":"cubar 0.4.1","text":"New vignette mitochondrial codon usage analysis. Fix bug get_enc non-standard genetic code.","code":""},{"path":"https://mt1022.github.io/cubar/news/index.html","id":"cubar-040","dir":"Changelog","previous_headings":"","what":"cubar 0.4.0","title":"cubar 0.4.0","text":"CRAN release: 2023-07-17 Released CRAN.","code":""},{"path":"https://mt1022.github.io/cubar/news/index.html","id":"cubar-032","dir":"Changelog","previous_headings":"","what":"cubar 0.3.2","title":"cubar 0.3.2","text":"Initial CRAN submission.","code":""}]
