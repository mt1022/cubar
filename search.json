[{"path":"https://mt1022.github.io/cubar/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 GxE Lab Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mt1022.github.io/cubar/articles/Introduction.html","id":"common-analyses","dir":"Articles","previous_headings":"","what":"Common analyses","title":"Introduction","text":"Sequences handling codon table Effective number codons (ENC)  Fraction optimal codons (Fop)  Codon Adaptation Index (CAI)  tRNA Adaptation Index (tAI)","code":"# example data yeast_cds #> Loading required package: Biostrings #> Loading required package: BiocGenerics #>  #> Attaching package: 'BiocGenerics' #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, aperm, append, as.data.frame, basename, cbind, #>     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, #>     get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, #>     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, #>     Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, #>     table, tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #> Loading required package: stats4 #>  #> Attaching package: 'S4Vectors' #> The following object is masked from 'package:utils': #>  #>     findMatches #> The following objects are masked from 'package:base': #>  #>     expand.grid, I, unname #> Loading required package: IRanges #> Loading required package: XVector #> Loading required package: GenomeInfoDb #>  #> Attaching package: 'Biostrings' #> The following object is masked from 'package:base': #>  #>     strsplit #> DNAStringSet object of length 6600: #>        width seq                                            names                #>    [1]   471 ATGAGTTCCCGGTTTGCAAGAA...GATGTGGATATGGATGCGTAA YPL071C #>    [2]   432 ATGTCTAGATCTGGTGTTGCTG...AGAGGCGCTGGTTCTCATTAA YLL050C #>    [3]  2160 ATGTCTGGAATGGGTATTGCGA...GAGAGCCTTGCTGGAATATAG YMR172W #>    [4]   663 ATGTCAGCACCTGCTCAAAACA...GAAGACGATGCTGATTTATAA YOR185C #>    [5]  2478 ATGGATAACTTCAAAATTTACA...TATCAAAATGGCAGAAAATGA YLL032C #>    ...   ... ... #> [6596]  1902 ATGCCAGACAATCTATCATTAC...CACGAAAAGACTTTCATTTAA YBR021W #> [6597]   138 ATGAGGGTTCTCCATGTTATGC...AAAAAAAAAAAAAAAAGATGA YDR320W-B #> [6598]   360 ATGTTTATTCTAGCAGAGGTTT...AATGCCGCGCTGGACGATTAA YBR232C #> [6599]  1704 ATGGCAAGCGAACAGTCCTCAC...TTCCCAAAGAGTTTTAATTGA YDL245C #> [6600]   906 ATGTTGAATAGTTCAAGAAAAT...TACTCTTTTATCTTCAATTGA YBR024W yeast_cds_qc <- check_cds(yeast_cds)  # convert a CDS to codon sequence seq_to_codons(yeast_cds_qc[['YDR320W-B']]) #>  [1] \"AGG\" \"GTT\" \"CTC\" \"CAT\" \"GTT\" \"ATG\" \"CTT\" \"TCT\" \"TTC\" \"CTA\" \"AAC\" \"TCA\" #> [13] \"CTT\" \"CTT\" \"TTC\" \"CTC\" \"CCT\" \"ATC\" \"TGC\" \"TTT\" \"TGT\" \"TTA\" \"TTA\" \"CAG\" #> [25] \"TTG\" \"AAG\" \"GCT\" \"ACT\" \"TGT\" \"GCC\" \"GTT\" \"CGT\" \"GTG\" \"AAA\" \"AAA\" \"TAC\" #> [37] \"TCG\" \"ATG\" \"AAA\" \"AAA\" \"AAA\" \"AAA\" \"AAA\" \"AGA\"  # convert a CDS to amino acid sequence Biostrings::translate(yeast_cds_qc[['YDR320W-B']]) #> 44-letter AAString object #> seq: RVLHVMLSFLNSLLFLPICFCLLQLKATCAVRVKKYSMKKKKKR  # get codon frequency yeast_cf <- count_codons(yeast_cds_qc)  # get codon table for the standard genetic code ctab <- get_codon_table(gcid = '1') # get enc yeast_enc <- get_enc(yeast_cf) head(yeast_enc) #>  YPL071C  YLL050C  YMR172W  YOR185C  YLL032C  YBR225W  #> 53.00343 45.06356 56.01914 50.84984 53.29440 53.82957 hist(yeast_enc) # estimate optimal codons optimal_codons <- est_optimal_codons(yeast_cds_qc, codon_table = ctab) optimal_codons #>     aa_code amino_acid codon subfam        coef          se     zvalue #>  1:       A        Ala   GCT Ala_GC -0.08702058 0.001295945 -67.148380 #>  2:       A        Ala   GCC Ala_GC -0.01876569 0.001410424 -13.304998 #>  3:       A        Ala   GCA Ala_GC  0.08612405 0.001651786  52.139941 #>  4:       A        Ala   GCG Ala_GC  0.13245286 0.002897501  45.712791 #>  5:       R        Arg   AGA Arg_AG -0.13023392 0.002699024 -48.252221 #>  6:       R        Arg   AGG Arg_AG  0.13023392 0.002699024  48.252221 #>  7:       R        Arg   CGT Arg_CG -0.21009663 0.004145530 -50.680276 #>  8:       R        Arg   CGC Arg_CG  0.06704651 0.004561998  14.696741 #>  9:       R        Arg   CGA Arg_CG  0.15756282 0.005211268  30.235027 #> 10:       R        Arg   CGG Arg_CG  0.17689904 0.006663392  26.547897 #> 11:       N        Asn   AAT Asn_AA  0.05752254 0.001573677  36.552951 #> 12:       N        Asn   AAC Asn_AA -0.05752254 0.001573677 -36.552951 #> 13:       D        Asp   GAT Asp_GA  0.01846525 0.001472061  12.543809 #> 14:       D        Asp   GAC Asp_GA -0.01846525 0.001472061 -12.543809 #> 15:       C        Cys   TGT Cys_TG -0.10061399 0.003916089 -25.692469 #> 16:       C        Cys   TGC Cys_TG  0.10061399 0.003916089  25.692469 #> 17:       Q        Gln   CAA Gln_CA -0.11402126 0.002431540 -46.892615 #> 18:       Q        Gln   CAG Gln_CA  0.11402126 0.002431540  46.892615 #> 19:       E        Glu   GAA Glu_GA -0.08495228 0.001741618 -48.777798 #> 20:       E        Glu   GAG Glu_GA  0.08495228 0.001741618  48.777798 #> 21:       G        Gly   GGT Gly_GG -0.17298185 0.001750857 -98.798410 #> 22:       G        Gly   GGC Gly_GG  0.08353350 0.002104163  39.699151 #> 23:       G        Gly   GGA Gly_GG  0.12180433 0.002217761  54.922219 #> 24:       G        Gly   GGG Gly_GG  0.12756390 0.002957835  43.127455 #> 25:       H        His   CAT His_CA  0.03712113 0.002425445  15.304872 #> 26:       H        His   CAC His_CA -0.03712113 0.002425445 -15.304872 #> 27:       I        Ile   ATT Ile_AT -0.03925015 0.001369989 -28.649964 #> 28:       I        Ile   ATC Ile_AT -0.05077761 0.001444496 -35.152474 #> 29:       I        Ile   ATA Ile_AT  0.13424317 0.002071677  64.799283 #> 30:       L        Leu   CTT Leu_CT -0.02011263 0.002293289  -8.770210 #> 31:       L        Leu   CTC Leu_CT  0.08046211 0.003663906  21.960744 #> 32:       L        Leu   CTA Leu_CT -0.05325623 0.002230109 -23.880545 #> 33:       L        Leu   CTG Leu_CT  0.04648372 0.002636924  17.628011 #> 34:       L        Leu   TTA Leu_TT  0.05220574 0.001430483  36.495197 #> 35:       L        Leu   TTG Leu_TT -0.05220574 0.001430483 -36.495197 #> 36:       K        Lys   AAA Lys_AA  0.06772648 0.001287660  52.596564 #> 37:       K        Lys   AAG Lys_AA -0.06772648 0.001287660 -52.596564 #> 38:       M        Met   ATG Met_AT  0.00000000 0.000000000   0.000000 #> 39:       F        Phe   TTT Phe_TT  0.06277157 0.001697785  36.972620 #> 40:       F        Phe   TTC Phe_TT -0.06277157 0.001697785 -36.972620 #> 41:       P        Pro   CCT Pro_CC  0.01730090 0.001794160   9.642895 #> 42:       P        Pro   CCC Pro_CC  0.11661003 0.003042406  38.328227 #> 43:       P        Pro   CCA Pro_CC -0.11017659 0.001789079 -61.582856 #> 44:       P        Pro   CCG Pro_CC  0.14732013 0.003697757  39.840406 #> 45:       S        Ser   AGT Ser_AG -0.02198467 0.002834011  -7.757442 #> 46:       S        Ser   AGC Ser_AG  0.02198467 0.002834011   7.757442 #> 47:       S        Ser   TCT Ser_TC -0.06420661 0.001368870 -46.904818 #> 48:       S        Ser   TCC Ser_TC -0.03011306 0.001517386 -19.845347 #> 49:       S        Ser   TCA Ser_TC  0.06087806 0.001679651  36.244471 #> 50:       S        Ser   TCG Ser_TC  0.11453925 0.002712104  42.232621 #> 51:       T        Thr   ACT Thr_AC -0.05060232 0.001373491 -36.842131 #> 52:       T        Thr   ACC Thr_AC -0.05078605 0.001495682 -33.955116 #> 53:       T        Thr   ACA Thr_AC  0.05870383 0.001651019  35.556123 #> 54:       T        Thr   ACG Thr_AC  0.11718345 0.002706591  43.295591 #> 55:       W        Trp   TGG Trp_TG  0.00000000 0.000000000   0.000000 #> 56:       Y        Tyr   TAT Tyr_TA  0.05766467 0.001944119  29.661085 #> 57:       Y        Tyr   TAC Tyr_TA -0.05766467 0.001944119 -29.661085 #> 58:       V        Val   GTT Val_GT -0.06198191 0.001319203 -46.984348 #> 59:       V        Val   GTC Val_GT -0.05476620 0.001444046 -37.925516 #> 60:       V        Val   GTA Val_GT  0.10561631 0.002090615  50.519249 #> 61:       V        Val   GTG Val_GT  0.09082653 0.002097084  43.310870 #>     aa_code amino_acid codon subfam        coef          se     zvalue #>            pvalue        qvalue #>  1:  0.000000e+00  0.000000e+00 #>  2:  2.164990e-40  2.401170e-40 #>  3:  0.000000e+00  0.000000e+00 #>  4:  0.000000e+00  0.000000e+00 #>  5:  0.000000e+00  0.000000e+00 #>  6:  0.000000e+00  0.000000e+00 #>  7:  0.000000e+00  0.000000e+00 #>  8:  6.763720e-49  7.640498e-49 #>  9: 8.209457e-201 1.221407e-200 #> 10: 2.715861e-155 3.681501e-155 #> 11: 1.600668e-292 2.871787e-292 #> 12: 1.600668e-292 2.871787e-292 #> 13:  4.298281e-36  4.599915e-36 #> 14:  4.298281e-36  4.599915e-36 #> 15: 1.418849e-145 1.841485e-145 #> 16: 1.418849e-145 1.841485e-145 #> 17:  0.000000e+00  0.000000e+00 #> 18:  0.000000e+00  0.000000e+00 #> 19:  0.000000e+00  0.000000e+00 #> 20:  0.000000e+00  0.000000e+00 #> 21:  0.000000e+00  0.000000e+00 #> 22:  0.000000e+00  0.000000e+00 #> 23:  0.000000e+00  0.000000e+00 #> 24:  0.000000e+00  0.000000e+00 #> 25:  7.094173e-53  8.164992e-53 #> 26:  7.094173e-53  8.164992e-53 #> 27: 1.604694e-180 2.224690e-180 #> 28: 1.065528e-270 1.666596e-270 #> 29:  0.000000e+00  0.000000e+00 #> 30:  1.783334e-18  1.843786e-18 #> 31: 6.836972e-107 8.511333e-107 #> 32: 4.878789e-126 6.200127e-126 #> 33:  1.501568e-69  1.795994e-69 #> 34: 1.321618e-291 2.239408e-291 #> 35: 1.321618e-291 2.239408e-291 #> 36:  0.000000e+00  0.000000e+00 #> 37:  0.000000e+00  0.000000e+00 #> 38:  0.000000e+00  0.000000e+00 #> 39: 3.154829e-299 6.207890e-299 #> 40: 3.154829e-299 6.207890e-299 #> 41:  5.268072e-22  5.540558e-22 #> 42:  0.000000e+00  0.000000e+00 #> 43:  0.000000e+00  0.000000e+00 #> 44:  0.000000e+00  0.000000e+00 #> 45:  8.665973e-15  8.665973e-15 #> 46:  8.665973e-15  8.665973e-15 #> 47:  0.000000e+00  0.000000e+00 #> 48:  1.208906e-87  1.474865e-87 #> 49: 1.214411e-287 2.002138e-287 #> 50:  0.000000e+00  0.000000e+00 #> 51: 3.909036e-297 7.451601e-297 #> 52: 1.025107e-252 1.563288e-252 #> 53: 6.682231e-277 1.072674e-276 #> 54:  0.000000e+00  0.000000e+00 #> 55:  0.000000e+00  0.000000e+00 #> 56: 2.440435e-193 3.462013e-193 #> 57: 2.440435e-193 3.462013e-193 #> 58:  0.000000e+00  0.000000e+00 #> 59:  0.000000e+00  0.000000e+00 #> 60:  0.000000e+00  0.000000e+00 #> 61:  0.000000e+00  0.000000e+00 #>            pvalue        qvalue  # get fop fop <- get_fop(yeast_cds) hist(fop) # estimate RSCU rscu <- est_rscu(yeast_cf, codon_table = ctab)  # calculate CAI # note: CAI values are usually calculated based RSCU of highly expressed genes. cai <- get_cai(yeast_cf, rscu = rscu) hist(cai) # get tRNA gene copy number from GtRNADB path_gtrnadb <- 'http://gtrnadb.ucsc.edu/genomes/eukaryota/Scere3/sacCer3-mature-tRNAs.fa' yeast_trna <- Biostrings::readRNAStringSet(path_gtrnadb) trna_gcn <- table(data.table::tstrsplit(sub(' .*', '', names(yeast_trna)), '-')[[3]]) trna_gcn <- trna_gcn[names(trna_gcn) != 'NNN'] # copy of each anticodon  # calculate tRNA weight for each codon trna_w <- est_trna_weight(trna_level = trna_gcn, codon_table = ctab)  # get tAI tai <- get_tai(yeast_cf, trna_w = trna_w) hist(tai)"},{"path":"https://mt1022.github.io/cubar/articles/Introduction.html","id":"references","dir":"Articles","previous_headings":"Common analyses","what":"References","title":"Introduction","text":"Presnyak V, Alhusaini N, Chen YH, et al. Codon optimality major determinant mRNA stability. Cell. 2015;160(6):1111-1124. doi:10.1016/j.cell.2015.02.029","code":""},{"path":"https://mt1022.github.io/cubar/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hong Zhang. Author, maintainer.","code":""},{"path":"https://mt1022.github.io/cubar/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhang H (2023). cubar: Codon Usage Bias Analysis R. https://github.com/mt1022/cubar, https://mt1022.github.io/cubar/.","code":"@Manual{,   title = {cubar: Codon Usage Bias Analysis with R},   author = {Hong Zhang},   year = {2023},   note = {https://github.com/mt1022/cubar, https://mt1022.github.io/cubar/}, }"},{"path":"https://mt1022.github.io/cubar/index.html","id":"cubar","dir":"","previous_headings":"","what":"Codon Usage Bias Analysis with R","title":"Codon Usage Bias Analysis with R","text":"Codon usage bias analysis using R! Features Support NCBI custom genetic codes Calculate tRNA weights Calculate relative synonymous codon usage (RSCU) Machine learning analyses preferred codons Show possible codon-anticodon pairings Codon frequency matrix Codon Adaptation Index (CAI) Mean Codon Stabilization Coefficients (CSCg) Effective number codons (ENC) Fraction optimal codons (Fop) GC content 4-fold degenerate sites (GC4d) tRNA Adaptation Index (tAI)","code":""},{"path":"https://mt1022.github.io/cubar/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Codon Usage Bias Analysis with R","text":"Depends R (>= 4.1.0) Imports Biostrings (>= 2.60.0), IRanges (>= 2.34.0), data.table (>= 1.14.0), ggplot2 (>= 3.3.5), rlang (>= 0.4.11)","code":""},{"path":"https://mt1022.github.io/cubar/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Codon Usage Bias Analysis with R","text":"latest version cubar can installed : Full Documentation can found cubar website.","code":"devtools::install_github('mt1022/cubar', dependencies = TRUE)"},{"path":"https://mt1022.github.io/cubar/index.html","id":"suggests","dir":"","previous_headings":"","what":"Suggests","title":"Codon Usage Bias Analysis with R","text":"Peptides peptide- protein-related indices.","code":""},{"path":"https://mt1022.github.io/cubar/reference/aa2codon.html","id":null,"dir":"Reference","previous_headings":"","what":"amino acids to codons — aa2codon","title":"amino acids to codons — aa2codon","text":"data.frame mapping amino acids codons","code":""},{"path":"https://mt1022.github.io/cubar/reference/aa2codon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"amino acids to codons — aa2codon","text":"","code":"aa2codon"},{"path":"https://mt1022.github.io/cubar/reference/aa2codon.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"amino acids to codons — aa2codon","text":"## `aa2codon` data.frame two columns: amino_acid, codons.","code":""},{"path":"https://mt1022.github.io/cubar/reference/aa2codon.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"amino acids to codons — aa2codon","text":"actually standard genetic code.","code":""},{"path":"https://mt1022.github.io/cubar/reference/check_cds.html","id":null,"dir":"Reference","previous_headings":"","what":"Quality control of CDS — check_cds","title":"Quality control of CDS — check_cds","text":"check_cds performs quality control CDS sequences filtering peculiar sequences optionally remove start stop codons.","code":""},{"path":"https://mt1022.github.io/cubar/reference/check_cds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quality control of CDS — check_cds","text":"","code":"check_cds(   seqs,   codon_table = get_codon_table(),   min_len = 6,   check_len = TRUE,   check_start = TRUE,   check_stop = TRUE,   check_istop = TRUE,   rm_start = TRUE,   rm_stop = TRUE,   start_codons = c(\"ATG\") )"},{"path":"https://mt1022.github.io/cubar/reference/check_cds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quality control of CDS — check_cds","text":"seqs input CDS sequences codon_table codon table matching genetic code seqs min_len minimum CDS length nt check_len check whether CDS length divisible 3 check_start check whether CDSs start codons check_stop check whether CDSs stop codons check_istop check internal stop codons rm_start whether remove start codons rm_stop whether remove stop codons start_codons vector start codons","code":""},{"path":"https://mt1022.github.io/cubar/reference/check_cds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quality control of CDS — check_cds","text":"DNAStringSet filtered (trimmed) CDS sequences","code":""},{"path":"https://mt1022.github.io/cubar/reference/count_codons.html","id":null,"dir":"Reference","previous_headings":"","what":"Count occurrences of different codons — count_codons","title":"Count occurrences of different codons — count_codons","text":"count_codons tabulates occurrences 64 codons input CDSs","code":""},{"path":"https://mt1022.github.io/cubar/reference/count_codons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count occurrences of different codons — count_codons","text":"","code":"count_codons(seqs, ...)"},{"path":"https://mt1022.github.io/cubar/reference/count_codons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count occurrences of different codons — count_codons","text":"seqs CDS sequences, DNAStringSet. ... additional arguments passed `Biostrings::trinucleotideFrequency`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/count_codons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count occurrences of different codons — count_codons","text":"matrix codon (column) frequencies CDS (row).","code":""},{"path":"https://mt1022.github.io/cubar/reference/create_codon_table.html","id":null,"dir":"Reference","previous_headings":"","what":"create custom codon table from a data frame — create_codon_table","title":"create custom codon table from a data frame — create_codon_table","text":"create_codon_table creates codon table data frame aa codon mapping.","code":""},{"path":"https://mt1022.github.io/cubar/reference/create_codon_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create custom codon table from a data frame — create_codon_table","text":"","code":"create_codon_table(aa2codon)"},{"path":"https://mt1022.github.io/cubar/reference/create_codon_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create custom codon table from a data frame — create_codon_table","text":"aa2codon data frame two columns: amino_acid (Ala, Arg, etc.) codon.","code":""},{"path":"https://mt1022.github.io/cubar/reference/create_codon_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create custom codon table from a data frame — create_codon_table","text":"`data.table` four columns: aa_code, amino_acid, codon, subfam.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_csc.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Codon Stabilization Coefficient — est_csc","title":"Estimate Codon Stabilization Coefficient — est_csc","text":"get_csc calculate codon occurrence mRNA stability correlation coefficients (Default Pearson's).","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_csc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Codon Stabilization Coefficient — est_csc","text":"","code":"est_csc(   seqs,   half_life,   codon_table = get_codon_table(),   cor_method = \"pearson\" )"},{"path":"https://mt1022.github.io/cubar/reference/est_csc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Codon Stabilization Coefficient — est_csc","text":"seqs CDS sequences protein-coding genes. One gene. half_life data.frame mRNA half life (gene_id & half_life column names). codon_table table genetic code derived `get_codon_table` `create_codon_table`. cor_method method name passed `cor.test` used calculating correlation coefficients.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_csc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Codon Stabilization Coefficient — est_csc","text":"data.table optimal codons.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_optimal_codons.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate optimal codons — est_optimal_codons","title":"Estimate optimal codons — est_optimal_codons","text":"est_toptimal_codons determine optimal codon codon family binomial regression.   Usage optimal codons correlate negatively enc.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_optimal_codons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate optimal codons — est_optimal_codons","text":"","code":"est_optimal_codons(seqs, codon_table = get_codon_table())"},{"path":"https://mt1022.github.io/cubar/reference/est_optimal_codons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate optimal codons — est_optimal_codons","text":"seqs CDS sequences protein-coding genes. One gene. codon_table table genetic code derived `get_codon_table` `create_codon_table`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_optimal_codons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate optimal codons — est_optimal_codons","text":"data.table optimal codons","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_rscu.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate RSCU — est_rscu","title":"Estimate RSCU — est_rscu","text":"est_rscu returns RSCU value codons","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_rscu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate RSCU — est_rscu","text":"","code":"est_rscu(cf, weight = 1, pseudo_cnt = 1, codon_table = get_codon_table())"},{"path":"https://mt1022.github.io/cubar/reference/est_rscu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate RSCU — est_rscu","text":"cf matrix codon frequencies calculated `count_codons()`. weight vector length `seqs` gives different weights CDSs count codons. example, gene expression levels. pseudo_cnt pseudo count avoid dividing zero. may occur sequences available RSCU calculation. codon_table table genetic code derived `get_codon_table` `create_codon_table`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_rscu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate RSCU — est_rscu","text":"data.table codon info RSCU values","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_trna_weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate tRNA weight w — est_trna_weight","title":"Estimate tRNA weight w — est_trna_weight","text":"est_trna_weight compute tRNA weight per codon TAI calculation. weight reflects relative tRNA availability codon.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_trna_weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate tRNA weight w — est_trna_weight","text":"","code":"est_trna_weight(   trna_level,   codon_table = get_codon_table(),   s = list(WC = 0, IU = 0, IC = 0.4659, IA = 0.9075, GU = 0.7861, UG = 0.6295) )"},{"path":"https://mt1022.github.io/cubar/reference/est_trna_weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate tRNA weight w — est_trna_weight","text":"trna_level, named vector tRNA level (gene copy numbers), one value anticodon. vector names anticodons. codon_table table genetic code derived `get_codon_table` `create_codon_table`. s list non-Waston-Crick pairing panelty.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_trna_weight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate tRNA weight w — est_trna_weight","text":"data.table tRNA expression information.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cai.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate CAI — get_cai","title":"Calculate CAI — get_cai","text":"get_cai calculates Codon Adaptation Index (CAI) input CDS","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate CAI — get_cai","text":"","code":"get_cai(cf, rscu)"},{"path":"https://mt1022.github.io/cubar/reference/get_cai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate CAI — get_cai","text":"cf matrix codon frequencies calculated `count_codons()`. rscu rscu table containing CAI weight codon. table generated `est_rscu` prepared manually.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate CAI — get_cai","text":"named vector CAI values","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_codon_table.html","id":null,"dir":"Reference","previous_headings":"","what":"get codon table by NCBI gene code ID — get_codon_table","title":"get codon table by NCBI gene code ID — get_codon_table","text":"get_codon_table creates codon table based given id genetic code NCBI.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_codon_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get codon table by NCBI gene code ID — get_codon_table","text":"","code":"get_codon_table(gcid = \"1\")"},{"path":"https://mt1022.github.io/cubar/reference/get_codon_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get codon table by NCBI gene code ID — get_codon_table","text":"gcid string genetic code id. run `show_codon_tables()` see available codon tables.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_codon_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get codon table by NCBI gene code ID — get_codon_table","text":"`data.table` four columns: aa_code, amino_acid, codon, subfam.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cscg.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean Codon Stabilization Coefficients — get_cscg","title":"Mean Codon Stabilization Coefficients — get_cscg","text":"get_cscg calculates Mean Codon Stabilization Coefficients CDS.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cscg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean Codon Stabilization Coefficients — get_cscg","text":"","code":"get_cscg(cf, csc)"},{"path":"https://mt1022.github.io/cubar/reference/get_cscg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean Codon Stabilization Coefficients — get_cscg","text":"cf matrix codon frequencies calculated `count_codons()`. csc table Codon Stabilization Coefficients calculated `est_csc()`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cscg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean Codon Stabilization Coefficients — get_cscg","text":"named vector cscg values.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_enc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate ENC — get_enc","title":"Calculate ENC — get_enc","text":"get_enc computes ENC CDS","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_enc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate ENC — get_enc","text":"","code":"get_enc(cf, codon_table = get_codon_table())"},{"path":"https://mt1022.github.io/cubar/reference/get_enc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate ENC — get_enc","text":"cf matrix codon frequencies calculated `count_codons()`. codon_table codon_table table genetic code derived `get_codon_table` `create_codon_table`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_enc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate ENC — get_enc","text":"vector ENC values, sequence names used vector names","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_fop.html","id":null,"dir":"Reference","previous_headings":"","what":"Fraction of optimal codons (Fop) — get_fop","title":"Fraction of optimal codons (Fop) — get_fop","text":"get_fop calculates fraction optimal codons (Fop) CDS.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_fop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fraction of optimal codons (Fop) — get_fop","text":"","code":"get_fop(seqs, codon_table = get_codon_table())"},{"path":"https://mt1022.github.io/cubar/reference/get_fop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fraction of optimal codons (Fop) — get_fop","text":"seqs CDS sequences protein-coding genes. One gene. codon_table table genetic code derived `get_codon_table` `create_codon_table`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_fop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fraction of optimal codons (Fop) — get_fop","text":"named vector fop values.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc.html","id":null,"dir":"Reference","previous_headings":"","what":"GC contents — get_gc","title":"GC contents — get_gc","text":"Calculate GC content whole sequences.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GC contents — get_gc","text":"","code":"get_gc(cf)"},{"path":"https://mt1022.github.io/cubar/reference/get_gc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GC contents — get_gc","text":"cf matrix codon frequencies calculated `count_codons()`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GC contents — get_gc","text":"named vector GC contents.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc3s.html","id":null,"dir":"Reference","previous_headings":"","what":"GC contents at synonymous 3rd codon positions — get_gc3s","title":"GC contents at synonymous 3rd codon positions — get_gc3s","text":"Calculate GC content synonymous 3rd codon positions.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc3s.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GC contents at synonymous 3rd codon positions — get_gc3s","text":"","code":"get_gc3s(cf, codon_table = get_codon_table())"},{"path":"https://mt1022.github.io/cubar/reference/get_gc3s.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GC contents at synonymous 3rd codon positions — get_gc3s","text":"cf matrix codon frequencies calculated `count_codons()`. codon_table table genetic code derived `get_codon_table` `create_codon_table`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc3s.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GC contents at synonymous 3rd codon positions — get_gc3s","text":"named vector GC3s values.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc4d.html","id":null,"dir":"Reference","previous_headings":"","what":"GC contents at 4-fold degenerate sites — get_gc4d","title":"GC contents at 4-fold degenerate sites — get_gc4d","text":"Calculate GC content synonymous position codons (using four-fold degenerate sites ).","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc4d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GC contents at 4-fold degenerate sites — get_gc4d","text":"","code":"get_gc4d(cf, codon_table = get_codon_table())"},{"path":"https://mt1022.github.io/cubar/reference/get_gc4d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GC contents at 4-fold degenerate sites — get_gc4d","text":"cf matrix codon frequencies calculated `count_codons()`. codon_table table genetic code derived `get_codon_table` `create_codon_table`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc4d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GC contents at 4-fold degenerate sites — get_gc4d","text":"named vector GC4d values.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_tai.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate TAI — get_tai","title":"Calculate TAI — get_tai","text":"get_tai calculates tRNA Adaptation Index (TAI) CDS","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_tai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate TAI — get_tai","text":"","code":"get_tai(cf, trna_w)"},{"path":"https://mt1022.github.io/cubar/reference/get_tai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate TAI — get_tai","text":"cf matrix codon frequencies calculated `count_codons()`. trna_w tRNA weight codon, can generated `est_trna_weight()`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_tai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate TAI — get_tai","text":"named vector TAI values","code":""},{"path":"https://mt1022.github.io/cubar/reference/plot_ca_pairing.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot codon-anticodon pairing relationship — plot_ca_pairing","title":"Plot codon-anticodon pairing relationship — plot_ca_pairing","text":"plot_ca_pairing returns RSCU value codons","code":""},{"path":"https://mt1022.github.io/cubar/reference/plot_ca_pairing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot codon-anticodon pairing relationship — plot_ca_pairing","text":"","code":"plot_ca_pairing(codon_table = get_codon_table(), plot = TRUE)"},{"path":"https://mt1022.github.io/cubar/reference/plot_ca_pairing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot codon-anticodon pairing relationship — plot_ca_pairing","text":"codon_table table genetic code derived `get_codon_table` `create_codon_table`. plot whether plot pairing relationship","code":""},{"path":"https://mt1022.github.io/cubar/reference/plot_ca_pairing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot codon-anticodon pairing relationship — plot_ca_pairing","text":"data.table codon info RSCU values","code":""},{"path":"https://mt1022.github.io/cubar/reference/rev_comp.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse complement — rev_comp","title":"Reverse complement — rev_comp","text":"rev_comp creates reverse complemented version input sequence","code":""},{"path":"https://mt1022.github.io/cubar/reference/rev_comp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse complement — rev_comp","text":"","code":"rev_comp(seqs)"},{"path":"https://mt1022.github.io/cubar/reference/rev_comp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse complement — rev_comp","text":"seqs input sequences, DNAStringSet named vector sequences","code":""},{"path":"https://mt1022.github.io/cubar/reference/rev_comp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse complement — rev_comp","text":"reverse complemented input sequences DNAStringSet.","code":""},{"path":"https://mt1022.github.io/cubar/reference/seq_to_codons.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert CDS to codons — seq_to_codons","title":"Convert CDS to codons — seq_to_codons","text":"seq_to_codons converts coding sequence vector codons","code":""},{"path":"https://mt1022.github.io/cubar/reference/seq_to_codons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert CDS to codons — seq_to_codons","text":"","code":"seq_to_codons(seq)"},{"path":"https://mt1022.github.io/cubar/reference/seq_to_codons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert CDS to codons — seq_to_codons","text":"seq DNAString, object can coerced DNAString","code":""},{"path":"https://mt1022.github.io/cubar/reference/seq_to_codons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert CDS to codons — seq_to_codons","text":"character vector codons","code":""},{"path":"https://mt1022.github.io/cubar/reference/show_codon_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"show available codon tables — show_codon_tables","title":"show available codon tables — show_codon_tables","text":"show_codon_tables print table available genetic code NCBI `Biostrings::GENETIC_CODE_TABLE`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/show_codon_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"show available codon tables — show_codon_tables","text":"","code":"show_codon_tables()"},{"path":"https://mt1022.github.io/cubar/reference/yeast_cds.html","id":null,"dir":"Reference","previous_headings":"","what":"yeast CDS sequences — yeast_cds","title":"yeast CDS sequences — yeast_cds","text":"CDSs protein-coding genes Saccharomyces_cerevisiae","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_cds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"yeast CDS sequences — yeast_cds","text":"","code":"yeast_cds"},{"path":"https://mt1022.github.io/cubar/reference/yeast_cds.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"yeast CDS sequences — yeast_cds","text":"## `yeast_cds` DNAStringSet 6600 yeast CDS sequences","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_cds.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"yeast CDS sequences — yeast_cds","text":"<https://ftp.ensembl.org/pub/release-107/fasta/saccharomyces_cerevisiae/cds/Saccharomyces_cerevisiae.R64-1-1.cds..fa.gz>","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_half_life.html","id":null,"dir":"Reference","previous_headings":"","what":"Half life of yeast mRNAs — yeast_half_life","title":"Half life of yeast mRNAs — yeast_half_life","text":"Half life yeast mRNAs Saccharomyces_cerevisiae calculated rRNA-deleted total RNAs Presnyak et al.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_half_life.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Half life of yeast mRNAs — yeast_half_life","text":"","code":"yeast_half_life"},{"path":"https://mt1022.github.io/cubar/reference/yeast_half_life.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Half life of yeast mRNAs — yeast_half_life","text":"## `yeast_half_life` data.frame 3888 rows three columns (gene_id, gene_name, half_life min)","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_half_life.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Half life of yeast mRNAs — yeast_half_life","text":"<https://doi.org/10.1016/j.cell.2015.02.029>","code":""}]
