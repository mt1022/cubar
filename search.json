[{"path":"https://mt1022.github.io/cubar/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 GxE Lab Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mt1022.github.io/cubar/articles/Introduction.html","id":"common-analyses","dir":"Articles","previous_headings":"","what":"Common analyses","title":"Introduction","text":"CDS sequence QC basic manipulation. Get codon table visualize  Calculate effective number codons (ENC)  Calculate fraction optimal codons (Fop)  Calculate Codon Adaptation Index (CAI)  Calculate tRNA Adaptation Index (tAI)","code":"# example data yeast_cds #> Loading required package: Biostrings #> Loading required package: BiocGenerics #>  #> Attaching package: 'BiocGenerics' #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, aperm, append, as.data.frame, basename, cbind, #>     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, #>     get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, #>     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, #>     Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, #>     table, tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #> Loading required package: stats4 #>  #> Attaching package: 'S4Vectors' #> The following object is masked from 'package:utils': #>  #>     findMatches #> The following objects are masked from 'package:base': #>  #>     expand.grid, I, unname #> Loading required package: IRanges #> Loading required package: XVector #> Loading required package: GenomeInfoDb #>  #> Attaching package: 'Biostrings' #> The following object is masked from 'package:base': #>  #>     strsplit #> DNAStringSet object of length 6600: #>        width seq                                            names                #>    [1]   471 ATGAGTTCCCGGTTTGCAAGAA...GATGTGGATATGGATGCGTAA YPL071C #>    [2]   432 ATGTCTAGATCTGGTGTTGCTG...AGAGGCGCTGGTTCTCATTAA YLL050C #>    [3]  2160 ATGTCTGGAATGGGTATTGCGA...GAGAGCCTTGCTGGAATATAG YMR172W #>    [4]   663 ATGTCAGCACCTGCTCAAAACA...GAAGACGATGCTGATTTATAA YOR185C #>    [5]  2478 ATGGATAACTTCAAAATTTACA...TATCAAAATGGCAGAAAATGA YLL032C #>    ...   ... ... #> [6596]  1902 ATGCCAGACAATCTATCATTAC...CACGAAAAGACTTTCATTTAA YBR021W #> [6597]   138 ATGAGGGTTCTCCATGTTATGC...AAAAAAAAAAAAAAAAGATGA YDR320W-B #> [6598]   360 ATGTTTATTCTAGCAGAGGTTT...AATGCCGCGCTGGACGATTAA YBR232C #> [6599]  1704 ATGGCAAGCGAACAGTCCTCAC...TTCCCAAAGAGTTTTAATTGA YDL245C #> [6600]   906 ATGTTGAATAGTTCAAGAAAAT...TACTCTTTTATCTTCAATTGA YBR024W yeast_cds_qc <- check_cds(yeast_cds)  # convert a CDS to codon sequence seq_to_codons(yeast_cds_qc[['YDR320W-B']]) #>  [1] \"AGG\" \"GTT\" \"CTC\" \"CAT\" \"GTT\" \"ATG\" \"CTT\" \"TCT\" \"TTC\" \"CTA\" \"AAC\" \"TCA\" #> [13] \"CTT\" \"CTT\" \"TTC\" \"CTC\" \"CCT\" \"ATC\" \"TGC\" \"TTT\" \"TGT\" \"TTA\" \"TTA\" \"CAG\" #> [25] \"TTG\" \"AAG\" \"GCT\" \"ACT\" \"TGT\" \"GCC\" \"GTT\" \"CGT\" \"GTG\" \"AAA\" \"AAA\" \"TAC\" #> [37] \"TCG\" \"ATG\" \"AAA\" \"AAA\" \"AAA\" \"AAA\" \"AAA\" \"AGA\"  # convert a CDS to amino acid sequence Biostrings::translate(yeast_cds_qc[['YDR320W-B']]) #> 44-letter AAString object #> seq: RVLHVMLSFLNSLLFLPICFCLLQLKATCAVRVKKYSMKKKKKR  # get codon frequency yeast_cf <- count_codons(yeast_cds_qc) # get codon table for the standard genetic code ctab <- get_codon_table(gcid = '1')  # plot possible codon and anticodon pairings plot_ca_pairing(ctab) # get enc enc <- get_enc(yeast_cf) head(enc) #>  YPL071C  YLL050C  YMR172W  YOR185C  YLL032C  YBR225W  #> 53.00343 45.06356 56.01914 50.84984 53.29440 53.82957  plot_dist <- function(x, xlab = 'values'){     x <- stack(x)     ggplot(x, aes(x = values)) +         geom_histogram() +         labs(x = xlab, y = 'Number of genes') }  plot_dist(enc, 'ENC') #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. # estimate optimal codons optimal_codons <- est_optimal_codons(yeast_cds_qc, codon_table = ctab) optimal_codons #>     aa_code amino_acid codon subfam anticodon codon_b1 codon_b2 codon_b3 #>  1:       A        Ala   GCT Ala_GC       AGC        G        C        T #>  2:       A        Ala   GCC Ala_GC       GGC        G        C        C #>  3:       A        Ala   GCA Ala_GC       TGC        G        C        A #>  4:       A        Ala   GCG Ala_GC       CGC        G        C        G #>  5:       R        Arg   AGA Arg_AG       TCT        A        G        A #>  6:       R        Arg   AGG Arg_AG       CCT        A        G        G #>  7:       R        Arg   CGT Arg_CG       ACG        C        G        T #>  8:       R        Arg   CGC Arg_CG       GCG        C        G        C #>  9:       R        Arg   CGA Arg_CG       TCG        C        G        A #> 10:       R        Arg   CGG Arg_CG       CCG        C        G        G #> 11:       N        Asn   AAT Asn_AA       ATT        A        A        T #> 12:       N        Asn   AAC Asn_AA       GTT        A        A        C #> 13:       D        Asp   GAT Asp_GA       ATC        G        A        T #> 14:       D        Asp   GAC Asp_GA       GTC        G        A        C #> 15:       C        Cys   TGT Cys_TG       ACA        T        G        T #> 16:       C        Cys   TGC Cys_TG       GCA        T        G        C #> 17:       Q        Gln   CAA Gln_CA       TTG        C        A        A #> 18:       Q        Gln   CAG Gln_CA       CTG        C        A        G #> 19:       E        Glu   GAA Glu_GA       TTC        G        A        A #> 20:       E        Glu   GAG Glu_GA       CTC        G        A        G #> 21:       G        Gly   GGT Gly_GG       ACC        G        G        T #> 22:       G        Gly   GGC Gly_GG       GCC        G        G        C #> 23:       G        Gly   GGA Gly_GG       TCC        G        G        A #> 24:       G        Gly   GGG Gly_GG       CCC        G        G        G #> 25:       H        His   CAT His_CA       ATG        C        A        T #> 26:       H        His   CAC His_CA       GTG        C        A        C #> 27:       I        Ile   ATT Ile_AT       AAT        A        T        T #> 28:       I        Ile   ATC Ile_AT       GAT        A        T        C #> 29:       I        Ile   ATA Ile_AT       TAT        A        T        A #> 30:       L        Leu   CTT Leu_CT       AAG        C        T        T #> 31:       L        Leu   CTC Leu_CT       GAG        C        T        C #> 32:       L        Leu   CTA Leu_CT       TAG        C        T        A #> 33:       L        Leu   CTG Leu_CT       CAG        C        T        G #> 34:       L        Leu   TTA Leu_TT       TAA        T        T        A #> 35:       L        Leu   TTG Leu_TT       CAA        T        T        G #> 36:       K        Lys   AAA Lys_AA       TTT        A        A        A #> 37:       K        Lys   AAG Lys_AA       CTT        A        A        G #> 38:       M        Met   ATG Met_AT       CAT        A        T        G #> 39:       F        Phe   TTT Phe_TT       AAA        T        T        T #> 40:       F        Phe   TTC Phe_TT       GAA        T        T        C #> 41:       P        Pro   CCT Pro_CC       AGG        C        C        T #> 42:       P        Pro   CCC Pro_CC       GGG        C        C        C #> 43:       P        Pro   CCA Pro_CC       TGG        C        C        A #> 44:       P        Pro   CCG Pro_CC       CGG        C        C        G #> 45:       S        Ser   AGT Ser_AG       ACT        A        G        T #> 46:       S        Ser   AGC Ser_AG       GCT        A        G        C #> 47:       S        Ser   TCT Ser_TC       AGA        T        C        T #> 48:       S        Ser   TCC Ser_TC       GGA        T        C        C #> 49:       S        Ser   TCA Ser_TC       TGA        T        C        A #> 50:       S        Ser   TCG Ser_TC       CGA        T        C        G #> 51:       T        Thr   ACT Thr_AC       AGT        A        C        T #> 52:       T        Thr   ACC Thr_AC       GGT        A        C        C #> 53:       T        Thr   ACA Thr_AC       TGT        A        C        A #> 54:       T        Thr   ACG Thr_AC       CGT        A        C        G #> 55:       W        Trp   TGG Trp_TG       CCA        T        G        G #> 56:       Y        Tyr   TAT Tyr_TA       ATA        T        A        T #> 57:       Y        Tyr   TAC Tyr_TA       GTA        T        A        C #> 58:       V        Val   GTT Val_GT       AAC        G        T        T #> 59:       V        Val   GTC Val_GT       GAC        G        T        C #> 60:       V        Val   GTA Val_GT       TAC        G        T        A #> 61:       V        Val   GTG Val_GT       CAC        G        T        G #>     aa_code amino_acid codon subfam anticodon codon_b1 codon_b2 codon_b3 #>            coef          se     zvalue        pvalue        qvalue #>  1: -0.08702058 0.001295945 -67.148380  0.000000e+00  0.000000e+00 #>  2: -0.01876569 0.001410424 -13.304998  2.164990e-40  2.401170e-40 #>  3:  0.08612405 0.001651786  52.139941  0.000000e+00  0.000000e+00 #>  4:  0.13245286 0.002897501  45.712791  0.000000e+00  0.000000e+00 #>  5: -0.13023392 0.002699024 -48.252221  0.000000e+00  0.000000e+00 #>  6:  0.13023392 0.002699024  48.252221  0.000000e+00  0.000000e+00 #>  7: -0.21009663 0.004145530 -50.680276  0.000000e+00  0.000000e+00 #>  8:  0.06704651 0.004561998  14.696741  6.763720e-49  7.640498e-49 #>  9:  0.15756282 0.005211268  30.235027 8.209457e-201 1.221407e-200 #> 10:  0.17689904 0.006663392  26.547897 2.715861e-155 3.681501e-155 #> 11:  0.05752254 0.001573677  36.552951 1.600668e-292 2.871787e-292 #> 12: -0.05752254 0.001573677 -36.552951 1.600668e-292 2.871787e-292 #> 13:  0.01846525 0.001472061  12.543809  4.298281e-36  4.599915e-36 #> 14: -0.01846525 0.001472061 -12.543809  4.298281e-36  4.599915e-36 #> 15: -0.10061399 0.003916089 -25.692469 1.418849e-145 1.841485e-145 #> 16:  0.10061399 0.003916089  25.692469 1.418849e-145 1.841485e-145 #> 17: -0.11402126 0.002431540 -46.892615  0.000000e+00  0.000000e+00 #> 18:  0.11402126 0.002431540  46.892615  0.000000e+00  0.000000e+00 #> 19: -0.08495228 0.001741618 -48.777798  0.000000e+00  0.000000e+00 #> 20:  0.08495228 0.001741618  48.777798  0.000000e+00  0.000000e+00 #> 21: -0.17298185 0.001750857 -98.798410  0.000000e+00  0.000000e+00 #> 22:  0.08353350 0.002104163  39.699151  0.000000e+00  0.000000e+00 #> 23:  0.12180433 0.002217761  54.922219  0.000000e+00  0.000000e+00 #> 24:  0.12756390 0.002957835  43.127455  0.000000e+00  0.000000e+00 #> 25:  0.03712113 0.002425445  15.304872  7.094173e-53  8.164992e-53 #> 26: -0.03712113 0.002425445 -15.304872  7.094173e-53  8.164992e-53 #> 27: -0.03925015 0.001369989 -28.649964 1.604694e-180 2.224690e-180 #> 28: -0.05077761 0.001444496 -35.152474 1.065528e-270 1.666596e-270 #> 29:  0.13424317 0.002071677  64.799283  0.000000e+00  0.000000e+00 #> 30: -0.02011263 0.002293289  -8.770210  1.783334e-18  1.843786e-18 #> 31:  0.08046211 0.003663906  21.960744 6.836972e-107 8.511333e-107 #> 32: -0.05325623 0.002230109 -23.880545 4.878789e-126 6.200127e-126 #> 33:  0.04648372 0.002636924  17.628011  1.501568e-69  1.795994e-69 #> 34:  0.05220574 0.001430483  36.495197 1.321618e-291 2.239408e-291 #> 35: -0.05220574 0.001430483 -36.495197 1.321618e-291 2.239408e-291 #> 36:  0.06772648 0.001287660  52.596564  0.000000e+00  0.000000e+00 #> 37: -0.06772648 0.001287660 -52.596564  0.000000e+00  0.000000e+00 #> 38:  0.00000000 0.000000000   0.000000  0.000000e+00  0.000000e+00 #> 39:  0.06277157 0.001697785  36.972620 3.154829e-299 6.207890e-299 #> 40: -0.06277157 0.001697785 -36.972620 3.154829e-299 6.207890e-299 #> 41:  0.01730090 0.001794160   9.642895  5.268072e-22  5.540558e-22 #> 42:  0.11661003 0.003042406  38.328227  0.000000e+00  0.000000e+00 #> 43: -0.11017659 0.001789079 -61.582856  0.000000e+00  0.000000e+00 #> 44:  0.14732013 0.003697757  39.840406  0.000000e+00  0.000000e+00 #> 45: -0.02198467 0.002834011  -7.757442  8.665973e-15  8.665973e-15 #> 46:  0.02198467 0.002834011   7.757442  8.665973e-15  8.665973e-15 #> 47: -0.06420661 0.001368870 -46.904818  0.000000e+00  0.000000e+00 #> 48: -0.03011306 0.001517386 -19.845347  1.208906e-87  1.474865e-87 #> 49:  0.06087806 0.001679651  36.244471 1.214411e-287 2.002138e-287 #> 50:  0.11453925 0.002712104  42.232621  0.000000e+00  0.000000e+00 #> 51: -0.05060232 0.001373491 -36.842131 3.909036e-297 7.451601e-297 #> 52: -0.05078605 0.001495682 -33.955116 1.025107e-252 1.563288e-252 #> 53:  0.05870383 0.001651019  35.556123 6.682231e-277 1.072674e-276 #> 54:  0.11718345 0.002706591  43.295591  0.000000e+00  0.000000e+00 #> 55:  0.00000000 0.000000000   0.000000  0.000000e+00  0.000000e+00 #> 56:  0.05766467 0.001944119  29.661085 2.440435e-193 3.462013e-193 #> 57: -0.05766467 0.001944119 -29.661085 2.440435e-193 3.462013e-193 #> 58: -0.06198191 0.001319203 -46.984348  0.000000e+00  0.000000e+00 #> 59: -0.05476620 0.001444046 -37.925516  0.000000e+00  0.000000e+00 #> 60:  0.10561631 0.002090615  50.519249  0.000000e+00  0.000000e+00 #> 61:  0.09082653 0.002097084  43.310870  0.000000e+00  0.000000e+00 #>            coef          se     zvalue        pvalue        qvalue  # get fop fop <- get_fop(yeast_cds) plot_dist(fop, 'Fop') #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. # estimate RSCU of highly expressed genes yeast_heg <- head(yeast_exp[order(-yeast_exp$fpkm), ], n = 500) yeast_heg <- yeast_heg[yeast_heg$gene_id %in% rownames(yeast_cf), ] rscu_heg <- est_rscu(yeast_cf[yeast_heg$gene_id, ], codon_table = ctab)  # calculate CAI of all genes # note: CAI values are usually calculated based RSCU of highly expressed genes. cai <- get_cai(yeast_cf, rscu = rscu_heg) plot_dist(cai, xlab = 'CAI') #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. # get tRNA gene copy number from GtRNADB path_gtrnadb <- 'http://gtrnadb.ucsc.edu/genomes/eukaryota/Scere3/sacCer3-mature-tRNAs.fa' yeast_trna <- Biostrings::readRNAStringSet(path_gtrnadb) trna_gcn <- table(data.table::tstrsplit(sub(' .*', '', names(yeast_trna)), '-')[[3]]) trna_gcn <- trna_gcn[names(trna_gcn) != 'NNN'] # copy of each anticodon  # calculate tRNA weight for each codon trna_w <- est_trna_weight(trna_level = trna_gcn, codon_table = ctab)  # get tAI tai <- get_tai(yeast_cf, trna_w = trna_w) plot_dist(tai, 'tAI') #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`."},{"path":"https://mt1022.github.io/cubar/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hong Zhang. Author, maintainer.","code":""},{"path":"https://mt1022.github.io/cubar/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhang H (2023). cubar: Codon Usage Bias Analysis R. https://github.com/mt1022/cubar, https://mt1022.github.io/cubar/.","code":"@Manual{,   title = {cubar: Codon Usage Bias Analysis with R},   author = {Hong Zhang},   year = {2023},   note = {https://github.com/mt1022/cubar, https://mt1022.github.io/cubar/}, }"},{"path":[]},{"path":"https://mt1022.github.io/cubar/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Codon Usage Bias Analysis with R","text":"cubar package codon usage bias analysis R. Main features listed follows: Support NCBI custom genetic codes Calculate tRNA weights Calculate relative synonymous codon usage (RSCU) Machine learning-based inference optimal codons Visualization codon-anticodon pairing relationships Codon frequency matrix Codon Adaptation Index (CAI) Mean Codon Stabilization Coefficients (CSCg) Effective number codons (ENC) Fraction optimal codons (Fop) GC content 4-fold degenerate sites (GC4d) tRNA Adaptation Index (tAI)","code":""},{"path":"https://mt1022.github.io/cubar/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Codon Usage Bias Analysis with R","text":"Depends R (>= 4.1.0) Imports Biostrings (>= 2.60.0), IRanges (>= 2.34.0), data.table (>= 1.14.0), ggplot2 (>= 3.3.5), rlang (>= 0.4.11)","code":""},{"path":"https://mt1022.github.io/cubar/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Codon Usage Bias Analysis with R","text":"latest version cubar can installed :","code":"devtools::install_github('mt1022/cubar', dependencies = TRUE)"},{"path":"https://mt1022.github.io/cubar/index.html","id":"suggests","dir":"","previous_headings":"","what":"Suggests","title":"Codon Usage Bias Analysis with R","text":"Biostrings sequence input/output manipulation. Peptides peptide- protein-related indices.","code":""},{"path":"https://mt1022.github.io/cubar/reference/aa2codon.html","id":null,"dir":"Reference","previous_headings":"","what":"amino acids to codons — aa2codon","title":"amino acids to codons — aa2codon","text":"data.frame mapping amino acids codons","code":""},{"path":"https://mt1022.github.io/cubar/reference/aa2codon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"amino acids to codons — aa2codon","text":"","code":"aa2codon"},{"path":"https://mt1022.github.io/cubar/reference/aa2codon.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"amino acids to codons — aa2codon","text":"data.frame two columns: amino_acid, codon. amino_acid amino acid corresponding codon codon codon identity","code":""},{"path":"https://mt1022.github.io/cubar/reference/aa2codon.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"amino acids to codons — aa2codon","text":"actually standard genetic code.","code":""},{"path":"https://mt1022.github.io/cubar/reference/aa2codon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"amino acids to codons — aa2codon","text":"","code":"aa2codon #>    amino_acid codon #> 1           *   TAA #> 2           *   TAG #> 3           *   TGA #> 4         Ala   GCT #> 5         Ala   GCC #> 6         Ala   GCA #> 7         Ala   GCG #> 8         Arg   CGT #> 9         Arg   CGC #> 10        Arg   CGA #> 11        Arg   CGG #> 12        Arg   AGA #> 13        Arg   AGG #> 14        Asn   AAT #> 15        Asn   AAC #> 16        Asp   GAT #> 17        Asp   GAC #> 18        Cys   TGT #> 19        Cys   TGC #> 20        Gln   CAA #> 21        Gln   CAG #> 22        Glu   GAA #> 23        Glu   GAG #> 24        Gly   GGT #> 25        Gly   GGC #> 26        Gly   GGA #> 27        Gly   GGG #> 28        His   CAT #> 29        His   CAC #> 30        Ile   ATT #> 31        Ile   ATC #> 32        Ile   ATA #> 33        Leu   TTA #> 34        Leu   TTG #> 35        Leu   CTT #> 36        Leu   CTC #> 37        Leu   CTA #> 38        Leu   CTG #> 39        Lys   AAA #> 40        Lys   AAG #> 41        Met   ATG #> 42        Phe   TTT #> 43        Phe   TTC #> 44        Pro   CCT #> 45        Pro   CCC #> 46        Pro   CCA #> 47        Pro   CCG #> 48        Ser   TCT #> 49        Ser   TCC #> 50        Ser   TCA #> 51        Ser   TCG #> 52        Ser   AGT #> 53        Ser   AGC #> 54        Thr   ACT #> 55        Thr   ACC #> 56        Thr   ACA #> 57        Thr   ACG #> 58        Trp   TGG #> 59        Tyr   TAT #> 60        Tyr   TAC #> 61        Val   GTT #> 62        Val   GTC #> 63        Val   GTA #> 64        Val   GTG"},{"path":"https://mt1022.github.io/cubar/reference/check_cds.html","id":null,"dir":"Reference","previous_headings":"","what":"Quality control of CDS — check_cds","title":"Quality control of CDS — check_cds","text":"check_cds performs quality control CDS sequences filtering peculiar sequences optionally remove start stop codons.","code":""},{"path":"https://mt1022.github.io/cubar/reference/check_cds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quality control of CDS — check_cds","text":"","code":"check_cds(   seqs,   codon_table = get_codon_table(),   min_len = 6,   check_len = TRUE,   check_start = TRUE,   check_stop = TRUE,   check_istop = TRUE,   rm_start = TRUE,   rm_stop = TRUE,   start_codons = c(\"ATG\") )"},{"path":"https://mt1022.github.io/cubar/reference/check_cds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quality control of CDS — check_cds","text":"seqs input CDS sequences codon_table codon table matching genetic code seqs min_len minimum CDS length nt check_len check whether CDS length divisible 3 check_start check whether CDSs start codons check_stop check whether CDSs stop codons check_istop check internal stop codons rm_start whether remove start codons rm_stop whether remove stop codons start_codons vector start codons","code":""},{"path":"https://mt1022.github.io/cubar/reference/check_cds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quality control of CDS — check_cds","text":"DNAStringSet filtered (trimmed) CDS sequences","code":""},{"path":"https://mt1022.github.io/cubar/reference/check_cds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quality control of CDS — check_cds","text":"","code":"# CDS sequence QC for a sample of yeast genes s <- head(yeast_cds, 10) #> Loading required package: Biostrings #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table, #>     tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #> Loading required package: stats4 #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: XVector #> Loading required package: GenomeInfoDb #>  #> Attaching package: ‘Biostrings’ #> The following object is masked from ‘package:base’: #>  #>     strsplit print(s) #> DNAStringSet object of length 10: #>      width seq                                              names                #>  [1]   471 ATGAGTTCCCGGTTTGCAAGAAG...TGATGTGGATATGGATGCGTAA YPL071C #>  [2]   432 ATGTCTAGATCTGGTGTTGCTGT...CAGAGGCGCTGGTTCTCATTAA YLL050C #>  [3]  2160 ATGTCTGGAATGGGTATTGCGAT...AGAGAGCCTTGCTGGAATATAG YMR172W #>  [4]   663 ATGTCAGCACCTGCTCAAAACAA...TGAAGACGATGCTGATTTATAA YOR185C #>  [5]  2478 ATGGATAACTTCAAAATTTACAG...ATATCAAAATGGCAGAAAATGA YLL032C #>  [6]  2703 ATGGGCTCCAATAAGGAAGCAAA...AAAGCTGCCATATACCAAATAA YBR225W #>  [7]  1488 ATGAAAACTGATAGATTACTGAT...TCAGGCTCATTTTGCAATCTAA YEL041W #>  [8]  1305 ATGTCTCAACACGCAAGCTCATC...GGAGAACGAAATTACTATATAA YOR237W #>  [9]  1413 ATGACTATCCCTGGAAGATTTAT...CTGCTCTGGTATACATAAATAA YMR027W #> [10]   195 ATGAAGATTTTCACGCTGTATAC...TGGCACTCACACTACGCACTAG YBR182C-A check_cds(s) #> DNAStringSet object of length 10: #>      width seq                                              names                #>  [1]   465 AGTTCCCGGTTTGCAAGAAGTAA...TACTGATGTGGATATGGATGCG YPL071C #>  [2]   426 TCTAGATCTGGTGTTGCTGTTGC...CAGCAGAGGCGCTGGTTCTCAT YLL050C #>  [3]  2154 TCTGGAATGGGTATTGCGATTCT...GCAAGAGAGCCTTGCTGGAATA YMR172W #>  [4]   657 TCAGCACCTGCTCAAAACAATGC...TGATGAAGACGATGCTGATTTA YOR185C #>  [5]  2472 GATAACTTCAAAATTTACAGTAC...TAAATATCAAAATGGCAGAAAA YLL032C #>  [6]  2697 GGCTCCAATAAGGAAGCAAAAAA...GCCAAAGCTGCCATATACCAAA YBR225W #>  [7]  1482 AAAACTGATAGATTACTGATTAA...TCGTCAGGCTCATTTTGCAATC YEL041W #>  [8]  1299 TCTCAACACGCAAGCTCATCTTC...GAGGGAGAACGAAATTACTATA YOR237W #>  [9]  1407 ACTATCCCTGGAAGATTTATGAC...TTTCTGCTCTGGTATACATAAA YMR027W #> [10]   189 AAGATTTTCACGCTGTATACCAT...TAGTGGCACTCACACTACGCAC YBR182C-A"},{"path":"https://mt1022.github.io/cubar/reference/count_codons.html","id":null,"dir":"Reference","previous_headings":"","what":"Count occurrences of different codons — count_codons","title":"Count occurrences of different codons — count_codons","text":"count_codons tabulates occurrences 64 codons input CDSs","code":""},{"path":"https://mt1022.github.io/cubar/reference/count_codons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count occurrences of different codons — count_codons","text":"","code":"count_codons(seqs, ...)"},{"path":"https://mt1022.github.io/cubar/reference/count_codons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count occurrences of different codons — count_codons","text":"seqs CDS sequences, DNAStringSet. ... additional arguments passed `Biostrings::trinucleotideFrequency`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/count_codons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count occurrences of different codons — count_codons","text":"matrix codon (column) frequencies CDS (row).","code":""},{"path":"https://mt1022.github.io/cubar/reference/count_codons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count occurrences of different codons — count_codons","text":"","code":"# count codon occurrences cf_all <- count_codons(yeast_cds) dim(cf_all) #> [1] 6600   64 cf_all[1:5, 1:5] #>         AAA AAC AAG AAT ACA #> YPL071C  10   4   5  10   2 #> YLL050C   6   3   5   3   0 #> YMR172W  16  37  25  48  21 #> YOR185C   8   4  10   8   1 #> YLL032C  39  26  20  44  17 count_codons(yeast_cds[1]) #>         AAA AAC AAG AAT ACA ACC ACG ACT AGA AGC AGG AGT ATA ATC ATG ATT CAA CAC #> YPL071C  10   4   5  10   2   1   0   3   5   1   2   3   6   2   5   6   2   1 #>         CAG CAT CCA CCC CCG CCT CGA CGC CGG CGT CTA CTC CTG CTT GAA GAC GAG GAT #> YPL071C   0   4   2   2   0   0   0   1   1   1   3   0   1   1   4   5   3  15 #>         GCA GCC GCG GCT GGA GGC GGG GGT GTA GTC GTG GTT TAA TAC TAG TAT TCA TCC #> YPL071C   3   0   1   3   3   2   1   0   2   1   2   1   1   1   0   5   0   3 #>         TCG TCT TGA TGC TGG TGT TTA TTC TTG TTT #> YPL071C   1   1   0   0   5   1   3   2   2   2"},{"path":"https://mt1022.github.io/cubar/reference/create_codon_table.html","id":null,"dir":"Reference","previous_headings":"","what":"create custom codon table from a data frame — create_codon_table","title":"create custom codon table from a data frame — create_codon_table","text":"create_codon_table creates codon table data frame aa codon mapping.","code":""},{"path":"https://mt1022.github.io/cubar/reference/create_codon_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create custom codon table from a data frame — create_codon_table","text":"","code":"create_codon_table(aa2codon)"},{"path":"https://mt1022.github.io/cubar/reference/create_codon_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create custom codon table from a data frame — create_codon_table","text":"aa2codon data frame two columns: amino_acid (Ala, Arg, etc.) codon.","code":""},{"path":"https://mt1022.github.io/cubar/reference/create_codon_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create custom codon table from a data frame — create_codon_table","text":"`data.table` four columns: aa_code, amino_acid, codon, subfam.","code":""},{"path":"https://mt1022.github.io/cubar/reference/create_codon_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create custom codon table from a data frame — create_codon_table","text":"","code":"head(aa2codon) #>   amino_acid codon #> 1          *   TAA #> 2          *   TAG #> 3          *   TGA #> 4        Ala   GCT #> 5        Ala   GCC #> 6        Ala   GCA create_codon_table(aa2codon = aa2codon) #>     aa_code amino_acid codon subfam #>  1:       *          *   TAA   *_TA #>  2:       *          *   TAG   *_TA #>  3:       *          *   TGA   *_TG #>  4:       A        Ala   GCT Ala_GC #>  5:       A        Ala   GCC Ala_GC #>  6:       A        Ala   GCA Ala_GC #>  7:       A        Ala   GCG Ala_GC #>  8:       R        Arg   CGT Arg_CG #>  9:       R        Arg   CGC Arg_CG #> 10:       R        Arg   CGA Arg_CG #> 11:       R        Arg   CGG Arg_CG #> 12:       R        Arg   AGA Arg_AG #> 13:       R        Arg   AGG Arg_AG #> 14:       N        Asn   AAT Asn_AA #> 15:       N        Asn   AAC Asn_AA #> 16:       D        Asp   GAT Asp_GA #> 17:       D        Asp   GAC Asp_GA #> 18:       C        Cys   TGT Cys_TG #> 19:       C        Cys   TGC Cys_TG #> 20:       Q        Gln   CAA Gln_CA #> 21:       Q        Gln   CAG Gln_CA #> 22:       E        Glu   GAA Glu_GA #> 23:       E        Glu   GAG Glu_GA #> 24:       G        Gly   GGT Gly_GG #> 25:       G        Gly   GGC Gly_GG #> 26:       G        Gly   GGA Gly_GG #> 27:       G        Gly   GGG Gly_GG #> 28:       H        His   CAT His_CA #> 29:       H        His   CAC His_CA #> 30:       I        Ile   ATT Ile_AT #> 31:       I        Ile   ATC Ile_AT #> 32:       I        Ile   ATA Ile_AT #> 33:       L        Leu   TTA Leu_TT #> 34:       L        Leu   TTG Leu_TT #> 35:       L        Leu   CTT Leu_CT #> 36:       L        Leu   CTC Leu_CT #> 37:       L        Leu   CTA Leu_CT #> 38:       L        Leu   CTG Leu_CT #> 39:       K        Lys   AAA Lys_AA #> 40:       K        Lys   AAG Lys_AA #> 41:       M        Met   ATG Met_AT #> 42:       F        Phe   TTT Phe_TT #> 43:       F        Phe   TTC Phe_TT #> 44:       P        Pro   CCT Pro_CC #> 45:       P        Pro   CCC Pro_CC #> 46:       P        Pro   CCA Pro_CC #> 47:       P        Pro   CCG Pro_CC #> 48:       S        Ser   TCT Ser_TC #> 49:       S        Ser   TCC Ser_TC #> 50:       S        Ser   TCA Ser_TC #> 51:       S        Ser   TCG Ser_TC #> 52:       S        Ser   AGT Ser_AG #> 53:       S        Ser   AGC Ser_AG #> 54:       T        Thr   ACT Thr_AC #> 55:       T        Thr   ACC Thr_AC #> 56:       T        Thr   ACA Thr_AC #> 57:       T        Thr   ACG Thr_AC #> 58:       W        Trp   TGG Trp_TG #> 59:       Y        Tyr   TAT Tyr_TA #> 60:       Y        Tyr   TAC Tyr_TA #> 61:       V        Val   GTT Val_GT #> 62:       V        Val   GTC Val_GT #> 63:       V        Val   GTA Val_GT #> 64:       V        Val   GTG Val_GT #>     aa_code amino_acid codon subfam"},{"path":"https://mt1022.github.io/cubar/reference/est_csc.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Codon Stabilization Coefficient — est_csc","title":"Estimate Codon Stabilization Coefficient — est_csc","text":"get_csc calculate codon occurrence mRNA stability correlation coefficients (Default Pearson's).","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_csc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Codon Stabilization Coefficient — est_csc","text":"","code":"est_csc(   seqs,   half_life,   codon_table = get_codon_table(),   cor_method = \"pearson\" )"},{"path":"https://mt1022.github.io/cubar/reference/est_csc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Codon Stabilization Coefficient — est_csc","text":"seqs CDS sequences protein-coding genes. One gene. half_life data.frame mRNA half life (gene_id & half_life column names). codon_table table genetic code derived `get_codon_table` `create_codon_table`. cor_method method name passed `cor.test` used calculating correlation coefficients.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_csc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Codon Stabilization Coefficient — est_csc","text":"data.table optimal codons.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_csc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate Codon Stabilization Coefficient — est_csc","text":"Presnyak V, Alhusaini N, Chen YH, Martin S, Morris N, Kline N, Olson S, Weinberg D, Baker KE, Graveley BR, et al. 2015. Codon optimality major determinant mRNA stability. Cell 160:1111-1124.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_csc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Codon Stabilization Coefficient — est_csc","text":"","code":"# estimate yeast mRNA CSC est_csc(yeast_cds, yeast_half_life) #>     codon           csc       pvalue #>  1:   TTT -0.0787283632 8.875234e-07 #>  2:   TTC  0.0936332740 4.934393e-09 #>  3:   TTA -0.0376998334 1.873266e-02 #>  4:   TTG  0.1988622236 5.724661e-36 #>  5:   TCT  0.1417985154 6.463819e-19 #>  6:   TCC  0.1348394407 3.076104e-17 #>  7:   TCA -0.1159288994 4.144862e-13 #>  8:   TCG -0.1263538419 2.619266e-15 #>  9:   TAT -0.0881160809 3.727148e-08 #> 10:   TAC  0.0992062077 5.675264e-10 #> 11:   TGT -0.0327802019 4.096707e-02 #> 12:   TGC -0.0808426979 4.476432e-07 #> 13:   TGG -0.0222377555 1.656447e-01 #> 14:   CTT -0.1291276840 6.325694e-16 #> 15:   CTC -0.1361863222 1.479116e-17 #> 16:   CTA -0.1294744450 5.284708e-16 #> 17:   CTG -0.1643147443 6.185476e-25 #> 18:   CCT  0.0002650952 9.868160e-01 #> 19:   CCC -0.0880401578 3.829159e-08 #> 20:   CCA  0.1558224407 1.473949e-22 #> 21:   CCG -0.1804587973 8.134753e-30 #> 22:   CAT -0.0865936247 6.377939e-08 #> 23:   CAC  0.0680092776 2.193847e-05 #> 24:   CAA  0.0718391124 7.332632e-06 #> 25:   CAG -0.1305086656 3.082292e-16 #> 26:   CGT  0.0791013333 7.875633e-07 #> 27:   CGC -0.1015374063 2.215377e-10 #> 28:   CGA -0.1966457587 3.407156e-35 #> 29:   CGG -0.1272088127 1.695961e-15 #> 30:   ATT  0.0480969867 2.701542e-03 #> 31:   ATC  0.1117000075 2.857699e-12 #> 32:   ATA -0.2568927250 1.217191e-59 #> 33:   ATG -0.0644903332 5.718986e-05 #> 34:   ACT  0.1431269860 3.023536e-19 #> 35:   ACC  0.1264144565 2.540030e-15 #> 36:   ACA -0.1426175629 4.049665e-19 #> 37:   ACG -0.1552369990 2.125992e-22 #> 38:   AAT -0.1285588646 8.486818e-16 #> 39:   AAC  0.0673723086 2.618359e-05 #> 40:   AAA -0.1497286397 6.225878e-21 #> 41:   AAG  0.1022785721 1.635387e-10 #> 42:   AGT -0.1552420723 2.119267e-22 #> 43:   AGC -0.1489732334 9.797090e-21 #> 44:   AGA  0.0412850037 1.003712e-02 #> 45:   AGG -0.1932809538 4.905373e-34 #> 46:   GTT  0.1904668721 4.395850e-33 #> 47:   GTC  0.1990981824 4.728645e-36 #> 48:   GTA -0.1895276774 9.069717e-33 #> 49:   GTG -0.0955719036 2.357610e-09 #> 50:   GCT  0.2488397109 5.896098e-56 #> 51:   GCC  0.1754110472 3.075101e-28 #> 52:   GCA -0.0849723268 1.119066e-07 #> 53:   GCG -0.1019375045 1.881052e-10 #> 54:   GAT -0.0544183892 6.872410e-04 #> 55:   GAC  0.0603621379 1.658610e-04 #> 56:   GAA  0.0903827731 1.647429e-08 #> 57:   GAG -0.1193680732 8.181022e-14 #> 58:   GGT  0.2131801918 3.377969e-41 #> 59:   GGC -0.0116004256 4.696045e-01 #> 60:   GGA -0.1229495155 1.435996e-14 #> 61:   GGG -0.0934788330 5.230147e-09 #>     codon           csc       pvalue"},{"path":"https://mt1022.github.io/cubar/reference/est_optimal_codons.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate optimal codons — est_optimal_codons","title":"Estimate optimal codons — est_optimal_codons","text":"est_toptimal_codons determine optimal codon codon family binomial regression.   Usage optimal codons correlate negatively enc.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_optimal_codons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate optimal codons — est_optimal_codons","text":"","code":"est_optimal_codons(seqs, codon_table = get_codon_table())"},{"path":"https://mt1022.github.io/cubar/reference/est_optimal_codons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate optimal codons — est_optimal_codons","text":"seqs CDS sequences protein-coding genes. One gene. codon_table table genetic code derived `get_codon_table` `create_codon_table`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_optimal_codons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate optimal codons — est_optimal_codons","text":"data.table optimal codons","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_optimal_codons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate optimal codons — est_optimal_codons","text":"","code":"# perform binomial regression for optimal codon estimation codons_opt <- est_optimal_codons(yeast_cds) # select optimal codons with a fdr of 0.001 codons_opt <- codons_opt[qvalue < 0.001 & coef < 0] codons_opt #>     aa_code amino_acid codon subfam        coef          se     zvalue #>  1:       A        Ala   GCT Ala_GC -0.08586353 0.001276589 -67.260132 #>  2:       A        Ala   GCC Ala_GC -0.01660752 0.001397053 -11.887539 #>  3:       R        Arg   AGA Arg_AG -0.13131610 0.002676336 -49.065633 #>  4:       R        Arg   CGT Arg_CG -0.20942840 0.004128514 -50.727307 #>  5:       N        Asn   AAC Asn_AA -0.04243915 0.001476152 -28.749855 #>  6:       D        Asp   GAC Asp_GA -0.01548768 0.001452692 -10.661362 #>  7:       C        Cys   TGT Cys_TG -0.10173880 0.003863820 -26.331141 #>  8:       Q        Gln   CAA Gln_CA -0.11358343 0.002408535 -47.158713 #>  9:       E        Glu   GAA Glu_GA -0.08514744 0.001729299 -49.238112 #> 10:       G        Gly   GGT Gly_GG -0.16885153 0.001710938 -98.689454 #> 11:       H        His   CAC His_CA -0.03106030 0.002356312 -13.181744 #> 12:       I        Ile   ATT Ile_AT -0.04103142 0.001307079 -31.391681 #> 13:       I        Ile   ATC Ile_AT -0.04053426 0.001381237 -29.346346 #> 14:       L        Leu   CTT Leu_CT -0.02079531 0.002256764  -9.214659 #> 15:       L        Leu   CTA Leu_CT -0.05336602 0.002195796 -24.303727 #> 16:       L        Leu   TTG Leu_TT -0.03574780 0.001335922 -26.758889 #> 17:       K        Lys   AAG Lys_AA -0.05928741 0.001241310 -47.761983 #> 18:       F        Phe   TTC Phe_TT -0.05586432 0.001629600 -34.281009 #> 19:       P        Pro   CCA Pro_CC -0.10530399 0.001743792 -60.387921 #> 20:       S        Ser   AGT Ser_AG -0.02607544 0.002778368  -9.385163 #> 21:       S        Ser   TCT Ser_TC -0.06174128 0.001338631 -46.122699 #> 22:       S        Ser   TCC Ser_TC -0.02651792 0.001494564 -17.742916 #> 23:       T        Thr   ACT Thr_AC -0.04947163 0.001349172 -36.668138 #> 24:       T        Thr   ACC Thr_AC -0.04730168 0.001474519 -32.079394 #> 25:       Y        Tyr   TAC Tyr_TA -0.04275237 0.001824660 -23.430322 #> 26:       V        Val   GTT Val_GT -0.05920949 0.001290821 -45.869629 #> 27:       V        Val   GTC Val_GT -0.05086915 0.001421823 -35.777413 #>     aa_code amino_acid codon subfam        coef          se     zvalue #>            pvalue        qvalue #>  1:  0.000000e+00  0.000000e+00 #>  2:  1.373963e-32  1.523850e-32 #>  3:  0.000000e+00  0.000000e+00 #>  4:  0.000000e+00  0.000000e+00 #>  5: 9.095455e-182 1.387057e-181 #>  6:  1.543207e-26  1.651503e-26 #>  7: 8.440487e-153 1.144155e-152 #>  8:  0.000000e+00  0.000000e+00 #>  9:  0.000000e+00  0.000000e+00 #> 10:  0.000000e+00  0.000000e+00 #> 11:  1.117772e-39  1.262668e-39 #> 12: 2.627944e-216 4.452905e-216 #> 13: 2.660338e-189 4.270543e-189 #> 14:  3.122680e-20  3.174725e-20 #> 15: 1.790310e-130 2.374107e-130 #> 16: 9.730992e-158 1.413311e-157 #> 17:  0.000000e+00  0.000000e+00 #> 18: 1.505846e-257 2.870519e-257 #> 19:  0.000000e+00  0.000000e+00 #> 20:  6.281898e-21  6.494844e-21 #> 21:  0.000000e+00  0.000000e+00 #> 22:  1.955211e-70  2.338586e-70 #> 23: 2.352299e-294 4.947939e-294 #> 24: 8.546350e-226 1.489507e-225 #> 25: 2.098384e-121 2.666697e-121 #> 26:  0.000000e+00  0.000000e+00 #> 27: 2.480125e-280 5.042921e-280 #>            pvalue        qvalue"},{"path":"https://mt1022.github.io/cubar/reference/est_rscu.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate RSCU — est_rscu","title":"Estimate RSCU — est_rscu","text":"est_rscu returns RSCU value codons","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_rscu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate RSCU — est_rscu","text":"","code":"est_rscu(cf, weight = 1, pseudo_cnt = 1, codon_table = get_codon_table())"},{"path":"https://mt1022.github.io/cubar/reference/est_rscu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate RSCU — est_rscu","text":"cf matrix codon frequencies calculated `count_codons()`. weight vector length `seqs` gives different weights CDSs count codons. example, gene expression levels. pseudo_cnt pseudo count avoid dividing zero. may occur sequences available RSCU calculation. codon_table table genetic code derived `get_codon_table` `create_codon_table`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_rscu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate RSCU — est_rscu","text":"data.table codon info RSCU values","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_rscu.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate RSCU — est_rscu","text":"Sharp PM, Tuohy TM, Mosurski KR. 1986. Codon usage yeast: cluster analysis clearly differentiates highly lowly expressed genes. Nucleic Acids Res 14:5125-5143.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_rscu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate RSCU — est_rscu","text":"","code":"# compute RSCU of all yeast genes cf_all <- count_codons(yeast_cds) est_rscu(cf_all) #>     aa_code amino_acid codon subfam    cts      rscu     w_cai #>  1:       F        Phe   TTT Phe_TT  79149 0.5946835 1.0000000 #>  2:       F        Phe   TTC Phe_TT  53945 0.4053165 0.6815666 #>  3:       L        Leu   TTA Leu_TT  77584 0.4968747 0.9875765 #>  4:       L        Leu   TTG Leu_TT  78560 0.5031253 1.0000000 #>  5:       S        Ser   TCT Ser_TC  68480 0.3590299 1.0000000 #>  6:       S        Ser   TCC Ser_TC  41295 0.2165053 0.6030286 #>  7:       S        Ser   TCA Ser_TC  55198 0.2893955 0.8060484 #>  8:       S        Ser   TCG Ser_TC  25762 0.1350694 0.3762065 #>  9:       Y        Tyr   TAT Tyr_TA  55654 0.5696637 1.0000000 #> 10:       Y        Tyr   TAC Tyr_TA  42042 0.4303363 0.7554218 #> 11:       C        Cys   TGT Cys_TG  24113 0.6208388 1.0000000 #> 12:       C        Cys   TGC Cys_TG  14726 0.3791612 0.6107241 #> 13:       W        Trp   TGG Trp_TG  30566 1.0000000 1.0000000 #> 14:       L        Leu   CTT Leu_CT  36969 0.2960679 0.9384678 #> 15:       L        Leu   CTC Leu_CT  16801 0.1345559 0.4265117 #> 16:       L        Leu   CTA Leu_CT  39393 0.3154801 1.0000000 #> 17:       L        Leu   CTG Leu_CT  31703 0.2538961 0.8047926 #> 18:       P        Pro   CCT Pro_CC  38941 0.3095868 0.7628656 #> 19:       P        Pro   CCC Pro_CC  20258 0.1610580 0.3968696 #> 20:       P        Pro   CCA Pro_CC  51046 0.4058210 1.0000000 #> 21:       P        Pro   CCG Pro_CC  15538 0.1235342 0.3044057 #> 22:       H        His   CAT His_CA  40077 0.6428010 1.0000000 #> 23:       H        His   CAC His_CA  22270 0.3571990 0.5556914 #> 24:       Q        Gln   CAA Gln_CA  77278 0.6826948 1.0000000 #> 25:       Q        Gln   CAG Gln_CA  35917 0.3173052 0.4647834 #> 26:       R        Arg   CGT Arg_CG  18306 0.4462945 1.0000000 #> 27:       R        Arg   CGC Arg_CG   7918 0.1930522 0.4325668 #> 28:       R        Arg   CGA Arg_CG   9151 0.2231107 0.4999181 #> 29:       R        Arg   CGG Arg_CG   5641 0.1375427 0.3081881 #> 30:       I        Ile   ATT Ile_AT  88446 0.4621442 1.0000000 #> 31:       I        Ile   ATC Ile_AT  49094 0.2565261 0.5550782 #> 32:       I        Ile   ATA Ile_AT  53841 0.2813297 0.6087487 #> 33:       M        Met   ATG Met_AT  61057 1.0000000 1.0000000 #> 34:       T        Thr   ACT Thr_AC  58292 0.3424508 1.0000000 #> 35:       T        Thr   ACC Thr_AC  36147 0.2123567 0.6201088 #> 36:       T        Thr   ACA Thr_AC  51798 0.3043008 0.8885973 #> 37:       T        Thr   ACG Thr_AC  23982 0.1408917 0.4114216 #> 38:       N        Asn   AAT Asn_AA 105623 0.5979721 1.0000000 #> 39:       N        Asn   AAC Asn_AA  71012 0.4020279 0.6723188 #> 40:       K        Lys   AAA Lys_AA 123449 0.5820258 1.0000000 #> 41:       K        Lys   AAG Lys_AA  88653 0.4179742 0.7181369 #> 42:       S        Ser   AGT Ser_AG  42680 0.5901361 1.0000000 #> 43:       S        Ser   AGC Ser_AG  29642 0.4098639 0.6945245 #> 44:       R        Arg   AGA Arg_AG  61208 0.6859688 1.0000000 #> 45:       R        Arg   AGG Arg_AG  28020 0.3140312 0.4577922 #> 46:       V        Val   GTT Val_GT  63153 0.3851488 1.0000000 #> 47:       V        Val   GTC Val_GT  32925 0.2008014 0.5213605 #> 48:       V        Val   GTA Val_GT  35748 0.2180176 0.5660607 #> 49:       V        Val   GTG Val_GT  32143 0.1960323 0.5089781 #> 50:       A        Ala   GCT Ala_GC  58801 0.3666234 1.0000000 #> 51:       A        Ala   GCC Ala_GC  35734 0.2228035 0.6077174 #> 52:       A        Ala   GCA Ala_GC  47400 0.2955396 0.8061120 #> 53:       A        Ala   GCG Ala_GC  18449 0.1150335 0.3137648 #> 54:       D        Asp   GAT Asp_GA 109757 0.6539559 1.0000000 #> 55:       D        Asp   GAC Asp_GA  58078 0.3460441 0.5291551 #> 56:       E        Glu   GAA Glu_GA 132048 0.6987459 1.0000000 #> 57:       E        Glu   GAG Glu_GA  56930 0.3012541 0.4311354 #> 58:       G        Gly   GGT Gly_GG  65720 0.4515325 1.0000000 #> 59:       G        Gly   GGC Gly_GG  28880 0.1984253 0.4394486 #> 60:       G        Gly   GGA Gly_GG  32779 0.2252132 0.4987751 #> 61:       G        Gly   GGG Gly_GG  18168 0.1248291 0.2764565 #>     aa_code amino_acid codon subfam    cts      rscu     w_cai  # compute RSCU of highly expressed (top 500) yeast genes heg <- head(yeast_exp[order(-yeast_exp$fpkm), ], n = 500) cf_heg <- count_codons(yeast_cds[heg$gene_id]) est_rscu(cf_heg) #>     aa_code amino_acid codon subfam  cts       rscu      w_cai #>  1:       F        Phe   TTT Phe_TT 2681 0.40005967 0.66683242 #>  2:       F        Phe   TTC Phe_TT 4021 0.59994033 1.00000000 #>  3:       L        Leu   TTA Leu_TT 3178 0.32133832 0.47348823 #>  4:       L        Leu   TTG Leu_TT 6713 0.67866168 1.00000000 #>  5:       S        Ser   TCT Ser_TC 4602 0.48916047 1.00000000 #>  6:       S        Ser   TCC Ser_TC 2885 0.30669501 0.62698240 #>  7:       S        Ser   TCA Ser_TC 1380 0.14675877 0.30002172 #>  8:       S        Ser   TCG Ser_TC  539 0.05738576 0.11731479 #>  9:       Y        Tyr   TAT Tyr_TA 1856 0.36648905 0.57850467 #> 10:       Y        Tyr   TAC Tyr_TA 3209 0.63351095 1.00000000 #> 11:       C        Cys   TGT Cys_TG 1285 0.80425266 1.00000000 #> 12:       C        Cys   TGC Cys_TG  312 0.19574734 0.24339036 #> 13:       W        Trp   TGG Trp_TG 1621 1.00000000 1.00000000 #> 14:       L        Leu   CTT Leu_CT 1048 0.29309863 0.68651832 #> 15:       L        Leu   CTC Leu_CT  279 0.07823414 0.18324607 #> 16:       L        Leu   CTA Leu_CT 1527 0.42693490 1.00000000 #> 17:       L        Leu   CTG Leu_CT  721 0.20173233 0.47251309 #> 18:       P        Pro   CCT Pro_CC 1648 0.25330261 0.38955823 #> 19:       P        Pro   CCC Pro_CC  423 0.06513057 0.10016537 #> 20:       P        Pro   CCA Pro_CC 4232 0.65023041 1.00000000 #> 21:       P        Pro   CCG Pro_CC  203 0.03133641 0.04819277 #> 22:       H        His   CAT His_CA 1509 0.49185668 0.96794872 #> 23:       H        His   CAC His_CA 1559 0.50814332 1.00000000 #> 24:       Q        Gln   CAA Gln_CA 4792 0.85650465 1.00000000 #> 25:       Q        Gln   CAG Gln_CA  802 0.14349535 0.16753599 #> 26:       R        Arg   CGT Arg_CG 1409 0.86450031 1.00000000 #> 27:       R        Arg   CGC Arg_CG  142 0.08767627 0.10141844 #> 28:       R        Arg   CGA Arg_CG   38 0.02391171 0.02765957 #> 29:       R        Arg   CGG Arg_CG   38 0.02391171 0.02765957 #> 30:       I        Ile   ATT Ile_AT 4991 0.52409449 1.00000000 #> 31:       I        Ile   ATC Ile_AT 3872 0.40661417 0.77584135 #> 32:       I        Ile   ATA Ile_AT  659 0.06929134 0.13221154 #> 33:       M        Met   ATG Met_AT 3093 1.00000000 1.00000000 #> 34:       T        Thr   ACT Thr_AC 4102 0.45266990 1.00000000 #> 35:       T        Thr   ACC Thr_AC 3032 0.33462048 0.73921521 #> 36:       T        Thr   ACA Thr_AC 1425 0.15732568 0.34755057 #> 37:       T        Thr   ACG Thr_AC  501 0.05538394 0.12234950 #> 38:       N        Asn   AAT Asn_AA 2651 0.36930790 0.58555973 #> 39:       N        Asn   AAC Asn_AA 4528 0.63069210 1.00000000 #> 40:       K        Lys   AAA Lys_AA 4395 0.36551093 0.57607129 #> 41:       K        Lys   AAG Lys_AA 7630 0.63448907 1.00000000 #> 42:       S        Ser   AGT Ser_AG  987 0.57375145 1.00000000 #> 43:       S        Ser   AGC Ser_AG  733 0.42624855 0.74291498 #> 44:       R        Arg   AGA Arg_AG 4804 0.90268646 1.00000000 #> 45:       R        Arg   AGG Arg_AG  517 0.09731354 0.10780437 #> 46:       V        Val   GTT Val_GT 5528 0.49689943 1.00000000 #> 47:       V        Val   GTC Val_GT 3497 0.31437045 0.63266413 #> 48:       V        Val   GTA Val_GT  935 0.08411971 0.16928920 #> 49:       V        Val   GTG Val_GT 1163 0.10461041 0.21052632 #> 50:       A        Ala   GCT Ala_GC 7045 0.55401793 1.00000000 #> 51:       A        Ala   GCC Ala_GC 3479 0.27362793 0.49389725 #> 52:       A        Ala   GCA Ala_GC 1725 0.13571316 0.24496168 #> 53:       A        Ala   GCG Ala_GC  465 0.03664098 0.06613682 #> 54:       D        Asp   GAT Asp_GA 4820 0.54678462 1.00000000 #> 55:       D        Asp   GAC Asp_GA 3995 0.45321538 0.82887368 #> 56:       E        Glu   GAA Glu_GA 8649 0.81673119 1.00000000 #> 57:       E        Glu   GAG Glu_GA 1940 0.18326881 0.22439306 #> 58:       G        Gly   GGT Gly_GG 8092 0.76718172 1.00000000 #> 59:       G        Gly   GGC Gly_GG 1194 0.11328088 0.14765847 #> 60:       G        Gly   GGA Gly_GG  778 0.07384586 0.09625602 #> 61:       G        Gly   GGG Gly_GG  481 0.04569153 0.05955764 #>     aa_code amino_acid codon subfam  cts       rscu      w_cai"},{"path":"https://mt1022.github.io/cubar/reference/est_trna_weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate tRNA weight w — est_trna_weight","title":"Estimate tRNA weight w — est_trna_weight","text":"est_trna_weight compute tRNA weight per codon TAI calculation. weight reflects relative tRNA availability codon.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_trna_weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate tRNA weight w — est_trna_weight","text":"","code":"est_trna_weight(   trna_level,   codon_table = get_codon_table(),   s = list(WC = 0, IU = 0, IC = 0.4659, IA = 0.9075, GU = 0.7861, UG = 0.6295) )"},{"path":"https://mt1022.github.io/cubar/reference/est_trna_weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate tRNA weight w — est_trna_weight","text":"trna_level, named vector tRNA level (gene copy numbers), one value anticodon. vector names anticodons. codon_table table genetic code derived `get_codon_table` `create_codon_table`. s list non-Waston-Crick pairing panelty.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_trna_weight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate tRNA weight w — est_trna_weight","text":"data.table tRNA expression information.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_trna_weight.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate tRNA weight w — est_trna_weight","text":"dos Reis M, Savva R, Wernisch L. 2004. Solving riddle codon usage preferences: test translational selection. Nucleic Acids Res 32:5036-5044.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_trna_weight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate tRNA weight w — est_trna_weight","text":"","code":"# estimate codon tRNA weight for yeasts est_trna_weight(yeast_trna_gcn) #>     aa_code amino_acid codon subfam anticodon ac_level codon_b1 codon_b2 #>  1:       F        Phe   TTT Phe_TT       AAA        0        T        T #>  2:       F        Phe   TTC Phe_TT       GAA       10        T        T #>  3:       L        Leu   TTA Leu_TT       TAA        7        T        T #>  4:       L        Leu   TTG Leu_TT       CAA       10        T        T #>  5:       S        Ser   TCT Ser_TC       AGA       11        T        C #>  6:       S        Ser   TCC Ser_TC       GGA        0        T        C #>  7:       S        Ser   TCA Ser_TC       TGA        3        T        C #>  8:       S        Ser   TCG Ser_TC       CGA        1        T        C #>  9:       Y        Tyr   TAT Tyr_TA       ATA        0        T        A #> 10:       Y        Tyr   TAC Tyr_TA       GTA        8        T        A #> 11:       C        Cys   TGT Cys_TG       ACA        0        T        G #> 12:       C        Cys   TGC Cys_TG       GCA        4        T        G #> 13:       W        Trp   TGG Trp_TG       CCA        6        T        G #> 14:       L        Leu   CTT Leu_CT       AAG        0        C        T #> 15:       L        Leu   CTC Leu_CT       GAG        1        C        T #> 16:       L        Leu   CTA Leu_CT       TAG        3        C        T #> 17:       L        Leu   CTG Leu_CT       CAG        0        C        T #> 18:       P        Pro   CCT Pro_CC       AGG        2        C        C #> 19:       P        Pro   CCC Pro_CC       GGG        0        C        C #> 20:       P        Pro   CCA Pro_CC       TGG       10        C        C #> 21:       P        Pro   CCG Pro_CC       CGG        0        C        C #> 22:       H        His   CAT His_CA       ATG        0        C        A #> 23:       H        His   CAC His_CA       GTG        7        C        A #> 24:       Q        Gln   CAA Gln_CA       TTG        9        C        A #> 25:       Q        Gln   CAG Gln_CA       CTG        1        C        A #> 26:       R        Arg   CGT Arg_CG       ACG        6        C        G #> 27:       R        Arg   CGC Arg_CG       GCG        0        C        G #> 28:       R        Arg   CGA Arg_CG       TCG        0        C        G #> 29:       R        Arg   CGG Arg_CG       CCG        1        C        G #> 30:       I        Ile   ATT Ile_AT       AAT       13        A        T #> 31:       I        Ile   ATC Ile_AT       GAT        0        A        T #> 32:       I        Ile   ATA Ile_AT       TAT        2        A        T #> 33:       M        Met   ATG Met_AT       CAT       10        A        T #> 34:       T        Thr   ACT Thr_AC       AGT       11        A        C #> 35:       T        Thr   ACC Thr_AC       GGT        0        A        C #> 36:       T        Thr   ACA Thr_AC       TGT        4        A        C #> 37:       T        Thr   ACG Thr_AC       CGT        1        A        C #> 38:       N        Asn   AAT Asn_AA       ATT        0        A        A #> 39:       N        Asn   AAC Asn_AA       GTT       10        A        A #> 40:       K        Lys   AAA Lys_AA       TTT        7        A        A #> 41:       K        Lys   AAG Lys_AA       CTT       14        A        A #> 42:       S        Ser   AGT Ser_AG       ACT        0        A        G #> 43:       S        Ser   AGC Ser_AG       GCT        2        A        G #> 44:       R        Arg   AGA Arg_AG       TCT       11        A        G #> 45:       R        Arg   AGG Arg_AG       CCT        1        A        G #> 46:       V        Val   GTT Val_GT       AAC       14        G        T #> 47:       V        Val   GTC Val_GT       GAC        0        G        T #> 48:       V        Val   GTA Val_GT       TAC        2        G        T #> 49:       V        Val   GTG Val_GT       CAC        2        G        T #> 50:       A        Ala   GCT Ala_GC       AGC       11        G        C #> 51:       A        Ala   GCC Ala_GC       GGC        0        G        C #> 52:       A        Ala   GCA Ala_GC       TGC        5        G        C #> 53:       A        Ala   GCG Ala_GC       CGC        0        G        C #> 54:       D        Asp   GAT Asp_GA       ATC        0        G        A #> 55:       D        Asp   GAC Asp_GA       GTC       16        G        A #> 56:       E        Glu   GAA Glu_GA       TTC       14        G        A #> 57:       E        Glu   GAG Glu_GA       CTC        2        G        A #> 58:       G        Gly   GGT Gly_GG       ACC        0        G        G #> 59:       G        Gly   GGC Gly_GG       GCC       16        G        G #> 60:       G        Gly   GGA Gly_GG       TCC        3        G        G #> 61:       G        Gly   GGG Gly_GG       CCC        2        G        G #>     aa_code amino_acid codon subfam anticodon ac_level codon_b1 codon_b2 #>     codon_b3       W          w #>  1:        T  2.1390 0.12890590 #>  2:        C 10.0000 0.60264561 #>  3:        A  7.0000 0.42185193 #>  4:        G 12.5935 0.75894175 #>  5:        T 11.0000 0.66291018 #>  6:        C  5.8751 0.35406032 #>  7:        A  4.0175 0.24211288 #>  8:        G  2.1115 0.12724862 #>  9:        T      NA 0.36543776 #> 10:        C  8.0000 0.48211649 #> 11:        T      NA 0.36543776 #> 12:        C  4.0000 0.24105825 #> 13:        G  6.0000 0.36158737 #> 14:        T  0.2139 0.01289059 #> 15:        C  1.0000 0.06026456 #> 16:        A  3.0000 0.18079368 #> 17:        G  1.1115 0.06698406 #> 18:        T  2.0000 0.12052912 #> 19:        C  1.0682 0.06437460 #> 20:        A 10.1850 0.61379456 #> 21:        G  3.7050 0.22328020 #> 22:        T  1.4973 0.09023413 #> 23:        C  7.0000 0.42185193 #> 24:        A  9.0000 0.54238105 #> 25:        G  4.3345 0.26121674 #> 26:        T  6.0000 0.36158737 #> 27:        C  3.2046 0.19312381 #> 28:        A  0.5550 0.03344683 #> 29:        G  1.0000 0.06026456 #> 30:        T 13.0000 0.78343930 #> 31:        C  6.9433 0.41843493 #> 32:        A  3.2025 0.19299726 #> 33:        G 10.0000 0.60264561 #> 34:        T 11.0000 0.66291018 #> 35:        C  5.8751 0.35406032 #> 36:        A  5.0175 0.30237744 #> 37:        G  2.4820 0.14957664 #> 38:        T  2.1390 0.12890590 #> 39:        C 10.0000 0.60264561 #> 40:        A  7.0000 0.42185193 #> 41:        G 16.5935 1.00000000 #> 42:        T  0.4278 0.02578118 #> 43:        C  2.0000 0.12052912 #> 44:        A 11.0000 0.66291018 #> 45:        G  5.0755 0.30587278 #> 46:        T 14.0000 0.84370386 #> 47:        C  7.4774 0.45062223 #> 48:        A  3.2950 0.19857173 #> 49:        G  2.7410 0.16518516 #> 50:        T 11.0000 0.66291018 #> 51:        C  5.8751 0.35406032 #> 52:        A  6.0175 0.36264200 #> 53:        G  1.8525 0.11164010 #> 54:        T  3.4224 0.20624944 #> 55:        C 16.0000 0.96423298 #> 56:        A 14.0000 0.84370386 #> 57:        G  7.1870 0.43312140 #> 58:        T  3.4224 0.20624944 #> 59:        C 16.0000 0.96423298 #> 60:        A  3.0000 0.18079368 #> 61:        G  3.1115 0.18751318 #>     codon_b3       W          w"},{"path":"https://mt1022.github.io/cubar/reference/get_cai.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate CAI — get_cai","title":"Calculate CAI — get_cai","text":"get_cai calculates Codon Adaptation Index (CAI) input CDS","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate CAI — get_cai","text":"","code":"get_cai(cf, rscu)"},{"path":"https://mt1022.github.io/cubar/reference/get_cai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate CAI — get_cai","text":"cf matrix codon frequencies calculated `count_codons()`. rscu rscu table containing CAI weight codon. table generated `est_rscu` prepared manually.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate CAI — get_cai","text":"named vector CAI values","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cai.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate CAI — get_cai","text":"Sharp PM, Li WH. 1987. codon Adaptation Index--measure directional synonymous codon usage bias, potential applications. Nucleic Acids Res 15:1281-1295.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cai.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate CAI — get_cai","text":"","code":"# estimate CAI of yeast genes based on RSCU of highly expressed genes heg <- head(yeast_exp[order(-yeast_exp$fpkm), ], n = 500) cf_all <- count_codons(yeast_cds) cf_heg <- cf_all[heg$gene_id, ] rscu_heg <- est_rscu(cf_heg) cai <- get_cai(cf_all, rscu_heg) head(cai) #>   YPL071C   YLL050C   YMR172W   YOR185C   YLL032C   YBR225W  #> 0.5590442 0.8212905 0.5112301 0.6534497 0.5670395 0.5485641  hist(cai)"},{"path":"https://mt1022.github.io/cubar/reference/get_codon_table.html","id":null,"dir":"Reference","previous_headings":"","what":"get codon table by NCBI gene code ID — get_codon_table","title":"get codon table by NCBI gene code ID — get_codon_table","text":"get_codon_table creates codon table based given id genetic code NCBI.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_codon_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get codon table by NCBI gene code ID — get_codon_table","text":"","code":"get_codon_table(gcid = \"1\")"},{"path":"https://mt1022.github.io/cubar/reference/get_codon_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get codon table by NCBI gene code ID — get_codon_table","text":"gcid string genetic code id. run `show_codon_tables()` see available codon tables.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_codon_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get codon table by NCBI gene code ID — get_codon_table","text":"`data.table` four columns: aa_code, amino_acid, codon, subfam.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_codon_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get codon table by NCBI gene code ID — get_codon_table","text":"","code":"# Standard genetic code get_codon_table() #>     aa_code amino_acid codon subfam #>  1:       F        Phe   TTT Phe_TT #>  2:       F        Phe   TTC Phe_TT #>  3:       L        Leu   TTA Leu_TT #>  4:       L        Leu   TTG Leu_TT #>  5:       S        Ser   TCT Ser_TC #>  6:       S        Ser   TCC Ser_TC #>  7:       S        Ser   TCA Ser_TC #>  8:       S        Ser   TCG Ser_TC #>  9:       Y        Tyr   TAT Tyr_TA #> 10:       Y        Tyr   TAC Tyr_TA #> 11:       *          *   TAA   *_TA #> 12:       *          *   TAG   *_TA #> 13:       C        Cys   TGT Cys_TG #> 14:       C        Cys   TGC Cys_TG #> 15:       *          *   TGA   *_TG #> 16:       W        Trp   TGG Trp_TG #> 17:       L        Leu   CTT Leu_CT #> 18:       L        Leu   CTC Leu_CT #> 19:       L        Leu   CTA Leu_CT #> 20:       L        Leu   CTG Leu_CT #> 21:       P        Pro   CCT Pro_CC #> 22:       P        Pro   CCC Pro_CC #> 23:       P        Pro   CCA Pro_CC #> 24:       P        Pro   CCG Pro_CC #> 25:       H        His   CAT His_CA #> 26:       H        His   CAC His_CA #> 27:       Q        Gln   CAA Gln_CA #> 28:       Q        Gln   CAG Gln_CA #> 29:       R        Arg   CGT Arg_CG #> 30:       R        Arg   CGC Arg_CG #> 31:       R        Arg   CGA Arg_CG #> 32:       R        Arg   CGG Arg_CG #> 33:       I        Ile   ATT Ile_AT #> 34:       I        Ile   ATC Ile_AT #> 35:       I        Ile   ATA Ile_AT #> 36:       M        Met   ATG Met_AT #> 37:       T        Thr   ACT Thr_AC #> 38:       T        Thr   ACC Thr_AC #> 39:       T        Thr   ACA Thr_AC #> 40:       T        Thr   ACG Thr_AC #> 41:       N        Asn   AAT Asn_AA #> 42:       N        Asn   AAC Asn_AA #> 43:       K        Lys   AAA Lys_AA #> 44:       K        Lys   AAG Lys_AA #> 45:       S        Ser   AGT Ser_AG #> 46:       S        Ser   AGC Ser_AG #> 47:       R        Arg   AGA Arg_AG #> 48:       R        Arg   AGG Arg_AG #> 49:       V        Val   GTT Val_GT #> 50:       V        Val   GTC Val_GT #> 51:       V        Val   GTA Val_GT #> 52:       V        Val   GTG Val_GT #> 53:       A        Ala   GCT Ala_GC #> 54:       A        Ala   GCC Ala_GC #> 55:       A        Ala   GCA Ala_GC #> 56:       A        Ala   GCG Ala_GC #> 57:       D        Asp   GAT Asp_GA #> 58:       D        Asp   GAC Asp_GA #> 59:       E        Glu   GAA Glu_GA #> 60:       E        Glu   GAG Glu_GA #> 61:       G        Gly   GGT Gly_GG #> 62:       G        Gly   GGC Gly_GG #> 63:       G        Gly   GGA Gly_GG #> 64:       G        Gly   GGG Gly_GG #>     aa_code amino_acid codon subfam  # Vertebrate Mitochondrial genetic code get_codon_table(gcid = '2') #>     aa_code amino_acid codon subfam #>  1:       F        Phe   TTT Phe_TT #>  2:       F        Phe   TTC Phe_TT #>  3:       L        Leu   TTA Leu_TT #>  4:       L        Leu   TTG Leu_TT #>  5:       S        Ser   TCT Ser_TC #>  6:       S        Ser   TCC Ser_TC #>  7:       S        Ser   TCA Ser_TC #>  8:       S        Ser   TCG Ser_TC #>  9:       Y        Tyr   TAT Tyr_TA #> 10:       Y        Tyr   TAC Tyr_TA #> 11:       *          *   TAA   *_TA #> 12:       *          *   TAG   *_TA #> 13:       C        Cys   TGT Cys_TG #> 14:       C        Cys   TGC Cys_TG #> 15:       W        Trp   TGA Trp_TG #> 16:       W        Trp   TGG Trp_TG #> 17:       L        Leu   CTT Leu_CT #> 18:       L        Leu   CTC Leu_CT #> 19:       L        Leu   CTA Leu_CT #> 20:       L        Leu   CTG Leu_CT #> 21:       P        Pro   CCT Pro_CC #> 22:       P        Pro   CCC Pro_CC #> 23:       P        Pro   CCA Pro_CC #> 24:       P        Pro   CCG Pro_CC #> 25:       H        His   CAT His_CA #> 26:       H        His   CAC His_CA #> 27:       Q        Gln   CAA Gln_CA #> 28:       Q        Gln   CAG Gln_CA #> 29:       R        Arg   CGT Arg_CG #> 30:       R        Arg   CGC Arg_CG #> 31:       R        Arg   CGA Arg_CG #> 32:       R        Arg   CGG Arg_CG #> 33:       I        Ile   ATT Ile_AT #> 34:       I        Ile   ATC Ile_AT #> 35:       M        Met   ATA Met_AT #> 36:       M        Met   ATG Met_AT #> 37:       T        Thr   ACT Thr_AC #> 38:       T        Thr   ACC Thr_AC #> 39:       T        Thr   ACA Thr_AC #> 40:       T        Thr   ACG Thr_AC #> 41:       N        Asn   AAT Asn_AA #> 42:       N        Asn   AAC Asn_AA #> 43:       K        Lys   AAA Lys_AA #> 44:       K        Lys   AAG Lys_AA #> 45:       S        Ser   AGT Ser_AG #> 46:       S        Ser   AGC Ser_AG #> 47:       *          *   AGA   *_AG #> 48:       *          *   AGG   *_AG #> 49:       V        Val   GTT Val_GT #> 50:       V        Val   GTC Val_GT #> 51:       V        Val   GTA Val_GT #> 52:       V        Val   GTG Val_GT #> 53:       A        Ala   GCT Ala_GC #> 54:       A        Ala   GCC Ala_GC #> 55:       A        Ala   GCA Ala_GC #> 56:       A        Ala   GCG Ala_GC #> 57:       D        Asp   GAT Asp_GA #> 58:       D        Asp   GAC Asp_GA #> 59:       E        Glu   GAA Glu_GA #> 60:       E        Glu   GAG Glu_GA #> 61:       G        Gly   GGT Gly_GG #> 62:       G        Gly   GGC Gly_GG #> 63:       G        Gly   GGA Gly_GG #> 64:       G        Gly   GGG Gly_GG #>     aa_code amino_acid codon subfam"},{"path":"https://mt1022.github.io/cubar/reference/get_cscg.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean Codon Stabilization Coefficients — get_cscg","title":"Mean Codon Stabilization Coefficients — get_cscg","text":"get_cscg calculates Mean Codon Stabilization Coefficients CDS.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cscg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean Codon Stabilization Coefficients — get_cscg","text":"","code":"get_cscg(cf, csc)"},{"path":"https://mt1022.github.io/cubar/reference/get_cscg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean Codon Stabilization Coefficients — get_cscg","text":"cf matrix codon frequencies calculated `count_codons()`. csc table Codon Stabilization Coefficients calculated `est_csc()`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cscg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean Codon Stabilization Coefficients — get_cscg","text":"named vector cscg values.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cscg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mean Codon Stabilization Coefficients — get_cscg","text":"Presnyak V, Alhusaini N, Chen YH, Martin S, Morris N, Kline N, Olson S, Weinberg D, Baker KE, Graveley BR, et al. 2015. Codon optimality major determinant mRNA stability. Cell 160:1111-1124.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cscg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean Codon Stabilization Coefficients — get_cscg","text":"","code":"# estimate CSCg of yeast genes yeast_csc <- est_csc(yeast_cds, yeast_half_life) cf_all <- count_codons(yeast_cds) cscg <- get_cscg(cf_all, csc = yeast_csc) head(cscg) #>     YPL071C     YLL050C     YMR172W     YOR185C     YLL032C     YBR225W  #> -0.03363596  0.07754667 -0.01943528  0.02885805 -0.01350414 -0.01366274  hist(cscg)"},{"path":"https://mt1022.github.io/cubar/reference/get_enc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate ENC — get_enc","title":"Calculate ENC — get_enc","text":"get_enc computes ENC CDS","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_enc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate ENC — get_enc","text":"","code":"get_enc(cf, codon_table = get_codon_table())"},{"path":"https://mt1022.github.io/cubar/reference/get_enc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate ENC — get_enc","text":"cf matrix codon frequencies calculated `count_codons()`. codon_table codon_table table genetic code derived `get_codon_table` `create_codon_table`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_enc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate ENC — get_enc","text":"vector ENC values, sequence names used vector names","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_enc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate ENC — get_enc","text":"* Wright F. 1990. 'effective number codons' used gene. Gene 87:23-29. * Sun X, Yang Q, Xia X. 2013. improved implementation effective number codons (nc). Mol Biol Evol 30:191-196.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_enc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate ENC — get_enc","text":"","code":"# estimate ENC of yeast genes cf_all <- count_codons(yeast_cds) enc <- get_enc(cf_all) head(enc) #>  YPL071C  YLL050C  YMR172W  YOR185C  YLL032C  YBR225W  #> 53.00343 45.06356 56.01914 50.84984 53.29440 53.82957  hist(enc)"},{"path":"https://mt1022.github.io/cubar/reference/get_fop.html","id":null,"dir":"Reference","previous_headings":"","what":"Fraction of optimal codons (Fop) — get_fop","title":"Fraction of optimal codons (Fop) — get_fop","text":"get_fop calculates fraction optimal codons (Fop) CDS.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_fop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fraction of optimal codons (Fop) — get_fop","text":"","code":"get_fop(seqs, codon_table = get_codon_table())"},{"path":"https://mt1022.github.io/cubar/reference/get_fop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fraction of optimal codons (Fop) — get_fop","text":"seqs CDS sequences protein-coding genes. One gene. codon_table table genetic code derived `get_codon_table` `create_codon_table`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_fop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fraction of optimal codons (Fop) — get_fop","text":"named vector fop values.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_fop.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fraction of optimal codons (Fop) — get_fop","text":"Ikemura T. 1981. Correlation abundance Escherichia coli transfer RNAs occurrence respective codons protein genes: proposal synonymous codon choice optimal E. coli translational system. J Mol Biol 151:389-409.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_fop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fraction of optimal codons (Fop) — get_fop","text":"","code":"# estimate Fop of yeast genes fop <- get_fop(yeast_cds) head(fop) #>   YPL071C   YLL050C   YMR172W   YOR185C   YLL032C   YBR225W  #> 0.4012739 0.7569444 0.4611111 0.5791855 0.4963680 0.4716981  hist(fop)"},{"path":"https://mt1022.github.io/cubar/reference/get_gc.html","id":null,"dir":"Reference","previous_headings":"","what":"GC contents — get_gc","title":"GC contents — get_gc","text":"Calculate GC content whole sequences.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GC contents — get_gc","text":"","code":"get_gc(cf)"},{"path":"https://mt1022.github.io/cubar/reference/get_gc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GC contents — get_gc","text":"cf matrix codon frequencies calculated `count_codons()`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GC contents — get_gc","text":"named vector GC contents.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GC contents — get_gc","text":"","code":"# estimate GC content of yeast genes cf_all <- count_codons(yeast_cds) gc <- get_gc(cf_all) head(gc) #>   YPL071C   YLL050C   YMR172W   YOR185C   YLL032C   YBR225W  #> 0.3566879 0.3981481 0.4101852 0.4027149 0.3454399 0.3880873  hist(gc)"},{"path":"https://mt1022.github.io/cubar/reference/get_gc3s.html","id":null,"dir":"Reference","previous_headings":"","what":"GC contents at synonymous 3rd codon positions — get_gc3s","title":"GC contents at synonymous 3rd codon positions — get_gc3s","text":"Calculate GC content synonymous 3rd codon positions.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc3s.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GC contents at synonymous 3rd codon positions — get_gc3s","text":"","code":"get_gc3s(cf, codon_table = get_codon_table())"},{"path":"https://mt1022.github.io/cubar/reference/get_gc3s.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GC contents at synonymous 3rd codon positions — get_gc3s","text":"cf matrix codon frequencies calculated `count_codons()`. codon_table table genetic code derived `get_codon_table` `create_codon_table`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc3s.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GC contents at synonymous 3rd codon positions — get_gc3s","text":"named vector GC3s values.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc3s.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GC contents at synonymous 3rd codon positions — get_gc3s","text":"Peden JF. 2000. Analysis codon usage.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc3s.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GC contents at synonymous 3rd codon positions — get_gc3s","text":"","code":"# estimate GC3s of yeast genes cf_all <- count_codons(yeast_cds) gc3s <- get_gc3s(cf_all) head(gc3s) #>   YPL071C   YLL050C   YMR172W   YOR185C   YLL032C   YBR225W  #> 0.3082192 0.3571429 0.3902439 0.3474178 0.3204489 0.3375143  hist(gc3s)"},{"path":"https://mt1022.github.io/cubar/reference/get_gc4d.html","id":null,"dir":"Reference","previous_headings":"","what":"GC contents at 4-fold degenerate sites — get_gc4d","title":"GC contents at 4-fold degenerate sites — get_gc4d","text":"Calculate GC content synonymous position codons (using four-fold degenerate sites ).","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc4d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GC contents at 4-fold degenerate sites — get_gc4d","text":"","code":"get_gc4d(cf, codon_table = get_codon_table())"},{"path":"https://mt1022.github.io/cubar/reference/get_gc4d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GC contents at 4-fold degenerate sites — get_gc4d","text":"cf matrix codon frequencies calculated `count_codons()`. codon_table table genetic code derived `get_codon_table` `create_codon_table`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc4d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GC contents at 4-fold degenerate sites — get_gc4d","text":"named vector GC4d values.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc4d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GC contents at 4-fold degenerate sites — get_gc4d","text":"","code":"# estimate GC4d of yeast genes cf_all <- count_codons(yeast_cds) gc4d <- get_gc4d(cf_all) head(gc4d) #>   YPL071C   YLL050C   YMR172W   YOR185C   YLL032C   YBR225W  #> 0.4047619 0.3114754 0.3652482 0.3372093 0.3259259 0.3304348  hist(gc4d)"},{"path":"https://mt1022.github.io/cubar/reference/get_tai.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate TAI — get_tai","title":"Calculate TAI — get_tai","text":"get_tai calculates tRNA Adaptation Index (TAI) CDS","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_tai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate TAI — get_tai","text":"","code":"get_tai(cf, trna_w)"},{"path":"https://mt1022.github.io/cubar/reference/get_tai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate TAI — get_tai","text":"cf matrix codon frequencies calculated `count_codons()`. trna_w tRNA weight codon, can generated `est_trna_weight()`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_tai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate TAI — get_tai","text":"named vector TAI values","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_tai.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate TAI — get_tai","text":"dos Reis M, Savva R, Wernisch L. 2004. Solving riddle codon usage preferences: test translational selection. Nucleic Acids Res 32:5036-5044.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_tai.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate TAI — get_tai","text":"","code":"# calculate TAI of yeast genes based on genomic tRNA copy numbers w <- est_trna_weight(yeast_trna_gcn) cf_all <- count_codons(yeast_cds) tai <- get_tai(cf_all, w) head(tai) #>   YPL071C   YLL050C   YMR172W   YOR185C   YLL032C   YBR225W  #> 0.3181555 0.4597023 0.2924187 0.3825581 0.3314147 0.3217679  hist(tai)"},{"path":"https://mt1022.github.io/cubar/reference/plot_ca_pairing.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot codon-anticodon pairing relationship — plot_ca_pairing","title":"Plot codon-anticodon pairing relationship — plot_ca_pairing","text":"plot_ca_pairing returns RSCU value codons","code":""},{"path":"https://mt1022.github.io/cubar/reference/plot_ca_pairing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot codon-anticodon pairing relationship — plot_ca_pairing","text":"","code":"plot_ca_pairing(codon_table = get_codon_table(), plot = TRUE)"},{"path":"https://mt1022.github.io/cubar/reference/plot_ca_pairing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot codon-anticodon pairing relationship — plot_ca_pairing","text":"codon_table table genetic code derived `get_codon_table` `create_codon_table`. plot whether plot pairing relationship","code":""},{"path":"https://mt1022.github.io/cubar/reference/plot_ca_pairing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot codon-anticodon pairing relationship — plot_ca_pairing","text":"data.table codon info RSCU values","code":""},{"path":"https://mt1022.github.io/cubar/reference/plot_ca_pairing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot codon-anticodon pairing relationship — plot_ca_pairing","text":"","code":"ctab <- get_codon_table(gcid = '2') pairing <- plot_ca_pairing(ctab)  head(pairing) #>    type codon anticodon #> 1:   WC   TTG       CAA #> 2:   WC   TTA       TAA #> 3:   WC   TTC       GAA #> 4:   IU   TTT       AAA #> 5:   IC   TTC       AAA #> 6:   GU   TTT       GAA"},{"path":"https://mt1022.github.io/cubar/reference/rev_comp.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse complement — rev_comp","title":"Reverse complement — rev_comp","text":"rev_comp creates reverse complemented version input sequence","code":""},{"path":"https://mt1022.github.io/cubar/reference/rev_comp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse complement — rev_comp","text":"","code":"rev_comp(seqs)"},{"path":"https://mt1022.github.io/cubar/reference/rev_comp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse complement — rev_comp","text":"seqs input sequences, DNAStringSet named vector sequences","code":""},{"path":"https://mt1022.github.io/cubar/reference/rev_comp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse complement — rev_comp","text":"reverse complemented input sequences DNAStringSet.","code":""},{"path":"https://mt1022.github.io/cubar/reference/rev_comp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse complement — rev_comp","text":"","code":"# reverse complement of codons rev_comp(Biostrings::DNAStringSet(c('TAA', 'TAG'))) #> DNAStringSet object of length 2: #>     width seq #> [1]     3 TTA #> [2]     3 CTA"},{"path":"https://mt1022.github.io/cubar/reference/seq_to_codons.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert CDS to codons — seq_to_codons","title":"Convert CDS to codons — seq_to_codons","text":"seq_to_codons converts coding sequence vector codons","code":""},{"path":"https://mt1022.github.io/cubar/reference/seq_to_codons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert CDS to codons — seq_to_codons","text":"","code":"seq_to_codons(seq)"},{"path":"https://mt1022.github.io/cubar/reference/seq_to_codons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert CDS to codons — seq_to_codons","text":"seq DNAString, object can coerced DNAString","code":""},{"path":"https://mt1022.github.io/cubar/reference/seq_to_codons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert CDS to codons — seq_to_codons","text":"character vector codons","code":""},{"path":"https://mt1022.github.io/cubar/reference/seq_to_codons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert CDS to codons — seq_to_codons","text":"","code":"# convert a CDS sequence to a sequence of codons seq_to_codons('ATGTGGTAG') #> [1] \"ATG\" \"TGG\" \"TAG\" seq_to_codons(yeast_cds[[1]]) #>   [1] \"ATG\" \"AGT\" \"TCC\" \"CGG\" \"TTT\" \"GCA\" \"AGA\" \"AGT\" \"AAT\" \"GGC\" \"AAT\" \"CCC\" #>  [13] \"AAC\" \"CAC\" \"ATT\" \"AGG\" \"AAA\" \"AGA\" \"AAT\" \"CAT\" \"TCT\" \"CCA\" \"GAC\" \"CCA\" #>  [25] \"ATA\" \"GGA\" \"ATT\" \"GAT\" \"AAT\" \"TAT\" \"AAA\" \"AGA\" \"AAA\" \"AGA\" \"CTA\" \"ATT\" #>  [37] \"ATA\" \"GAT\" \"TTA\" \"GAG\" \"AAT\" \"TTA\" \"TCC\" \"TTA\" \"AAT\" \"GAT\" \"AAA\" \"GGG\" #>  [49] \"CCC\" \"AAG\" \"AAC\" \"GGA\" \"CAT\" \"GCA\" \"GAT\" \"GAT\" \"AAC\" \"AAT\" \"CTT\" \"ATT\" #>  [61] \"CAT\" \"AAC\" \"AAT\" \"ATA\" \"GTA\" \"TTC\" \"ACA\" \"GAC\" \"GCT\" \"ATT\" \"GAT\" \"GAT\" #>  [73] \"AAG\" \"GTC\" \"CTG\" \"AAA\" \"GAG\" \"ATC\" \"ATC\" \"AAG\" \"TGT\" \"TCC\" \"ACA\" \"AGT\" #>  [85] \"AAA\" \"CGC\" \"GGC\" \"GAC\" \"AAT\" \"GAC\" \"TTG\" \"TTT\" \"TAT\" \"GAC\" \"AAA\" \"ATA\" #>  [97] \"TGG\" \"GAA\" \"CGT\" \"TTG\" \"AGA\" \"GAA\" \"AAA\" \"AGG\" \"CTA\" \"CAA\" \"ATA\" \"ATA\" #> [109] \"AAA\" \"TGG\" \"GTA\" \"GAT\" \"TAT\" \"AAG\" \"GAA\" \"ATT\" \"GCT\" \"TAT\" \"CTA\" \"AGC\" #> [121] \"TGG\" \"TGG\" \"AAG\" \"TGG\" \"TTC\" \"CAT\" \"AAT\" \"CAA\" \"ATG\" \"ACT\" \"TCG\" \"AAA\" #> [133] \"TAC\" \"ACT\" \"TAT\" \"GAT\" \"GGA\" \"GAG\" \"GCT\" \"GAT\" \"ACC\" \"GAT\" \"GTT\" \"GAA\" #> [145] \"ATG\" \"ATG\" \"GCA\" \"GTG\" \"GAT\" \"ACT\" \"GAT\" \"GTG\" \"GAT\" \"ATG\" \"GAT\" \"GCG\" #> [157] \"TAA\""},{"path":"https://mt1022.github.io/cubar/reference/show_codon_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"show available codon tables — show_codon_tables","title":"show available codon tables — show_codon_tables","text":"show_codon_tables print table available genetic code NCBI `Biostrings::GENETIC_CODE_TABLE`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/show_codon_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"show available codon tables — show_codon_tables","text":"","code":"show_codon_tables()"},{"path":"https://mt1022.github.io/cubar/reference/show_codon_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"show available codon tables — show_codon_tables","text":"","code":"# print available NCBI codon table IDs and descriptions. show_codon_tables() #>  1: Standard #>  2: Vertebrate Mitochondrial #>  3: Yeast Mitochondrial #>  4: Mold Mitochondrial; Protozoan Mitochondrial; Coelenterate Mitochondrial; Mycoplasma; Spiroplasma #>  5: Invertebrate Mitochondrial #>  6: Ciliate Nuclear; Dasycladacean Nuclear; Hexamita Nuclear #>  9: Echinoderm Mitochondrial; Flatworm Mitochondrial #> 10: Euplotid Nuclear #> 11: Bacterial, Archaeal and Plant Plastid #> 12: Alternative Yeast Nuclear #> 13: Ascidian Mitochondrial #> 14: Alternative Flatworm Mitochondrial #> 15: Blepharisma Macronuclear #> 16: Chlorophycean Mitochondrial #> 21: Trematode Mitochondrial #> 22: Scenedesmus obliquus Mitochondrial #> 23: Thraustochytrium Mitochondrial #> 24: Pterobranchia Mitochondrial #> 25: Candidate Division SR1 and Gracilibacteria #> 26: Pachysolen tannophilus Nuclear"},{"path":"https://mt1022.github.io/cubar/reference/yeast_cds.html","id":null,"dir":"Reference","previous_headings":"","what":"yeast CDS sequences — yeast_cds","title":"yeast CDS sequences — yeast_cds","text":"CDSs protein-coding genes Saccharomyces_cerevisiae","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_cds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"yeast CDS sequences — yeast_cds","text":"","code":"yeast_cds"},{"path":"https://mt1022.github.io/cubar/reference/yeast_cds.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"yeast CDS sequences — yeast_cds","text":"DNAStringSet 6600 sequences","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_cds.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"yeast CDS sequences — yeast_cds","text":"<https://ftp.ensembl.org/pub/release-107/fasta/saccharomyces_cerevisiae/cds/Saccharomyces_cerevisiae.R64-1-1.cds..fa.gz>","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_cds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"yeast CDS sequences — yeast_cds","text":"","code":"head(yeast_cds) #> DNAStringSet object of length 6: #>     width seq                                               names                #> [1]   471 ATGAGTTCCCGGTTTGCAAGAAG...CTGATGTGGATATGGATGCGTAA YPL071C #> [2]   432 ATGTCTAGATCTGGTGTTGCTGT...GCAGAGGCGCTGGTTCTCATTAA YLL050C #> [3]  2160 ATGTCTGGAATGGGTATTGCGAT...AAGAGAGCCTTGCTGGAATATAG YMR172W #> [4]   663 ATGTCAGCACCTGCTCAAAACAA...ATGAAGACGATGCTGATTTATAA YOR185C #> [5]  2478 ATGGATAACTTCAAAATTTACAG...AATATCAAAATGGCAGAAAATGA YLL032C #> [6]  2703 ATGGGCTCCAATAAGGAAGCAAA...CAAAGCTGCCATATACCAAATAA YBR225W"},{"path":"https://mt1022.github.io/cubar/reference/yeast_exp.html","id":null,"dir":"Reference","previous_headings":"","what":"yeast mRNA expression levels — yeast_exp","title":"yeast mRNA expression levels — yeast_exp","text":"Yeast mRNA FPKM determined rRNA-depleted (RiboZero) total RNA-Seq libraries. RUN1_0_WT RUN2_0_WT (0 min RNA Pol II repression) averaged used .","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_exp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"yeast mRNA expression levels — yeast_exp","text":"","code":"yeast_exp"},{"path":"https://mt1022.github.io/cubar/reference/yeast_exp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"yeast mRNA expression levels — yeast_exp","text":"data.frame 6717 rows three columns: gene_id gene ID gene_name gene name fpkm mRNA expression level Fragments per kilobase per million reads","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_exp.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"yeast mRNA expression levels — yeast_exp","text":"<https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE57385>","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_exp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"yeast mRNA expression levels — yeast_exp","text":"Presnyak V, Alhusaini N, Chen YH, Martin S, Morris N, Kline N, Olson S, Weinberg D, Baker KE, Graveley BR, et al. 2015. Codon optimality major determinant mRNA stability. Cell 160:1111-1124.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_exp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"yeast mRNA expression levels — yeast_exp","text":"","code":"head(yeast_exp) #> # A tibble: 6 × 3 #>   gene_id gene_name  fpkm #>   <chr>   <chr>     <dbl> #> 1 YAL001C TFC3       28.8 #> 2 YAL002W VPS8       19.2 #> 3 YAL003W EFB1      889.  #> 4 YAL004W YAL004w    84.1 #> 5 YAL005C SSA1      385.  #> 6 YAL007C ERP2      123."},{"path":"https://mt1022.github.io/cubar/reference/yeast_half_life.html","id":null,"dir":"Reference","previous_headings":"","what":"Half life of yeast mRNAs — yeast_half_life","title":"Half life of yeast mRNAs — yeast_half_life","text":"Half life yeast mRNAs Saccharomyces_cerevisiae calculated rRNA-deleted total RNAs Presnyak et al.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_half_life.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Half life of yeast mRNAs — yeast_half_life","text":"","code":"yeast_half_life"},{"path":"https://mt1022.github.io/cubar/reference/yeast_half_life.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Half life of yeast mRNAs — yeast_half_life","text":"data.frame 3888 rows three columns: gene_id gene id gene_name gene name half_life mRNA half life minutes","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_half_life.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Half life of yeast mRNAs — yeast_half_life","text":"<https://doi.org/10.1016/j.cell.2015.02.029>","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_half_life.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Half life of yeast mRNAs — yeast_half_life","text":"Presnyak V, Alhusaini N, Chen YH, Martin S, Morris N, Kline N, Olson S, Weinberg D, Baker KE, Graveley BR, et al. 2015. Codon optimality major determinant mRNA stability. Cell 160:1111-1124.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_half_life.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Half life of yeast mRNAs — yeast_half_life","text":"","code":"head(yeast_half_life) #>   gene_id gene_name half_life #> 1 YAL001C      TFC3 10.794423 #> 2 YAL003W      EFB1 43.425357 #> 3 YAL007C      ERP2 10.089357 #> 4 YAL008W     FUN14 27.462701 #> 5 YAL009W      SPO7  4.378069 #> 6 YAL010C     MDM10  5.827223"},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna_gcn.html","id":null,"dir":"Reference","previous_headings":"","what":"yeast tRNA gene copy numbers (GCN) — yeast_trna_gcn","title":"yeast tRNA gene copy numbers (GCN) — yeast_trna_gcn","text":"Yeast tRNA gene copy numbers (GCN) anticodon obtained gtRNAdb.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna_gcn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"yeast tRNA gene copy numbers (GCN) — yeast_trna_gcn","text":"","code":"yeast_trna_gcn"},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna_gcn.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"yeast tRNA gene copy numbers (GCN) — yeast_trna_gcn","text":"named vector length 41. Value names anticodons.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna_gcn.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"yeast tRNA gene copy numbers (GCN) — yeast_trna_gcn","text":"<http://gtrnadb.ucsc.edu/genomes/eukaryota/Scere3/sacCer3-mature-tRNAs.fa>","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna_gcn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"yeast tRNA gene copy numbers (GCN) — yeast_trna_gcn","text":"Chan PP, Lowe TM. 2016. GtRNAdb 2.0: expanded database transfer RNA genes identified complete draft genomes. Nucleic Acids Res 44:D184-189.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna_gcn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"yeast tRNA gene copy numbers (GCN) — yeast_trna_gcn","text":"","code":"yeast_trna_gcn #>  #> AAC AAT ACG AGA AGC AGG AGT CAA CAC CAT CCA CCC CCG CCT CGA CGT CTC CTG CTT GAA  #>  14  13   6  11  11   2  11  10   2  10   6   2   1   1   1   1   2   1  14  10  #> GAG GCA GCC GCT GTA GTC GTG GTT TAA TAC TAG TAT TCC TCT TGA TGC TGG TGT TTC TTG  #>   1   4  16   2   8  16   7  10   7   2   3   2   3  11   3   5  10   4  14   9  #> TTT  #>   7"}]
