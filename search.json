[{"path":"https://mt1022.github.io/cubar/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 cubar authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"sequences-and-the-genetic-code","dir":"Articles","previous_headings":"","what":"Sequences and the Genetic Code","title":"Get started","text":"First, quality control performed provided Yeast CDS sequences ensure sequence correct start codon, stop codon, internal stop codons. Additionally, length sequence verified multiple three. QC procedures can adjusted based input sequences. example, sequences contain 3’ stop codons, can skip check setting check_stop = FALSE. CDSs sequences can convert codon sequences seq_to_codons translated corresponding amino acid sequences translate Biostrings. Many codon usage metrics depend codon frequencies, can calculated easily function count_codons. resulting matrix, row represents gene, column represents codon. values matrix represent frequency codon corresponding gene. interact genetic code, cubar provided helpful function convert genetic code Biostrings handy table option visualize possible codon-anticodon pairing.  Alternatively, user can create custom genetic code table providing mapping amino acids codons.","code":"# example data yeast_cds #> DNAStringSet object of length 6600: #>        width seq                                            names                #>    [1]   471 ATGAGTTCCCGGTTTGCAAGAA...GATGTGGATATGGATGCGTAA YPL071C #>    [2]   432 ATGTCTAGATCTGGTGTTGCTG...AGAGGCGCTGGTTCTCATTAA YLL050C #>    [3]  2160 ATGTCTGGAATGGGTATTGCGA...GAGAGCCTTGCTGGAATATAG YMR172W #>    [4]   663 ATGTCAGCACCTGCTCAAAACA...GAAGACGATGCTGATTTATAA YOR185C #>    [5]  2478 ATGGATAACTTCAAAATTTACA...TATCAAAATGGCAGAAAATGA YLL032C #>    ...   ... ... #> [6596]  1902 ATGCCAGACAATCTATCATTAC...CACGAAAAGACTTTCATTTAA YBR021W #> [6597]   138 ATGAGGGTTCTCCATGTTATGC...AAAAAAAAAAAAAAAAGATGA YDR320W-B #> [6598]   360 ATGTTTATTCTAGCAGAGGTTT...AATGCCGCGCTGGACGATTAA YBR232C #> [6599]  1704 ATGGCAAGCGAACAGTCCTCAC...TTCCCAAAGAGTTTTAATTGA YDL245C #> [6600]   906 ATGTTGAATAGTTCAAGAAAAT...TACTCTTTTATCTTCAATTGA YBR024W  # qc yeast_cds_qc <- check_cds(yeast_cds) yeast_cds_qc #> DNAStringSet object of length 6574: #>        width seq                                            names                #>    [1]   465 AGTTCCCGGTTTGCAAGAAGTA...ACTGATGTGGATATGGATGCG YPL071C #>    [2]   426 TCTAGATCTGGTGTTGCTGTTG...AGCAGAGGCGCTGGTTCTCAT YLL050C #>    [3]  2154 TCTGGAATGGGTATTGCGATTC...CAAGAGAGCCTTGCTGGAATA YMR172W #>    [4]   657 TCAGCACCTGCTCAAAACAATG...GATGAAGACGATGCTGATTTA YOR185C #>    [5]  2472 GATAACTTCAAAATTTACAGTA...AAATATCAAAATGGCAGAAAA YLL032C #>    ...   ... ... #> [6570]  1896 CCAGACAATCTATCATTACATT...GAACACGAAAAGACTTTCATT YBR021W #> [6571]   132 AGGGTTCTCCATGTTATGCTTT...ATGAAAAAAAAAAAAAAAAGA YDR320W-B #> [6572]   354 TTTATTCTAGCAGAGGTTTCGG...TTTAATGCCGCGCTGGACGAT YBR232C #> [6573]  1698 GCAAGCGAACAGTCCTCACCAG...AAGTTCCCAAAGAGTTTTAAT YDL245C #> [6574]   900 TTGAATAGTTCAAGAAAATATG...TGGTACTCTTTTATCTTCAAT YBR024W # convert a CDS to codon sequence seq_to_codons(yeast_cds_qc[['YDR320W-B']]) #>  [1] \"AGG\" \"GTT\" \"CTC\" \"CAT\" \"GTT\" \"ATG\" \"CTT\" \"TCT\" \"TTC\" \"CTA\" \"AAC\" \"TCA\" #> [13] \"CTT\" \"CTT\" \"TTC\" \"CTC\" \"CCT\" \"ATC\" \"TGC\" \"TTT\" \"TGT\" \"TTA\" \"TTA\" \"CAG\" #> [25] \"TTG\" \"AAG\" \"GCT\" \"ACT\" \"TGT\" \"GCC\" \"GTT\" \"CGT\" \"GTG\" \"AAA\" \"AAA\" \"TAC\" #> [37] \"TCG\" \"ATG\" \"AAA\" \"AAA\" \"AAA\" \"AAA\" \"AAA\" \"AGA\"  # convert a CDS to amino acid sequence Biostrings::translate(yeast_cds_qc[['YDR320W-B']]) #> 44-letter AAString object #> seq: RVLHVMLSFLNSLLFLPICFCLLQLKATCAVRVKKYSMKKKKKR # get codon frequency yeast_cf <- count_codons(yeast_cds_qc) yeast_cf[1:3, 1:3] #>         AAA AAC AAG #> YPL071C  10   4   5 #> YLL050C   6   3   5 #> YMR172W  16  37  25 # get codon table for the standard genetic code ctab <- get_codon_table(gcid = '1')  # plot possible codon and anticodon pairings pairing <- ca_pairs(ctab, plot = TRUE) plot_ca_pairs(ctab, pairing) # example of a custom mapping head(aa2codon) #>   amino_acid codon #> 1          *   TAA #> 2          *   TAG #> 3          *   TGA #> 4        Ala   GCT #> 5        Ala   GCC #> 6        Ala   GCA  # create a custom codon table custom_ctab <- create_codon_table(aa2codon) head(custom_ctab) #>    aa_code amino_acid  codon subfam #>     <char>     <char> <char> <char> #> 1:       *          *    TAA   *_TA #> 2:       *          *    TAG   *_TA #> 3:       *          *    TGA   *_TG #> 4:       A        Ala    GCT Ala_GC #> 5:       A        Ala    GCC Ala_GC #> 6:       A        Ala    GCA Ala_GC"},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"codon-usage-indices","dir":"Articles","previous_headings":"","what":"Codon usage indices","title":"Get started","text":"indices can calculate get_* series functions return value usually vector value names identical names sequences. demonstrate calculate various indices yeast CDS data.","code":""},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"effective-number-of-codons-enc","dir":"Articles","previous_headings":"Codon usage indices","what":"Effective Number of Codons (ENC)","title":"Get started","text":"","code":"# get enc enc <- get_enc(yeast_cf) head(enc) #>  YPL071C  YLL050C  YMR172W  YOR185C  YLL032C  YBR225W  #> 52.93616 44.57694 56.03833 50.82037 53.34254 53.85807  plot_dist <- function(x, xlab = 'values'){     x <- stack(x)     ggplot(x, aes(x = values)) +         geom_histogram(bins = 40, fill = '#88CCEE') +         labs(x = xlab, y = 'Number of genes') +         theme_classic(base_size = 12) +         theme(axis.text = element_text(color = 'black')) }  plot_dist(enc, 'ENC')"},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"fraction-of-optimal-codons-fop","dir":"Articles","previous_headings":"Codon usage indices","what":"Fraction of optimal codons (Fop)","title":"Get started","text":"cubar provides method determine optimal (“preferred”) codon codon subfamily based regression codon usage scores genes. Preferred codons likely used genes high scores. Consequently, preferred codons positive coefficients regression analysis. Users can provide vector gene scores, example, log1p-transformed gene expression levels (RPKM TPM). worthy noting order gene scores match order genes codon frequency matrix. Otherwise, results meaningless. gene scores provided, cubar use opposite ENC default (genes stronger codon usage bias larger scores). view optimal codons, can manually run est_optimal_codons function.","code":"# get fop fop <- get_fop(yeast_cf) plot_dist(fop, 'Fop') optimal_codons <- est_optimal_codons(yeast_cf, codon_table = ctab) head(optimal_codons[optimal == TRUE]) #>    aa_code amino_acid  codon subfam       coef        pvalue        qvalue #>     <char>     <char> <char> <char>      <num>         <num>         <num> #> 1:       A        Ala    GCT Ala_GC 0.08568964  0.000000e+00  0.000000e+00 #> 2:       A        Ala    GCC Ala_GC 0.01832810  3.668732e-40  4.068957e-40 #> 3:       R        Arg    AGA Arg_AG 0.12797761  0.000000e+00  0.000000e+00 #> 4:       R        Arg    CGT Arg_CG 0.20166334  0.000000e+00  0.000000e+00 #> 5:       N        Asn    AAC Asn_AA 0.05713515 8.995130e-298 1.770009e-297 #> 6:       D        Asp    GAC Asp_GA 0.01870822  4.222671e-38  4.518999e-38 #>    optimal #>     <lgcl> #> 1:    TRUE #> 2:    TRUE #> 3:    TRUE #> 4:    TRUE #> 5:    TRUE #> 6:    TRUE"},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"codon-adaptation-index-cai","dir":"Articles","previous_headings":"Codon usage indices","what":"Codon Adaptation Index (CAI)","title":"Get started","text":"","code":"# estimate RSCU of highly expressed genes yeast_exp <- as.data.table(yeast_exp) yeast_exp <- yeast_exp[gene_id %in% rownames(yeast_cf), ] yeast_heg <- head(yeast_exp[order(-fpkm), ], n = 500) rscu_heg <- est_rscu(yeast_cf[yeast_heg$gene_id, ], codon_table = ctab) head(rscu_heg) # RSCU values are shown in the column `rscu` #>    aa_code amino_acid  codon subfam   cts      prop     w_cai      rscu #>     <char>     <char> <char> <char> <num>     <num>     <num>     <num> #> 1:       F        Phe    TTT Phe_TT  2710 0.4013918 0.6705417 0.8027835 #> 2:       F        Phe    TTC Phe_TT  4042 0.5986082 1.0000000 1.1972165 #> 3:       L        Leu    TTA Leu_TT  3231 0.3234264 0.4780358 0.6468528 #> 4:       L        Leu    TTG Leu_TT  6760 0.6765736 1.0000000 1.3531472 #> 5:       S        Ser    TCT Ser_TC  4646 0.4897249 1.0000000 1.9588998 #> 6:       S        Ser    TCC Ser_TC  2892 0.3048793 0.6225522 1.2195173  # calculate CAI of all genes # note: CAI values are usually calculated based RSCU of highly expressed genes. cai <- get_cai(yeast_cf, rscu = rscu_heg) plot_dist(cai, xlab = 'CAI')"},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"trna-adaptation-index-tai","dir":"Articles","previous_headings":"Codon usage indices","what":"tRNA Adaptation Index (tAI)","title":"Get started","text":"Note cubar internal copy yeast_trna. can also download mature tRNA sequences GtRNADB website (lucky good internet connection) read R using following code:","code":"# get tRNA gene copy number from GtRNADB trna_gcn <- extract_trna_gcn(yeast_trna)  # calculate tRNA weight for each codon trna_w <- est_trna_weight(trna_level = trna_gcn, codon_table = ctab)  # get tAI tai <- get_tai(yeast_cf, trna_w = trna_w) plot_dist(tai, 'tAI') # path_gtrnadb <- 'http://gtrnadb.ucsc.edu/genomes/eukaryota/Scere3/sacCer3-mature-tRNAs.fa' # yeast_trna <- Biostrings::readRNAStringSet(path_gtrnadb)"},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"correlation-between-indices","dir":"Articles","previous_headings":"Codon usage indices","what":"Correlation between indices","title":"Get started","text":"","code":"pairs(cbind(CAI = cai, ENC = enc, Fop = fop, TAI = tai),       cex = 0.5, col = alpha('black', 0.2))"},{"path":[]},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"test-of-differential-usage","dir":"Articles","previous_headings":"Utilities","what":"Test of differential usage","title":"Get started","text":"cubar provides function test differential codon usage two sets sequences. function codon_diff calculates odds ratio p-value codon, comparing usage two sets sequences. function returns data table results global, family, subfamily tests. , compare codon usage lowly expressed genes highly expressed genes yeast. results differential usage test can visualized using bar plot odds ratios codon. Codons odds ratios greater 1 used frequently highly expressed genes, codons odds ratios less 1 used frequently lowly expressed genes.  cubar also tests differences codon usage family subfamily levels.","code":"# get lowly expressed genes yeast_leg <- head(yeast_exp[order(fpkm), ], n = 500) yeast_leg <- yeast_leg[gene_id %in% rownames(yeast_cf), ]  # differetial usage test du_test <- codon_diff(yeast_cds_qc[yeast_heg$gene_id], yeast_cds_qc[yeast_leg$gene_id]) du_test <- du_test[amino_acid != '*', ] du_test$codon <- factor(du_test$codon, levels = du_test[order(-global_or), codon])  ggplot(du_test, aes(x = codon, y = log2(global_or))) +     geom_col() +     labs(x = NULL, y = 'log2(OR)') +     theme_classic(base_size = 12) +     theme(axis.text = element_text(color = 'black'),           axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) du_test2 <- du_test[!amino_acid %in% c('Met', 'Trp'), ] du_test2$codon <- factor(du_test2$codon, levels = du_test2[order(-fam_or), codon])  ggplot(du_test2, aes(x = codon, y = log2(fam_or))) +     geom_col() +     labs(x = NULL, y = 'log2(OR)') +     facet_grid(cols = vars(amino_acid), space = 'free', scales = 'free', drop = TRUE) +     theme_light() +     theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))"},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"codon-usage-optimization","dir":"Articles","previous_headings":"Utilities","what":"Codon usage optimization","title":"Get started","text":"cubar provides function optimize codon usage heterologous expression. example optimizing codon usage yeast gene YFR025C (HIS2) based optimal codons calculated earlier.","code":"# optimize codon usage to the optimal codon of each amino acid opc_aa <- est_optimal_codons(yeast_cf, codon_table = ctab, level = 'amino_acid') seq_optimized <- codon_optimize(yeast_cds_qc[['YFR025C']], optimal_codons, level = 'amino_acid')  # CAI before and after optimization plot_dist(cai, 'CAI') +      geom_vline(xintercept = cai['YFR025C'], linetype = 'dashed', color = 'red') +  # before     geom_vline(xintercept = get_cai(count_codons(seq_optimized), rscu_heg),                linetype = 'dashed', color = 'black')  # after"},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"sliding-window-analysis","dir":"Articles","previous_headings":"Utilities","what":"Sliding-window analysis","title":"Get started","text":"cubar provides function perform sliding-window analysis codon usage bias. analysis can useful identifying regions gene exhibit distinct codon usage patterns. , demonstrate perform sliding-window analysis YLR106C, one longest yeast genes.","code":"swa <- slide_apply(yeast_cds_qc[['YHR099W']], .f = get_cai,                    step = 30, before = 20, after = 20, rscu = rscu_heg)  # plot the results slide_plot(swa, 'CAI')"},{"path":"https://mt1022.github.io/cubar/articles/cubar.html","id":"faq","dir":"Articles","previous_headings":"","what":"FAQ","title":"Get started","text":"families subfamilies mean cubar? > codon family set codons encoding amino acid. large codon family four synonymous codons, cubar break two subfamilies depending first two nucleotides codons. example, leucine encoded six codons standard genetic code. cubar break six codons two subfamilies: Leu_UU UUA UUG; Leu_CU CUU, CUC, CUA, CUG. Unless otherwise stated, codon weights indices calculated subfamily level. However, options estimate optimal codons perform codon optimization family level suit different user needs.","code":""},{"path":"https://mt1022.github.io/cubar/articles/non_standard_genetic_code.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Non-standard genetic code","text":"cubar supports codon usage bias analysis sequences utilizing non-standard genetic codes, found mitochondrial chloroplast protein-coding sequences. illustrate application, demonstrate calculation effective number codons (ENC) human mitochondrial CDS sequences.","code":"suppressPackageStartupMessages(library(Biostrings)) library(cubar)"},{"path":"https://mt1022.github.io/cubar/articles/non_standard_genetic_code.html","id":"main-analysis","dir":"Articles","previous_headings":"","what":"Main analysis","title":"Non-standard genetic code","text":"First, Load sequences get corresponding codon table. check CDS length stop codons incomplete stop codons prevalent among MT CDSs. stop codons present, now manually remove . Finally, calculate codon frequencies ENC. important note check_cds function stop codon trimming optional steps, can implement quality control procedures. However, crucial ensure input sequences suitable codon usage bias analysis. Failure may lead ambiguous misleading results problematic sequences.","code":"human_mt #> DNAStringSet object of length 13: #>      width seq                                              names                #>  [1]   681 ATGAACGAAAATCTGTTCGCTTC...CTACCTGCACGACAACACATAA MT-ATP6 #>  [2]   346 ATAAACTTCGCCTTAATTTTAAT...AAAGGATTAGACTGAACCGAAT MT-ND3 #>  [3]   956 ATACCCATGGCCAACCTCCTACT...CCAGCATTCCCCCTCAAACCTA MT-ND1 #>  [4]   207 ATGCCCCAACTAAATACTACCGT...TTCATTGCCCCCACAATCCTAG MT-ATP8 #>  [5]  1141 ATGACCCCAATACGCAAAACTAA...AACAAAATACTCAAATGGGCCT MT-CYB #>  ...   ... ... #>  [9]  1042 ATTAATCCCCTGGCCCAACCCGT...CCTTTTATACTAATAATCTTAT MT-ND2 #> [10]   525 ATGATGTATGCTTTGTTTCTGTT...TGAGATTGCTCGGGGGAATAGG MT-ND6 #> [11]  1542 ATGTTCGCCGACCGTTGACTATT...ACCCGTATACATAAAATCTAGA MT-CO1 #> [12]   684 ATGGCACATGCAGCGCAAGTAGG...AGGGCCCGTATTTACCCTATAG MT-CO2 #> [13]   784 ATGACCCACCAATCACATGCCTA...TCCATCTATTGATGAGGGTCTT MT-CO3  ctab <- get_codon_table(gcid = '2') head(ctab) #>    aa_code amino_acid  codon subfam #>     <char>     <char> <char> <char> #> 1:       F        Phe    TTT Phe_TT #> 2:       F        Phe    TTC Phe_TT #> 3:       L        Leu    TTA Leu_TT #> 4:       L        Leu    TTG Leu_TT #> 5:       S        Ser    TCT Ser_TC #> 6:       S        Ser    TCC Ser_TC human_mt_qc <- check_cds(     human_mt,     codon_table = ctab,     check_stop = FALSE,     rm_stop = FALSE,     check_len = FALSE,     start_codons = c('ATG', 'ATA', 'ATT'))  human_mt_qc #> DNAStringSet object of length 13: #>      width seq                                              names                #>  [1]   678 AACGAAAATCTGTTCGCTTCATT...CTACCTGCACGACAACACATAA MT-ATP6 #>  [2]   343 AACTTCGCCTTAATTTTAATAAT...AAAGGATTAGACTGAACCGAAT MT-ND3 #>  [3]   953 CCCATGGCCAACCTCCTACTCCT...CCAGCATTCCCCCTCAAACCTA MT-ND1 #>  [4]   204 CCCCAACTAAATACTACCGTATG...TTCATTGCCCCCACAATCCTAG MT-ATP8 #>  [5]  1138 ACCCCAATACGCAAAACTAACCC...AACAAAATACTCAAATGGGCCT MT-CYB #>  ...   ... ... #>  [9]  1039 AATCCCCTGGCCCAACCCGTCAT...CCTTTTATACTAATAATCTTAT MT-ND2 #> [10]   522 ATGTATGCTTTGTTTCTGTTGAG...TGAGATTGCTCGGGGGAATAGG MT-ND6 #> [11]  1539 TTCGCCGACCGTTGACTATTCTC...ACCCGTATACATAAAATCTAGA MT-CO1 #> [12]   681 GCACATGCAGCGCAAGTAGGTCT...AGGGCCCGTATTTACCCTATAG MT-CO2 #> [13]   781 ACCCACCAATCACATGCCTATCA...TCCATCTATTGATGAGGGTCTT MT-CO3 len_trim <- width(human_mt_qc) %% 3 len_trim <- ifelse(len_trim == 0, 3, len_trim) human_mt_qc <- subseq(human_mt_qc, start = 1, end = width(human_mt_qc) - len_trim)  human_mt_qc #> DNAStringSet object of length 13: #>      width seq                                              names                #>  [1]   675 AACGAAAATCTGTTCGCTTCATT...CCTCTACCTGCACGACAACACA MT-ATP6 #>  [2]   342 AACTTCGCCTTAATTTTAATAAT...AAAAGGATTAGACTGAACCGAA MT-ND3 #>  [3]   951 CCCATGGCCAACCTCCTACTCCT...CTCCAGCATTCCCCCTCAAACC MT-ND1 #>  [4]   201 CCCCAACTAAATACTACCGTATG...TCATTCATTGCCCCCACAATCC MT-ATP8 #>  [5]  1137 ACCCCAATACGCAAAACTAACCC...AAACAAAATACTCAAATGGGCC MT-CYB #>  ...   ... ... #>  [9]  1038 AATCCCCTGGCCCAACCCGTCAT...CCCTTTTATACTAATAATCTTA MT-ND2 #> [10]   519 ATGTATGCTTTGTTTCTGTTGAG...AATTGAGATTGCTCGGGGGAAT MT-ND6 #> [11]  1536 TTCGCCGACCGTTGACTATTCTC...AGAACCCGTATACATAAAATCT MT-CO1 #> [12]   678 GCACATGCAGCGCAAGTAGGTCT...AATAGGGCCCGTATTTACCCTA MT-CO2 #> [13]   780 ACCCACCAATCACATGCCTATCA...CTCCATCTATTGATGAGGGTCT MT-CO3 # calculate codon frequency mt_cf <- count_codons(human_mt_qc)  # calculate ENC get_enc(mt_cf, codon_table = ctab) #>  MT-ATP6   MT-ND3   MT-ND1  MT-ATP8   MT-CYB  MT-ND4L   MT-ND4   MT-ND5  #> 46.53816 44.10626 42.45881 48.39553 43.06242 45.65955 42.69293 43.50872  #>   MT-ND2   MT-ND6   MT-CO1   MT-CO2   MT-CO3  #> 44.94793 45.50197 44.84836 49.21580 47.18339"},{"path":"https://mt1022.github.io/cubar/articles/theory.html","id":"the-codon-adaptation-index-cai","dir":"Articles","previous_headings":"","what":"The Codon Adaptation Index (CAI)","title":"Theories behind cubar","text":"CAI measures similarity codon usage coding sequence (CDS) set highly expressed genes (Sharp Li 1987). quantify relative synonymous codon usage (RSCU) values among set highly expressed genes, observed frequency codon divided frequency expected assumption equal usage synonymous codons amino acid (referred codon family hereafter): RSCUij=Xij1ni∑k=1niXik=Xij1niXi \\text{RSCU}_{ij} = \\frac{X_{ij}}{\\frac{1}{n_i}\\sum_{k=1}^{n_i}{X_{ik}}}=\\frac{X_{ij}}{\\frac{1}{n_i}X_i} XijX_{ij} number occurrences jjth codon iith codon family CDSs highly expressed genes, nin_i total number alternative codons iith codon family. XiX_i number occurrence codons iith codon family. relative adaptiveness codon, ww, defined RSCU codon divided maximum RSCU codon family: wij=RSCUijmaxk=1,…,niRSCUik w_{ij}=\\frac{\\text{RSCU}_{ij}}{\\max_{k=1,\\dots,n_i}{\\text{RSCU}_{ik}}} CAI CDS calculated geometric mean relative adaptiveness codons used CDS gene: CAI=(∏k=1Lwk)1L=exp(1L∑k=1Llnwk)=exp(∑∑jXijlnwij∑∑jXij) \\text{CAI} = \\bigg(\\prod_{k=1}^L w_k\\bigg)^{\\frac{1}{L}} =\\text{exp}\\bigg(\\frac{1}{L}\\sum_{k=1}^L \\ln w_k\\bigg) = \\text{exp}\\bigg( \\frac{\\sum_i\\sum_j {X_{ij}\\ln w_{ij}}}{\\sum_i\\sum_j X_{ij}} \\bigg) LL total number codons CDS.","code":""},{"path":"https://mt1022.github.io/cubar/articles/theory.html","id":"the-effective-number-of-codons-enc","dir":"Articles","previous_headings":"","what":"The effective number of codons (ENC)","title":"Theories behind cubar","text":"ENC reflects unequal usage codons CDS gene (Wright 1990). lower ENC, larger overall bias codon usage. original implementation ENC calculates homozygosity codon usage codon family ii follows: Fiori=Xi∑j=1ni(XijXi)2−1Xi−1 F_i^{\\text{ori}} = \\frac{X_i \\sum_{j=1}^{n_i}{(\\frac{X_{ij}}{X_i})^2} - 1}{X_i - 1} XiX_i number occurrence codons iith codon family used . cubar, codon family homozygosity calculated improved implementation robust bias due small nin_i (Sun, et al. 2013): Fi=∑j=1ni(Xij+1Xi+ni)2 F_i = \\sum_{j=1}^{n_i}(\\frac{X_{ij} + 1}{X_i + n_i})^2 can calculate final ENC CDS gene follows: ENC=K1+K2∑=1K2Xi∑=1K2XiFi+K3∑=1K3Xi∑=1K3XiFi+K4∑=1K4Xi∑=1K4XiFi \\text{ENC}=K_1 + K_2\\frac{\\sum_{=1}^{K_2}{X_i}}{\\sum_{=1}^{K_2}{X_iF_i}} + K_3\\frac{\\sum_{=1}^{K_3}{X_i}}{\\sum_{=1}^{K_3}{X_iF_i}} + K_4\\frac{\\sum_{=1}^{K_4}{X_i}}{\\sum_{=1}^{K_4}{X_iF_i}} KmK_m denotes number codon families mm synonymous codons: Km=∑iδ(ni−m) K_m=\\sum_{}{\\delta(n_i-m)} noted throughout cubar, codon families four synomymous codons divided different subfamilies based first two nucleotides codons.","code":""},{"path":"https://mt1022.github.io/cubar/articles/theory.html","id":"the-fraction-of-optimal-codons-fop","dir":"Articles","previous_headings":"","what":"The fraction of optimal codons (Fop)","title":"Theories behind cubar","text":"FopF_{op} measures fraction optimal codons CDS gene given list optimal codons (Ikemura 1981). calculated follows: Fop=∑k=1LI(k-th codon optimal)L F_{\\text{op}}=\\frac{\\sum_{k=1}^L{(k\\text{-th codon optimal})}}{L} II indicator function. case optimal codons unknown, cubar automatically determines optimal codons codon family based rationale optimal codons tend used frequently genes showing stronger codon usage bias. Specifically, number occurrence codon jj among codon family ii gene kk follows Binomial distribution: Xijk∼Binomial(Xik,pk) X_{ij}^k \\sim \\text{Binomial}(X_i^k, p_k) influence codon usage bias tendency use codon jj can estimated binomial regression using following link function: lnp1−p∼β0+β1⋅ENC+ϵ \\ln{\\frac{p}{1-p}} \\sim \\beta_0 + \\beta_1 \\cdot \\text{ENC} + \\epsilon codon jj likely used genes higher overall codon bias (.e., smaller ENC), regression coefficient negative significantly differs zero. cubar implements binomial regression using glm function binomial family R. Optimal codons determined false discovery rate 0.001 multiple testing correction Benjamini-Hochberg procedure (Benjamini Hochberg 1995) default.","code":""},{"path":"https://mt1022.github.io/cubar/articles/theory.html","id":"trna-adaptation-index-tai","dir":"Articles","previous_headings":"","what":"tRNA Adaptation Index (tAI)","title":"Theories behind cubar","text":"tAI quantifies much usage codons CDS gene resembles abundance tRNAs (dos Reis, et al. 2004), often approximated tRNA gene copy numbers. determine tAI, absolute tRNA adaptiveness value WiW_i codon ii defined Wi=∑j=1ti(1−sij)Tij W_i = \\sum_{j=1}^{t_i}{(1 - s_{ij}) T_{ij}} tit_i number tRNA isoacceptors recognizing iith codon TiT_i abundance gene copy number jjth tRNA recognizing codon. sijs_{ij} panelty non-canonical codon–anticodon pairings differs among different species (Sabi Tuller 2014). Cubar uses average sijs_{ij} values eukaryotes (Sabi Tuller 2014) default. Absolute adaptiveness values normalized maximum follows: wi={WimaxjWj,Wi>0W‾|Wj≠0maxjWj,Wi=0 w_i =  \\begin{cases} \\frac{W_i}{\\max_{j}W_j},& \\text{} W_i > 0 \\\\ \\frac{\\bar W|_{W_j \\neq 0}}{\\max_j{W_j}}, & \\text{} W_i=0\\end{cases} W‾|Wj≠0\\bar W|_{W_j \\neq 0} geometric mean non-zero absolute adaptiveness values. tAI codons gene can calculated follows, similar CAI: TAI=(∏k=1Lwk)1L=exp(1L∑k=1Llnwk)=exp(∑∑jXijlnwij∑∑jXij) \\text{TAI} = \\bigg(\\prod_{k=1}^L w_k\\bigg)^{\\frac{1}{L}} =\\text{exp}\\bigg(\\frac{1}{L}\\sum_{k=1}^L \\ln w_k\\bigg) = \\text{exp}\\bigg( \\frac{\\sum_i\\sum_j {X_{ij}\\ln w_{ij}}}{\\sum_i\\sum_j X_{ij}} \\bigg)","code":""},{"path":"https://mt1022.github.io/cubar/articles/theory.html","id":"the-mean-codon-stabilization-coefficients-cscg","dir":"Articles","previous_headings":"","what":"The mean codon stabilization coefficients (CSCg)","title":"Theories behind cubar","text":"CSC codon Pearson correlation coefficient frequency codon mRNA half-lives across different genes (Presnyak, et al. 2015). CSCg average codon stabilization coefficient (CSC) codons CDS gene (Carneiro, et al. 2019): CSCg=1L∑k=1LCSCk=∑∑jXijCSCij∑∑jXij \\text{CSCg} = \\frac{1}{L}\\sum_{k=1}^L{\\text{CSC}_k}= \\frac{\\sum_i\\sum_j {X_{ij} \\text{CSC}_{ij}}}{\\sum_i{\\sum_j{X_{ij}}}}","code":""},{"path":"https://mt1022.github.io/cubar/articles/theory.html","id":"the-deviation-from-proportionality-dp","dir":"Articles","previous_headings":"","what":"The deviation from proportionality (Dp)","title":"Theories behind cubar","text":"DpD_p measures departure codon usage exogenous CDS tRNA pool host organism (Chen, et al. 2020; Chen Yang 2022). codon family ii nin_i synonymous codons (ni>1n_i>1), fraction codon jj among occurrences family exogenous CDS : Yij=XijXi Y_{ij} = \\frac{X_{ij}}{X_i} relative tRNA availability codon codon family host organism calculated : Rij=wij∑=1niwij R_{ij} = \\frac{w_{ij}}{\\sum_{=1}^{n_i}{w_{ij}}} wijw_{ij} can relative tRNA adaptiveness values calculation tAI RSCU host protein-coding genes calculation CAI. discrepancy codon proportions exogenous CDS host tRNA availability calculated Euclidean distance: Di=∑j(Yij−Rij)2 D_i = \\sqrt{\\sum_j(Y_{ij} - R_{ij})^2} Finally, DpD_p calculated geometric mean distances codon families least two synonymous codons: Dp=(∏=1KDi)1K=exp(1K∑=1KlnDi) D_p = (\\prod_{=1}^K{D_i})^{\\frac{1}{K}} = \\exp (\\frac{1}{K}\\sum_{=1}^K{\\ln D_i}) K=∑iI(ni>1)K=\\sum_{}{(n_i>1)} II indicator function.","code":""},{"path":"https://mt1022.github.io/cubar/articles/theory.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Theories behind cubar","text":"Benjamini Y, Hochberg Y. 1995. Controlling False Discovery Rate: Practical Powerful Approach Multiple Testing. Journal Royal Statistical Society: Series B (Methodological) 57:289-300. Carneiro RL, Requião RD, Rossetto S, Domitrovic T, Palhano FL. 2019. Codon stabilization coefficient metric gain insights mRNA stability codon bias relationships translation. Nucleic Acids Res 47:2216-2228. Chen F, Wu P, Deng S, Zhang H, Hou Y, Hu Z, Zhang J, Chen X, Yang JR. 2020. Dissimilation synonymous codon usage bias virus-host coevolution due translational selection. Nat Ecol Evol 4:589-600. Chen F, Yang JR. 2022. Distinct codon usage bias evolutionary patterns weakly strongly virulent respiratory viruses. iScience 25:103682. dos Reis M, Savva R, Wernisch L. 2004. Solving riddle codon usage preferences: test translational selection. Nucleic Acids Res 32:5036-5044. Ikemura T. 1981. Correlation abundance Escherichia coli transfer RNAs occurrence respective codons protein genes: proposal synonymous codon choice optimal E. coli translational system. J Mol Biol 151:389-409. Presnyak V, Alhusaini N, Chen YH, Martin S, Morris N, Kline N, Olson S, Weinberg D, Baker KE, Graveley BR, et al. 2015. Codon optimality major determinant mRNA stability. Cell 160:1111-1124. Sabi R, Tuller T. 2014. Modelling efficiency codon-tRNA interactions based codon usage bias. DNA Res 21:511-526. Sharp PM, Li WH. 1987. codon Adaptation Index–measure directional synonymous codon usage bias, potential applications. Nucleic Acids Res 15:1281-1295. Sun X, Yang Q, Xia X. 2013. improved implementation effective number codons (nc). Mol Biol Evol 30:191-196. Wright F. 1990. ‘effective number codons’ used gene. Gene 87:23-29.","code":""},{"path":"https://mt1022.github.io/cubar/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hong Zhang. Author, maintainer. Mengyue Liu. Author. Bu Zi. Author.","code":""},{"path":"https://mt1022.github.io/cubar/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhang H, Liu M, Zi B (2025). cubar: Codon Usage Bias Analysis. R package version 1.1.0.9000, https://github.com/mt1022/cubar.","code":"@Manual{,   title = {cubar: Codon Usage Bias Analysis},   author = {Hong Zhang and Mengyue Liu and Bu Zi},   year = {2025},   note = {R package version 1.1.0.9000},   url = {https://github.com/mt1022/cubar}, }"},{"path":[]},{"path":"https://mt1022.github.io/cubar/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Codon Usage Bias Analysis","text":"cubar package codon usage bias analysis R. Main features follows: Calculate codon weights based gene expression, tRNA availability, mRNA stability; Calculate relative synonymous codon usage (RSCU); Machine learning-based inference optimal codons; Visualization codon-anticodon pairing relationships; Tabulate codon frequency coding sequence; Measure codon usage similarity highly expressed genes Codon Adaptation Index (CAI); Quantify influence codon usage mRNA stability Mean Codon Stabilization Coefficients (CSCg); Measure codon usage bias nonparametric index Effective number codons (ENC); Measure fraction pre-determined optimal codons (Fop) sequence; Overall GC content (GC) 3rd synonymous positions (GC3s) 4-fold degenerate sites (GC4d); Quantify whether codon usage matches tRNA availability using tRNA Adaptation Index (tAI); Measure deviation porportionality (Dp) viral synonymous codon usage host tRNA supply; Sliding window analysis codon usage within coding sequence; Optimize codon usage based optimal codons heterologous expression; Test differential usage codons two sets sequences; Main advantages cubar follows: - Process large datasets (>10,0000 sequences) efficiently using Biostrings data.table backends; - Support genetic codes cataloged NCBI well custom ones; - Integrate data analysis bioinformatic packages R ecosystem;","code":""},{"path":"https://mt1022.github.io/cubar/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Codon Usage Bias Analysis","text":"Depends R (>= 4.1.0) Imports Biostrings (>= 2.60.0), IRanges (>= 2.34.0), data.table (>= 1.14.0), ggplot2 (>= 3.3.5), rlang (>= 0.4.11)","code":""},{"path":"https://mt1022.github.io/cubar/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Codon Usage Bias Analysis","text":"latest release cubar can installed : latest developmental version cubar can installed :","code":"install.packages(\"cubar\") devtools::install_github(\"mt1022/cubar\", dependencies = TRUE)"},{"path":"https://mt1022.github.io/cubar/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Codon Usage Bias Analysis","text":"Documentation can found within R (typing ?function_name). following tutorials available website: Get Started: brief introduction demonstrating basic usage cubar; Non-standard Genetic Code: use cubar non-standard genetic codes; Theories behind cubar: mathematical details behind core functions cubar;","code":""},{"path":"https://mt1022.github.io/cubar/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Codon Usage Bias Analysis","text":"Please use GitHub issues bug reports, questions, feature requests.","code":""},{"path":"https://mt1022.github.io/cubar/index.html","id":"suggests","dir":"","previous_headings":"","what":"Suggests","title":"Codon Usage Bias Analysis","text":"Biostrings sequence input/output manipulation; Peptides peptide- protein-related indices;","code":""},{"path":"https://mt1022.github.io/cubar/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Codon Usage Bias Analysis","text":"GitHub Copilot used suggest code snippets development package. Thanks GitHub Education teacher program providing free access GitHub Copilot.","code":""},{"path":"https://mt1022.github.io/cubar/reference/aa2codon.html","id":null,"dir":"Reference","previous_headings":"","what":"amino acids to codons — aa2codon","title":"amino acids to codons — aa2codon","text":"data.frame mapping amino acids codons","code":""},{"path":"https://mt1022.github.io/cubar/reference/aa2codon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"amino acids to codons — aa2codon","text":"","code":"aa2codon"},{"path":"https://mt1022.github.io/cubar/reference/aa2codon.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"amino acids to codons — aa2codon","text":"data.frame two columns: amino_acid, codon. amino_acid amino acid corresponding codon codon codon identity","code":""},{"path":"https://mt1022.github.io/cubar/reference/aa2codon.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"amino acids to codons — aa2codon","text":"actually standard genetic code.","code":""},{"path":"https://mt1022.github.io/cubar/reference/aa2codon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"amino acids to codons — aa2codon","text":"","code":"aa2codon #>    amino_acid codon #> 1           *   TAA #> 2           *   TAG #> 3           *   TGA #> 4         Ala   GCT #> 5         Ala   GCC #> 6         Ala   GCA #> 7         Ala   GCG #> 8         Arg   CGT #> 9         Arg   CGC #> 10        Arg   CGA #> 11        Arg   CGG #> 12        Arg   AGA #> 13        Arg   AGG #> 14        Asn   AAT #> 15        Asn   AAC #> 16        Asp   GAT #> 17        Asp   GAC #> 18        Cys   TGT #> 19        Cys   TGC #> 20        Gln   CAA #> 21        Gln   CAG #> 22        Glu   GAA #> 23        Glu   GAG #> 24        Gly   GGT #> 25        Gly   GGC #> 26        Gly   GGA #> 27        Gly   GGG #> 28        His   CAT #> 29        His   CAC #> 30        Ile   ATT #> 31        Ile   ATC #> 32        Ile   ATA #> 33        Leu   TTA #> 34        Leu   TTG #> 35        Leu   CTT #> 36        Leu   CTC #> 37        Leu   CTA #> 38        Leu   CTG #> 39        Lys   AAA #> 40        Lys   AAG #> 41        Met   ATG #> 42        Phe   TTT #> 43        Phe   TTC #> 44        Pro   CCT #> 45        Pro   CCC #> 46        Pro   CCA #> 47        Pro   CCG #> 48        Ser   TCT #> 49        Ser   TCC #> 50        Ser   TCA #> 51        Ser   TCG #> 52        Ser   AGT #> 53        Ser   AGC #> 54        Thr   ACT #> 55        Thr   ACC #> 56        Thr   ACA #> 57        Thr   ACG #> 58        Trp   TGG #> 59        Tyr   TAT #> 60        Tyr   TAC #> 61        Val   GTT #> 62        Val   GTC #> 63        Val   GTA #> 64        Val   GTG"},{"path":"https://mt1022.github.io/cubar/reference/ca_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate codon-anticodon pairing relationship — ca_pairs","title":"Generate codon-anticodon pairing relationship — ca_pairs","text":"ca_pairs show possible codon-anticodons pairings","code":""},{"path":"https://mt1022.github.io/cubar/reference/ca_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate codon-anticodon pairing relationship — ca_pairs","text":"","code":"ca_pairs(codon_table = get_codon_table(), domain = \"Eukarya\", plot = FALSE)"},{"path":"https://mt1022.github.io/cubar/reference/ca_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate codon-anticodon pairing relationship — ca_pairs","text":"codon_table table genetic code derived get_codon_table create_codon_table. domain taxonomic domain interest. \"Eukarya\" (default), \"Bacteria\" \"Archaea\". plot FALSE (default) TRUE. Whether keep columns required plotting.","code":""},{"path":"https://mt1022.github.io/cubar/reference/ca_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate codon-anticodon pairing relationship — ca_pairs","text":"data.table codon-anticodon pairing information","code":""},{"path":"https://mt1022.github.io/cubar/reference/ca_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate codon-anticodon pairing relationship — ca_pairs","text":"","code":"# get possible codon and anticodon pairings for the vertebrate mitochondrial genetic code ctab <- get_codon_table(gcid = '2') pairing <- ca_pairs(ctab) head(pairing) #>      type  codon anticodon amino_acid #>    <char> <char>    <char>     <char> #> 1:     WC    TTG       CAA        Leu #> 2:     UG    TTG       TAA        Leu #> 3:     WC    TTA       TAA        Leu #> 4:     WC    TTC       GAA        Phe #> 5:     IC    TTC       AAA        Phe #> 6:     IU    TTT       AAA        Phe"},{"path":"https://mt1022.github.io/cubar/reference/check_cds.html","id":null,"dir":"Reference","previous_headings":"","what":"Quality control of CDS — check_cds","title":"Quality control of CDS — check_cds","text":"check_cds performs quality control CDS sequences filtering peculiar sequences optionally remove start stop codons.","code":""},{"path":"https://mt1022.github.io/cubar/reference/check_cds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quality control of CDS — check_cds","text":"","code":"check_cds(   seqs,   codon_table = get_codon_table(),   min_len = 6,   check_len = TRUE,   check_start = TRUE,   check_stop = TRUE,   check_istop = TRUE,   rm_start = TRUE,   rm_stop = TRUE,   start_codons = c(\"ATG\") )"},{"path":"https://mt1022.github.io/cubar/reference/check_cds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quality control of CDS — check_cds","text":"seqs input CDS sequences codon_table codon table matching genetic code seqs min_len minimum CDS length nt check_len check whether CDS length divisible 3 check_start check whether CDSs start codons check_stop check whether CDSs stop codons check_istop check internal stop codons rm_start whether remove start codons rm_stop whether remove stop codons start_codons vector start codons","code":""},{"path":"https://mt1022.github.io/cubar/reference/check_cds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quality control of CDS — check_cds","text":"DNAStringSet filtered (trimmed) CDS sequences","code":""},{"path":"https://mt1022.github.io/cubar/reference/check_cds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quality control of CDS — check_cds","text":"","code":"# CDS sequence QC for a sample of yeast genes s <- head(yeast_cds, 10) print(s) #> DNAStringSet object of length 10: #>      width seq                                              names                #>  [1]   471 ATGAGTTCCCGGTTTGCAAGAAG...TGATGTGGATATGGATGCGTAA YPL071C #>  [2]   432 ATGTCTAGATCTGGTGTTGCTGT...CAGAGGCGCTGGTTCTCATTAA YLL050C #>  [3]  2160 ATGTCTGGAATGGGTATTGCGAT...AGAGAGCCTTGCTGGAATATAG YMR172W #>  [4]   663 ATGTCAGCACCTGCTCAAAACAA...TGAAGACGATGCTGATTTATAA YOR185C #>  [5]  2478 ATGGATAACTTCAAAATTTACAG...ATATCAAAATGGCAGAAAATGA YLL032C #>  [6]  2703 ATGGGCTCCAATAAGGAAGCAAA...AAAGCTGCCATATACCAAATAA YBR225W #>  [7]  1488 ATGAAAACTGATAGATTACTGAT...TCAGGCTCATTTTGCAATCTAA YEL041W #>  [8]  1305 ATGTCTCAACACGCAAGCTCATC...GGAGAACGAAATTACTATATAA YOR237W #>  [9]  1413 ATGACTATCCCTGGAAGATTTAT...CTGCTCTGGTATACATAAATAA YMR027W #> [10]   195 ATGAAGATTTTCACGCTGTATAC...TGGCACTCACACTACGCACTAG YBR182C-A check_cds(s) #> DNAStringSet object of length 10: #>      width seq                                              names                #>  [1]   465 AGTTCCCGGTTTGCAAGAAGTAA...TACTGATGTGGATATGGATGCG YPL071C #>  [2]   426 TCTAGATCTGGTGTTGCTGTTGC...CAGCAGAGGCGCTGGTTCTCAT YLL050C #>  [3]  2154 TCTGGAATGGGTATTGCGATTCT...GCAAGAGAGCCTTGCTGGAATA YMR172W #>  [4]   657 TCAGCACCTGCTCAAAACAATGC...TGATGAAGACGATGCTGATTTA YOR185C #>  [5]  2472 GATAACTTCAAAATTTACAGTAC...TAAATATCAAAATGGCAGAAAA YLL032C #>  [6]  2697 GGCTCCAATAAGGAAGCAAAAAA...GCCAAAGCTGCCATATACCAAA YBR225W #>  [7]  1482 AAAACTGATAGATTACTGATTAA...TCGTCAGGCTCATTTTGCAATC YEL041W #>  [8]  1299 TCTCAACACGCAAGCTCATCTTC...GAGGGAGAACGAAATTACTATA YOR237W #>  [9]  1407 ACTATCCCTGGAAGATTTATGAC...TTTCTGCTCTGGTATACATAAA YMR027W #> [10]   189 AAGATTTTCACGCTGTATACCAT...TAGTGGCACTCACACTACGCAC YBR182C-A"},{"path":"https://mt1022.github.io/cubar/reference/codon_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential codon usage analysis — codon_diff","title":"Differential codon usage analysis — codon_diff","text":"codon_diff takes two set coding sequences perform differential codon usage analysis.","code":""},{"path":"https://mt1022.github.io/cubar/reference/codon_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential codon usage analysis — codon_diff","text":"","code":"codon_diff(seqs1, seqs2, codon_table = get_codon_table())"},{"path":"https://mt1022.github.io/cubar/reference/codon_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential codon usage analysis — codon_diff","text":"seqs1 DNAStringSet, object can coerced DNAStringSet seqs2 DNAStringSet, object can coerced DNAStringSet codon_table table genetic code derived get_codon_table create_codon_table.","code":""},{"path":"https://mt1022.github.io/cubar/reference/codon_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential codon usage analysis — codon_diff","text":"data.table differential codon usage analysis. Global tests examine wthether codon   used differently relative codons. Family tests examine whether codon used   differently relative codons encode amino acid. Subfamily tests examine whether   codon used differently relative synonymous codons share first two nucleotides.   Odds ratio > 1 suggests codon used higher frequency seqs1 seqs2.","code":""},{"path":"https://mt1022.github.io/cubar/reference/codon_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential codon usage analysis — codon_diff","text":"","code":"yeast_exp_sorted <- yeast_exp[order(yeast_exp$fpkm),] seqs1 <- yeast_cds[names(yeast_cds) %in% head(yeast_exp_sorted$gene_id, 1000)] seqs2 <- yeast_cds[names(yeast_cds) %in% tail(yeast_exp_sorted$gene_id, 1000)] cudiff <- codon_diff(seqs1, seqs2)"},{"path":"https://mt1022.github.io/cubar/reference/codon_optimize.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize codons — codon_optimize","title":"Optimize codons — codon_optimize","text":"codon_optimize takes coding sequence (without stop codon) replace codon corresponding synonymous optimal codon.","code":""},{"path":"https://mt1022.github.io/cubar/reference/codon_optimize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize codons — codon_optimize","text":"","code":"codon_optimize(   seq,   optimal_codons,   codon_table = get_codon_table(),   level = \"subfam\" )"},{"path":"https://mt1022.github.io/cubar/reference/codon_optimize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize codons — codon_optimize","text":"seq DNAString, object can coerced DNAString. optimal_codons table optimze codons generated est_optimal_codons. codon_table table genetic code derived get_codon_table create_codon_table. level \"subfam\" (default) \"amino_acid\". Optimize codon usage level.","code":""},{"path":"https://mt1022.github.io/cubar/reference/codon_optimize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize codons — codon_optimize","text":"DNAString optimized coding sequence.","code":""},{"path":"https://mt1022.github.io/cubar/reference/codon_optimize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimize codons — codon_optimize","text":"","code":"cf_all <- count_codons(yeast_cds) optimal_codons <- est_optimal_codons(cf_all) seq <- 'ATGCTACGA' codon_optimize(seq, optimal_codons) #> 9-letter DNAString object #> seq: ATGCTACGT"},{"path":"https://mt1022.github.io/cubar/reference/count_codons.html","id":null,"dir":"Reference","previous_headings":"","what":"Count occurrences of different codons — count_codons","title":"Count occurrences of different codons — count_codons","text":"count_codons tabulates occurrences 64 codons input CDSs","code":""},{"path":"https://mt1022.github.io/cubar/reference/count_codons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count occurrences of different codons — count_codons","text":"","code":"count_codons(seqs, ...)"},{"path":"https://mt1022.github.io/cubar/reference/count_codons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count occurrences of different codons — count_codons","text":"seqs CDS sequences, DNAStringSet. ... additional arguments passed Biostrings::trinucleotideFrequency.","code":""},{"path":"https://mt1022.github.io/cubar/reference/count_codons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count occurrences of different codons — count_codons","text":"matrix codon (column) frequencies CDS (row).","code":""},{"path":"https://mt1022.github.io/cubar/reference/count_codons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count occurrences of different codons — count_codons","text":"","code":"# count codon occurrences cf_all <- count_codons(yeast_cds) dim(cf_all) #> [1] 6600   64 cf_all[1:5, 1:5] #>         AAA AAC AAG AAT ACA #> YPL071C  10   4   5  10   2 #> YLL050C   6   3   5   3   0 #> YMR172W  16  37  25  48  21 #> YOR185C   8   4  10   8   1 #> YLL032C  39  26  20  44  17 count_codons(yeast_cds[1]) #>         AAA AAC AAG AAT ACA ACC ACG ACT AGA AGC AGG AGT ATA ATC ATG ATT CAA CAC #> YPL071C  10   4   5  10   2   1   0   3   5   1   2   3   6   2   5   6   2   1 #>         CAG CAT CCA CCC CCG CCT CGA CGC CGG CGT CTA CTC CTG CTT GAA GAC GAG GAT #> YPL071C   0   4   2   2   0   0   0   1   1   1   3   0   1   1   4   5   3  15 #>         GCA GCC GCG GCT GGA GGC GGG GGT GTA GTC GTG GTT TAA TAC TAG TAT TCA TCC #> YPL071C   3   0   1   3   3   2   1   0   2   1   2   1   1   1   0   5   0   3 #>         TCG TCT TGA TGC TGG TGT TTA TTC TTG TTT #> YPL071C   1   1   0   0   5   1   3   2   2   2"},{"path":"https://mt1022.github.io/cubar/reference/create_codon_table.html","id":null,"dir":"Reference","previous_headings":"","what":"create custom codon table from a data frame — create_codon_table","title":"create custom codon table from a data frame — create_codon_table","text":"create_codon_table creates codon table data frame aa codon mapping.","code":""},{"path":"https://mt1022.github.io/cubar/reference/create_codon_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create custom codon table from a data frame — create_codon_table","text":"","code":"create_codon_table(aa2codon)"},{"path":"https://mt1022.github.io/cubar/reference/create_codon_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create custom codon table from a data frame — create_codon_table","text":"aa2codon data frame two columns: amino_acid (Ala, Arg, etc.) codon.","code":""},{"path":"https://mt1022.github.io/cubar/reference/create_codon_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create custom codon table from a data frame — create_codon_table","text":"data.table four columns: aa_code, amino_acid, codon, subfam.","code":""},{"path":"https://mt1022.github.io/cubar/reference/create_codon_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create custom codon table from a data frame — create_codon_table","text":"","code":"head(aa2codon) #>   amino_acid codon #> 1          *   TAA #> 2          *   TAG #> 3          *   TGA #> 4        Ala   GCT #> 5        Ala   GCC #> 6        Ala   GCA create_codon_table(aa2codon = aa2codon) #>     aa_code amino_acid  codon subfam #>      <char>     <char> <char> <char> #>  1:       *          *    TAA   *_TA #>  2:       *          *    TAG   *_TA #>  3:       *          *    TGA   *_TG #>  4:       A        Ala    GCT Ala_GC #>  5:       A        Ala    GCC Ala_GC #>  6:       A        Ala    GCA Ala_GC #>  7:       A        Ala    GCG Ala_GC #>  8:       R        Arg    CGT Arg_CG #>  9:       R        Arg    CGC Arg_CG #> 10:       R        Arg    CGA Arg_CG #> 11:       R        Arg    CGG Arg_CG #> 12:       R        Arg    AGA Arg_AG #> 13:       R        Arg    AGG Arg_AG #> 14:       N        Asn    AAT Asn_AA #> 15:       N        Asn    AAC Asn_AA #> 16:       D        Asp    GAT Asp_GA #> 17:       D        Asp    GAC Asp_GA #> 18:       C        Cys    TGT Cys_TG #> 19:       C        Cys    TGC Cys_TG #> 20:       Q        Gln    CAA Gln_CA #> 21:       Q        Gln    CAG Gln_CA #> 22:       E        Glu    GAA Glu_GA #> 23:       E        Glu    GAG Glu_GA #> 24:       G        Gly    GGT Gly_GG #> 25:       G        Gly    GGC Gly_GG #> 26:       G        Gly    GGA Gly_GG #> 27:       G        Gly    GGG Gly_GG #> 28:       H        His    CAT His_CA #> 29:       H        His    CAC His_CA #> 30:       I        Ile    ATT Ile_AT #> 31:       I        Ile    ATC Ile_AT #> 32:       I        Ile    ATA Ile_AT #> 33:       L        Leu    TTA Leu_TT #> 34:       L        Leu    TTG Leu_TT #> 35:       L        Leu    CTT Leu_CT #> 36:       L        Leu    CTC Leu_CT #> 37:       L        Leu    CTA Leu_CT #> 38:       L        Leu    CTG Leu_CT #> 39:       K        Lys    AAA Lys_AA #> 40:       K        Lys    AAG Lys_AA #> 41:       M        Met    ATG Met_AT #> 42:       F        Phe    TTT Phe_TT #> 43:       F        Phe    TTC Phe_TT #> 44:       P        Pro    CCT Pro_CC #> 45:       P        Pro    CCC Pro_CC #> 46:       P        Pro    CCA Pro_CC #> 47:       P        Pro    CCG Pro_CC #> 48:       S        Ser    TCT Ser_TC #> 49:       S        Ser    TCC Ser_TC #> 50:       S        Ser    TCA Ser_TC #> 51:       S        Ser    TCG Ser_TC #> 52:       S        Ser    AGT Ser_AG #> 53:       S        Ser    AGC Ser_AG #> 54:       T        Thr    ACT Thr_AC #> 55:       T        Thr    ACC Thr_AC #> 56:       T        Thr    ACA Thr_AC #> 57:       T        Thr    ACG Thr_AC #> 58:       W        Trp    TGG Trp_TG #> 59:       Y        Tyr    TAT Tyr_TA #> 60:       Y        Tyr    TAC Tyr_TA #> 61:       V        Val    GTT Val_GT #> 62:       V        Val    GTC Val_GT #> 63:       V        Val    GTA Val_GT #> 64:       V        Val    GTG Val_GT #>     aa_code amino_acid  codon subfam"},{"path":"https://mt1022.github.io/cubar/reference/est_aau.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Amino Acid Usage Frequencies of CDSs. — est_aau","title":"Estimate Amino Acid Usage Frequencies of CDSs. — est_aau","text":"Estimate Amino Acid Usage Frequencies CDSs.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_aau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Amino Acid Usage Frequencies of CDSs. — est_aau","text":"","code":"est_aau(cf, codon_table = get_codon_table())"},{"path":"https://mt1022.github.io/cubar/reference/est_aau.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Amino Acid Usage Frequencies of CDSs. — est_aau","text":"cf matrix codon frequencies calculated `count_codons()`. codon_table codon_table table genetic code derived get_codon_table create_codon_table.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_aau.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Amino Acid Usage Frequencies of CDSs. — est_aau","text":"data.table amino acid frequencies CDSs.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_aau.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Amino Acid Usage Frequencies of CDSs. — est_aau","text":"","code":"# estimate amino acid frequencies of yeast genes cf_all <- count_codons(yeast_cds) aau <- est_aau(cf_all) print(aau) #>     amino_acid aa_code  count proportion #>         <char>  <char>  <num>      <num> #>  1:        Phe       F 133094 0.04567496 #>  2:        Leu       L 281010 0.09643651 #>  3:        Ser       S 263057 0.09027543 #>  4:        Tyr       Y  97696 0.03352714 #>  5:        Cys       C  38839 0.01332870 #>  6:        Trp       W  30566 0.01048958 #>  7:        Pro       P 125783 0.04316598 #>  8:        His       H  62347 0.02139613 #>  9:        Gln       Q 113195 0.03884606 #> 10:        Arg       R 130244 0.04469690 #> 11:        Ile       I 191381 0.06567779 #> 12:        Met       M  61057 0.02095343 #> 13:        Thr       T 170219 0.05841545 #> 14:        Asn       N 176635 0.06061728 #> 15:        Lys       K 212102 0.07278878 #> 16:        Val       V 163969 0.05627059 #> 17:        Ala       A 160384 0.05504029 #> 18:        Asp       D 167835 0.05759731 #> 19:        Glu       E 188978 0.06485313 #> 20:        Gly       G 145547 0.04994856 #>     amino_acid aa_code  count proportion"},{"path":"https://mt1022.github.io/cubar/reference/est_csc.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Codon Stabilization Coefficient — est_csc","title":"Estimate Codon Stabilization Coefficient — est_csc","text":"get_csc calculate codon occurrence mRNA stability correlation coefficients (Default Pearson's).","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_csc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Codon Stabilization Coefficient — est_csc","text":"","code":"est_csc(   seqs,   half_life,   codon_table = get_codon_table(),   cor_method = \"pearson\" )"},{"path":"https://mt1022.github.io/cubar/reference/est_csc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Codon Stabilization Coefficient — est_csc","text":"seqs CDS sequences protein-coding genes. One gene. half_life data.frame mRNA half life (gene_id & half_life column names). codon_table table genetic code derived get_codon_table create_codon_table. cor_method method name passed `cor.test` used calculating correlation coefficients.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_csc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Codon Stabilization Coefficient — est_csc","text":"data.table optimal codons.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_csc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate Codon Stabilization Coefficient — est_csc","text":"Presnyak V, Alhusaini N, Chen YH, Martin S, Morris N, Kline N, Olson S, Weinberg D, Baker KE, Graveley BR, et al. 2015. Codon optimality major determinant mRNA stability. Cell 160:1111-1124.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_csc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Codon Stabilization Coefficient — est_csc","text":"","code":"# estimate yeast mRNA CSC est_csc(yeast_cds, yeast_half_life) #>      codon           csc       pvalue #>     <char>         <num>        <num> #>  1:    TTT -0.0787283632 8.875234e-07 #>  2:    TTC  0.0936332740 4.934393e-09 #>  3:    TTA -0.0376998334 1.873266e-02 #>  4:    TTG  0.1988622236 5.724661e-36 #>  5:    TCT  0.1417985154 6.463819e-19 #>  6:    TCC  0.1348394407 3.076104e-17 #>  7:    TCA -0.1159288994 4.144862e-13 #>  8:    TCG -0.1263538419 2.619266e-15 #>  9:    TAT -0.0881160809 3.727148e-08 #> 10:    TAC  0.0992062077 5.675264e-10 #> 11:    TGT -0.0327802019 4.096707e-02 #> 12:    TGC -0.0808426979 4.476432e-07 #> 13:    TGG -0.0222377555 1.656447e-01 #> 14:    CTT -0.1291276840 6.325694e-16 #> 15:    CTC -0.1361863222 1.479116e-17 #> 16:    CTA -0.1294744450 5.284708e-16 #> 17:    CTG -0.1643147443 6.185476e-25 #> 18:    CCT  0.0002650952 9.868160e-01 #> 19:    CCC -0.0880401578 3.829159e-08 #> 20:    CCA  0.1558224407 1.473949e-22 #> 21:    CCG -0.1804587973 8.134753e-30 #> 22:    CAT -0.0865936247 6.377939e-08 #> 23:    CAC  0.0680092776 2.193847e-05 #> 24:    CAA  0.0718391124 7.332632e-06 #> 25:    CAG -0.1305086656 3.082292e-16 #> 26:    CGT  0.0791013333 7.875633e-07 #> 27:    CGC -0.1015374063 2.215377e-10 #> 28:    CGA -0.1966457587 3.407156e-35 #> 29:    CGG -0.1272088127 1.695961e-15 #> 30:    ATT  0.0480969867 2.701542e-03 #> 31:    ATC  0.1117000075 2.857699e-12 #> 32:    ATA -0.2568927250 1.217191e-59 #> 33:    ATG -0.0644903332 5.718986e-05 #> 34:    ACT  0.1431269860 3.023536e-19 #> 35:    ACC  0.1264144565 2.540030e-15 #> 36:    ACA -0.1426175629 4.049665e-19 #> 37:    ACG -0.1552369990 2.125992e-22 #> 38:    AAT -0.1285588646 8.486818e-16 #> 39:    AAC  0.0673723086 2.618359e-05 #> 40:    AAA -0.1497286397 6.225878e-21 #> 41:    AAG  0.1022785721 1.635387e-10 #> 42:    AGT -0.1552420723 2.119267e-22 #> 43:    AGC -0.1489732334 9.797090e-21 #> 44:    AGA  0.0412850037 1.003712e-02 #> 45:    AGG -0.1932809538 4.905373e-34 #> 46:    GTT  0.1904668721 4.395850e-33 #> 47:    GTC  0.1990981824 4.728645e-36 #> 48:    GTA -0.1895276774 9.069717e-33 #> 49:    GTG -0.0955719036 2.357610e-09 #> 50:    GCT  0.2488397109 5.896098e-56 #> 51:    GCC  0.1754110472 3.075101e-28 #> 52:    GCA -0.0849723268 1.119066e-07 #> 53:    GCG -0.1019375045 1.881052e-10 #> 54:    GAT -0.0544183892 6.872410e-04 #> 55:    GAC  0.0603621379 1.658610e-04 #> 56:    GAA  0.0903827731 1.647429e-08 #> 57:    GAG -0.1193680732 8.181022e-14 #> 58:    GGT  0.2131801918 3.377969e-41 #> 59:    GGC -0.0116004256 4.696045e-01 #> 60:    GGA -0.1229495155 1.435996e-14 #> 61:    GGG -0.0934788330 5.230147e-09 #>      codon           csc       pvalue"},{"path":"https://mt1022.github.io/cubar/reference/est_optimal_codons.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate optimal codons — est_optimal_codons","title":"Estimate optimal codons — est_optimal_codons","text":"est_optimal_codons determine optimal codon codon family binomial regression.   Usage optimal codons correlate negatively enc.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_optimal_codons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate optimal codons — est_optimal_codons","text":"","code":"est_optimal_codons(   cf,   codon_table = get_codon_table(),   level = \"subfam\",   gene_score = NULL,   fdr = 0.001 )"},{"path":"https://mt1022.github.io/cubar/reference/est_optimal_codons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate optimal codons — est_optimal_codons","text":"cf matrix codon frequencies calculated count_codons(). codon_table table genetic code derived get_codon_table create_codon_table. level \"subfam\" (default) \"amino_acid\". level determine optimal codons. gene_score numeric vector scores genes. order values match gene orders codon frequency matrix. length vector equal number rows matrix. scores gene expression levels (RPKM TPM) optionally log-transformed (example, log1p). opposite ENC used default gene_score provided. fdr false discovery rate used determine optimal codons.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_optimal_codons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate optimal codons — est_optimal_codons","text":"data.table optimal codons.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_optimal_codons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate optimal codons — est_optimal_codons","text":"","code":"# perform binomial regression for optimal codon estimation cf_all <- count_codons(yeast_cds) codons_opt <- est_optimal_codons(cf_all) codons_opt <- codons_opt[optimal == TRUE] codons_opt #>     aa_code amino_acid  codon subfam       coef        pvalue        qvalue #>      <char>     <char> <char> <char>      <num>         <num>         <num> #>  1:       A        Ala    GCT Ala_GC 0.08454964  0.000000e+00  0.000000e+00 #>  2:       A        Ala    GCC Ala_GC 0.01621930  2.127082e-32  2.359128e-32 #>  3:       R        Arg    AGA Arg_AG 0.12902657  0.000000e+00  0.000000e+00 #>  4:       R        Arg    CGT Arg_CG 0.20090361  0.000000e+00  0.000000e+00 #>  5:       N        Asn    AAC Asn_AA 0.04208269 8.024342e-185 1.223712e-184 #>  6:       D        Asp    GAC Asp_GA 0.01574961  3.398292e-28  3.636768e-28 #>  7:       C        Cys    TGT Cys_TG 0.09889375 4.697718e-150 6.512746e-150 #>  8:       Q        Gln    CAA Gln_CA 0.11196536  0.000000e+00  0.000000e+00 #>  9:       E        Glu    GAA Glu_GA 0.08458541  0.000000e+00  0.000000e+00 #> 10:       G        Gly    GGT Gly_GG 0.16530194  0.000000e+00  0.000000e+00 #> 11:       H        His    CAC His_CA 0.03127977  7.294628e-42  8.240228e-42 #> 12:       I        Ile    ATT Ile_AT 0.03956734 1.625599e-208 2.754487e-208 #> 13:       I        Ile    ATC Ile_AT 0.03975891 1.099697e-188 1.765303e-188 #> 14:       L        Leu    CTT Leu_CT 0.02178829  6.897132e-23  7.253880e-23 #> 15:       L        Leu    CTA Leu_CT 0.05101078 7.732994e-124 1.025462e-123 #> 16:       L        Leu    TTG Leu_TT 0.03514392 7.751784e-158 1.125854e-157 #> 17:       K        Lys    AAG Lys_AA 0.05853116  0.000000e+00  0.000000e+00 #> 18:       F        Phe    TTC Phe_TT 0.05451940 3.720900e-254 7.092965e-254 #> 19:       P        Pro    CCA Pro_CC 0.10328272  0.000000e+00  0.000000e+00 #> 20:       S        Ser    AGT Ser_AG 0.02452355  2.109510e-19  2.144669e-19 #> 21:       S        Ser    TCT Ser_TC 0.06070916  0.000000e+00  0.000000e+00 #> 22:       S        Ser    TCC Ser_TC 0.02605206  1.324126e-70  1.583759e-70 #> 23:       T        Thr    ACT Thr_AC 0.04838553 2.506592e-292 5.272486e-292 #> 24:       T        Thr    ACC Thr_AC 0.04684950 2.157821e-230 3.760774e-230 #> 25:       Y        Tyr    TAC Tyr_TA 0.04206093 1.244976e-121 1.582157e-121 #> 26:       V        Val    GTT Val_GT 0.05787243  0.000000e+00  0.000000e+00 #> 27:       V        Val    GTC Val_GT 0.04995247 1.700719e-281 3.458128e-281 #>     aa_code amino_acid  codon subfam       coef        pvalue        qvalue #>     optimal #>      <lgcl> #>  1:    TRUE #>  2:    TRUE #>  3:    TRUE #>  4:    TRUE #>  5:    TRUE #>  6:    TRUE #>  7:    TRUE #>  8:    TRUE #>  9:    TRUE #> 10:    TRUE #> 11:    TRUE #> 12:    TRUE #> 13:    TRUE #> 14:    TRUE #> 15:    TRUE #> 16:    TRUE #> 17:    TRUE #> 18:    TRUE #> 19:    TRUE #> 20:    TRUE #> 21:    TRUE #> 22:    TRUE #> 23:    TRUE #> 24:    TRUE #> 25:    TRUE #> 26:    TRUE #> 27:    TRUE #>     optimal"},{"path":"https://mt1022.github.io/cubar/reference/est_rscu.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate RSCU — est_rscu","title":"Estimate RSCU — est_rscu","text":"est_rscu returns RSCU value codons","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_rscu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate RSCU — est_rscu","text":"","code":"est_rscu(   cf,   weight = 1,   pseudo_cnt = 1,   codon_table = get_codon_table(),   level = \"subfam\" )"},{"path":"https://mt1022.github.io/cubar/reference/est_rscu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate RSCU — est_rscu","text":"cf matrix codon frequencies calculated count_codons(). weight vector length seqs gives different weights CDSs count codons. example, gene expression levels. pseudo_cnt pseudo count avoid dividing zero. may occur sequences available RSCU calculation. codon_table table genetic code derived get_codon_table create_codon_table. level \"subfam\" (default) \"amino_acid\". level determine RSCU.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_rscu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate RSCU — est_rscu","text":"data.table codon info. RSCU values reported last column.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_rscu.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate RSCU — est_rscu","text":"Sharp PM, Tuohy TM, Mosurski KR. 1986. Codon usage yeast: cluster analysis clearly differentiates highly lowly expressed genes. Nucleic Acids Res 14:5125-5143.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_rscu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate RSCU — est_rscu","text":"","code":"# compute RSCU of all yeast genes cf_all <- count_codons(yeast_cds) est_rscu(cf_all) #>     aa_code amino_acid  codon subfam    cts      prop     w_cai      rscu #>      <char>     <char> <char> <char>  <num>     <num>     <num>     <num> #>  1:       F        Phe    TTT Phe_TT  79149 0.5946835 1.0000000 1.1893671 #>  2:       F        Phe    TTC Phe_TT  53945 0.4053165 0.6815666 0.8106329 #>  3:       L        Leu    TTA Leu_TT  77584 0.4968747 0.9875765 0.9937494 #>  4:       L        Leu    TTG Leu_TT  78560 0.5031253 1.0000000 1.0062506 #>  5:       S        Ser    TCT Ser_TC  68480 0.3590299 1.0000000 1.4361195 #>  6:       S        Ser    TCC Ser_TC  41295 0.2165053 0.6030286 0.8660211 #>  7:       S        Ser    TCA Ser_TC  55198 0.2893955 0.8060484 1.1575818 #>  8:       S        Ser    TCG Ser_TC  25762 0.1350694 0.3762065 0.5402776 #>  9:       Y        Tyr    TAT Tyr_TA  55654 0.5696637 1.0000000 1.1393273 #> 10:       Y        Tyr    TAC Tyr_TA  42042 0.4303363 0.7554218 0.8606727 #> 11:       C        Cys    TGT Cys_TG  24113 0.6208388 1.0000000 1.2416776 #> 12:       C        Cys    TGC Cys_TG  14726 0.3791612 0.6107241 0.7583224 #> 13:       W        Trp    TGG Trp_TG  30566 1.0000000 1.0000000 1.0000000 #> 14:       L        Leu    CTT Leu_CT  36969 0.2960679 0.9384678 1.1842716 #> 15:       L        Leu    CTC Leu_CT  16801 0.1345559 0.4265117 0.5382238 #> 16:       L        Leu    CTA Leu_CT  39393 0.3154801 1.0000000 1.2619204 #> 17:       L        Leu    CTG Leu_CT  31703 0.2538961 0.8047926 1.0155842 #> 18:       P        Pro    CCT Pro_CC  38941 0.3095868 0.7628656 1.2383474 #> 19:       P        Pro    CCC Pro_CC  20258 0.1610580 0.3968696 0.6442319 #> 20:       P        Pro    CCA Pro_CC  51046 0.4058210 1.0000000 1.6232838 #> 21:       P        Pro    CCG Pro_CC  15538 0.1235342 0.3044057 0.4941369 #> 22:       H        His    CAT His_CA  40077 0.6428010 1.0000000 1.2856020 #> 23:       H        His    CAC His_CA  22270 0.3571990 0.5556914 0.7143980 #> 24:       Q        Gln    CAA Gln_CA  77278 0.6826948 1.0000000 1.3653895 #> 25:       Q        Gln    CAG Gln_CA  35917 0.3173052 0.4647834 0.6346105 #> 26:       R        Arg    CGT Arg_CG  18306 0.4462945 1.0000000 1.7851780 #> 27:       R        Arg    CGC Arg_CG   7918 0.1930522 0.4325668 0.7722087 #> 28:       R        Arg    CGA Arg_CG   9151 0.2231107 0.4999181 0.8924427 #> 29:       R        Arg    CGG Arg_CG   5641 0.1375427 0.3081881 0.5501706 #> 30:       I        Ile    ATT Ile_AT  88446 0.4621442 1.0000000 1.3864325 #> 31:       I        Ile    ATC Ile_AT  49094 0.2565261 0.5550782 0.7695784 #> 32:       I        Ile    ATA Ile_AT  53841 0.2813297 0.6087487 0.8439890 #> 33:       M        Met    ATG Met_AT  61057 1.0000000 1.0000000 1.0000000 #> 34:       T        Thr    ACT Thr_AC  58292 0.3424508 1.0000000 1.3698031 #> 35:       T        Thr    ACC Thr_AC  36147 0.2123567 0.6201088 0.8494269 #> 36:       T        Thr    ACA Thr_AC  51798 0.3043008 0.8885973 1.2172033 #> 37:       T        Thr    ACG Thr_AC  23982 0.1408917 0.4114216 0.5635666 #> 38:       N        Asn    AAT Asn_AA 105623 0.5979721 1.0000000 1.1959442 #> 39:       N        Asn    AAC Asn_AA  71012 0.4020279 0.6723188 0.8040558 #> 40:       K        Lys    AAA Lys_AA 123449 0.5820258 1.0000000 1.1640516 #> 41:       K        Lys    AAG Lys_AA  88653 0.4179742 0.7181369 0.8359484 #> 42:       S        Ser    AGT Ser_AG  42680 0.5901361 1.0000000 1.1802721 #> 43:       S        Ser    AGC Ser_AG  29642 0.4098639 0.6945245 0.8197279 #> 44:       R        Arg    AGA Arg_AG  61208 0.6859688 1.0000000 1.3719377 #> 45:       R        Arg    AGG Arg_AG  28020 0.3140312 0.4577922 0.6280623 #> 46:       V        Val    GTT Val_GT  63153 0.3851488 1.0000000 1.5405951 #> 47:       V        Val    GTC Val_GT  32925 0.2008014 0.5213605 0.8032054 #> 48:       V        Val    GTA Val_GT  35748 0.2180176 0.5660607 0.8720704 #> 49:       V        Val    GTG Val_GT  32143 0.1960323 0.5089781 0.7841291 #> 50:       A        Ala    GCT Ala_GC  58801 0.3666234 1.0000000 1.4664938 #> 51:       A        Ala    GCC Ala_GC  35734 0.2228035 0.6077174 0.8912138 #> 52:       A        Ala    GCA Ala_GC  47400 0.2955396 0.8061120 1.1821583 #> 53:       A        Ala    GCG Ala_GC  18449 0.1150335 0.3137648 0.4601342 #> 54:       D        Asp    GAT Asp_GA 109757 0.6539559 1.0000000 1.3079118 #> 55:       D        Asp    GAC Asp_GA  58078 0.3460441 0.5291551 0.6920882 #> 56:       E        Glu    GAA Glu_GA 132048 0.6987459 1.0000000 1.3974918 #> 57:       E        Glu    GAG Glu_GA  56930 0.3012541 0.4311354 0.6025082 #> 58:       G        Gly    GGT Gly_GG  65720 0.4515325 1.0000000 1.8061298 #> 59:       G        Gly    GGC Gly_GG  28880 0.1984253 0.4394486 0.7937012 #> 60:       G        Gly    GGA Gly_GG  32779 0.2252132 0.4987751 0.9008526 #> 61:       G        Gly    GGG Gly_GG  18168 0.1248291 0.2764565 0.4993164 #>     aa_code amino_acid  codon subfam    cts      prop     w_cai      rscu  # compute RSCU of highly expressed (top 500) yeast genes heg <- head(yeast_exp[order(-yeast_exp$fpkm), ], n = 500) cf_heg <- count_codons(yeast_cds[heg$gene_id]) est_rscu(cf_heg) #>     aa_code amino_acid  codon subfam   cts       prop      w_cai       rscu #>      <char>     <char> <char> <char> <num>      <num>      <num>      <num> #>  1:       F        Phe    TTT Phe_TT  2681 0.40005967 0.66683242 0.80011933 #>  2:       F        Phe    TTC Phe_TT  4021 0.59994033 1.00000000 1.19988067 #>  3:       L        Leu    TTA Leu_TT  3178 0.32133832 0.47348823 0.64267664 #>  4:       L        Leu    TTG Leu_TT  6713 0.67866168 1.00000000 1.35732336 #>  5:       S        Ser    TCT Ser_TC  4602 0.48916047 1.00000000 1.95664187 #>  6:       S        Ser    TCC Ser_TC  2885 0.30669501 0.62698240 1.22678002 #>  7:       S        Ser    TCA Ser_TC  1380 0.14675877 0.30002172 0.58703507 #>  8:       S        Ser    TCG Ser_TC   539 0.05738576 0.11731479 0.22954304 #>  9:       Y        Tyr    TAT Tyr_TA  1856 0.36648905 0.57850467 0.73297809 #> 10:       Y        Tyr    TAC Tyr_TA  3209 0.63351095 1.00000000 1.26702191 #> 11:       C        Cys    TGT Cys_TG  1285 0.80425266 1.00000000 1.60850532 #> 12:       C        Cys    TGC Cys_TG   312 0.19574734 0.24339036 0.39149468 #> 13:       W        Trp    TGG Trp_TG  1621 1.00000000 1.00000000 1.00000000 #> 14:       L        Leu    CTT Leu_CT  1048 0.29309863 0.68651832 1.17239452 #> 15:       L        Leu    CTC Leu_CT   279 0.07823414 0.18324607 0.31293657 #> 16:       L        Leu    CTA Leu_CT  1527 0.42693490 1.00000000 1.70773959 #> 17:       L        Leu    CTG Leu_CT   721 0.20173233 0.47251309 0.80692931 #> 18:       P        Pro    CCT Pro_CC  1648 0.25330261 0.38955823 1.01321045 #> 19:       P        Pro    CCC Pro_CC   423 0.06513057 0.10016537 0.26052227 #> 20:       P        Pro    CCA Pro_CC  4232 0.65023041 1.00000000 2.60092166 #> 21:       P        Pro    CCG Pro_CC   203 0.03133641 0.04819277 0.12534562 #> 22:       H        His    CAT His_CA  1509 0.49185668 0.96794872 0.98371336 #> 23:       H        His    CAC His_CA  1559 0.50814332 1.00000000 1.01628664 #> 24:       Q        Gln    CAA Gln_CA  4792 0.85650465 1.00000000 1.71300929 #> 25:       Q        Gln    CAG Gln_CA   802 0.14349535 0.16753599 0.28699071 #> 26:       R        Arg    CGT Arg_CG  1409 0.86450031 1.00000000 3.45800123 #> 27:       R        Arg    CGC Arg_CG   142 0.08767627 0.10141844 0.35070509 #> 28:       R        Arg    CGA Arg_CG    38 0.02391171 0.02765957 0.09564684 #> 29:       R        Arg    CGG Arg_CG    38 0.02391171 0.02765957 0.09564684 #> 30:       I        Ile    ATT Ile_AT  4991 0.52409449 1.00000000 1.57228346 #> 31:       I        Ile    ATC Ile_AT  3872 0.40661417 0.77584135 1.21984252 #> 32:       I        Ile    ATA Ile_AT   659 0.06929134 0.13221154 0.20787402 #> 33:       M        Met    ATG Met_AT  3093 1.00000000 1.00000000 1.00000000 #> 34:       T        Thr    ACT Thr_AC  4102 0.45266990 1.00000000 1.81067961 #> 35:       T        Thr    ACC Thr_AC  3032 0.33462048 0.73921521 1.33848191 #> 36:       T        Thr    ACA Thr_AC  1425 0.15732568 0.34755057 0.62930274 #> 37:       T        Thr    ACG Thr_AC   501 0.05538394 0.12234950 0.22153575 #> 38:       N        Asn    AAT Asn_AA  2651 0.36930790 0.58555973 0.73861579 #> 39:       N        Asn    AAC Asn_AA  4528 0.63069210 1.00000000 1.26138421 #> 40:       K        Lys    AAA Lys_AA  4395 0.36551093 0.57607129 0.73102187 #> 41:       K        Lys    AAG Lys_AA  7630 0.63448907 1.00000000 1.26897813 #> 42:       S        Ser    AGT Ser_AG   987 0.57375145 1.00000000 1.14750290 #> 43:       S        Ser    AGC Ser_AG   733 0.42624855 0.74291498 0.85249710 #> 44:       R        Arg    AGA Arg_AG  4804 0.90268646 1.00000000 1.80537291 #> 45:       R        Arg    AGG Arg_AG   517 0.09731354 0.10780437 0.19462709 #> 46:       V        Val    GTT Val_GT  5528 0.49689943 1.00000000 1.98759774 #> 47:       V        Val    GTC Val_GT  3497 0.31437045 0.63266413 1.25748180 #> 48:       V        Val    GTA Val_GT   935 0.08411971 0.16928920 0.33647884 #> 49:       V        Val    GTG Val_GT  1163 0.10461041 0.21052632 0.41844163 #> 50:       A        Ala    GCT Ala_GC  7045 0.55401793 1.00000000 2.21607171 #> 51:       A        Ala    GCC Ala_GC  3479 0.27362793 0.49389725 1.09451172 #> 52:       A        Ala    GCA Ala_GC  1725 0.13571316 0.24496168 0.54285265 #> 53:       A        Ala    GCG Ala_GC   465 0.03664098 0.06613682 0.14656393 #> 54:       D        Asp    GAT Asp_GA  4820 0.54678462 1.00000000 1.09356924 #> 55:       D        Asp    GAC Asp_GA  3995 0.45321538 0.82887368 0.90643076 #> 56:       E        Glu    GAA Glu_GA  8649 0.81673119 1.00000000 1.63346237 #> 57:       E        Glu    GAG Glu_GA  1940 0.18326881 0.22439306 0.36653763 #> 58:       G        Gly    GGT Gly_GG  8092 0.76718172 1.00000000 3.06872689 #> 59:       G        Gly    GGC Gly_GG  1194 0.11328088 0.14765847 0.45312352 #> 60:       G        Gly    GGA Gly_GG   778 0.07384586 0.09625602 0.29538345 #> 61:       G        Gly    GGG Gly_GG   481 0.04569153 0.05955764 0.18276614 #>     aa_code amino_acid  codon subfam   cts       prop      w_cai       rscu"},{"path":"https://mt1022.github.io/cubar/reference/est_trna_weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate tRNA weight w — est_trna_weight","title":"Estimate tRNA weight w — est_trna_weight","text":"est_trna_weight compute tRNA weight per codon TAI calculation. weight reflects relative tRNA availability codon.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_trna_weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate tRNA weight w — est_trna_weight","text":"","code":"est_trna_weight(   trna_level,   codon_table = get_codon_table(),   domain = \"Eukarya\",   s = NULL )"},{"path":"https://mt1022.github.io/cubar/reference/est_trna_weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate tRNA weight w — est_trna_weight","text":"trna_level, named vector tRNA level (gene copy numbers), one value anticodon. vector names anticodons. codon_table table genetic code derived get_codon_table create_codon_table. domain taxonomic domain interest. \"Eukarya\" (default), \"Bacteria\" \"Archaea\". Specify either parameter \"domain\" \"s\". s list non-Waston-Crick pairing panelty. Specify either parameter \"domain\" \"s\".","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_trna_weight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate tRNA weight w — est_trna_weight","text":"data.table tRNA expression information.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_trna_weight.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate tRNA weight w — est_trna_weight","text":"dos Reis M, Savva R, Wernisch L. 2004. Solving riddle codon usage preferences: test translational selection. Nucleic Acids Res 32:5036-5044. Sabi R, Tuller T. 2014. Modelling efficiency codon-tRNA interactions based codon usage bias. DNA Res 21:511-526.","code":""},{"path":"https://mt1022.github.io/cubar/reference/est_trna_weight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate tRNA weight w — est_trna_weight","text":"","code":"# estimate codon tRNA weight for yeast yeast_trna_w <- est_trna_weight(yeast_trna_gcn) print(yeast_trna_w) #>     aa_code amino_acid  codon subfam anticodon trna_id ac_level       W #>      <char>     <char> <char> <char>    <char>  <char>  <table>   <num> #>  1:       F        Phe    TTT Phe_TT       AAA Phe-AAA        0  2.1390 #>  2:       F        Phe    TTC Phe_TT       GAA Phe-GAA       10 10.0000 #>  3:       L        Leu    TTA Leu_TT       TAA Leu-TAA        7  7.0000 #>  4:       L        Leu    TTG Leu_TT       CAA Leu-CAA       10 12.5935 #>  5:       S        Ser    TCT Ser_TC       AGA Ser-AGA       11 11.0000 #>  6:       S        Ser    TCC Ser_TC       GGA Ser-GGA        0  5.8751 #>  7:       S        Ser    TCA Ser_TC       TGA Ser-TGA        3  4.0175 #>  8:       S        Ser    TCG Ser_TC       CGA Ser-CGA        1  2.1115 #>  9:       Y        Tyr    TAT Tyr_TA       ATA Tyr-ATA        0  1.7112 #> 10:       Y        Tyr    TAC Tyr_TA       GTA Tyr-GTA        8  8.0000 #> 11:       C        Cys    TGT Cys_TG       ACA Cys-ACA        0  0.8556 #> 12:       C        Cys    TGC Cys_TG       GCA Cys-GCA        4  4.0000 #> 13:       W        Trp    TGG Trp_TG       CCA Trp-CCA        6  6.0000 #> 14:       L        Leu    CTT Leu_CT       AAG Leu-AAG        0  0.2139 #> 15:       L        Leu    CTC Leu_CT       GAG Leu-GAG        1  1.0000 #> 16:       L        Leu    CTA Leu_CT       TAG Leu-TAG        3  3.0000 #> 17:       L        Leu    CTG Leu_CT       CAG Leu-CAG        0  1.1115 #> 18:       P        Pro    CCT Pro_CC       AGG Pro-AGG        2  2.0000 #> 19:       P        Pro    CCC Pro_CC       GGG Pro-GGG        0  1.0682 #> 20:       P        Pro    CCA Pro_CC       TGG Pro-TGG       10 10.1850 #> 21:       P        Pro    CCG Pro_CC       CGG Pro-CGG        0  3.7050 #> 22:       H        His    CAT His_CA       ATG His-ATG        0  1.4973 #> 23:       H        His    CAC His_CA       GTG His-GTG        7  7.0000 #> 24:       Q        Gln    CAA Gln_CA       TTG Gln-TTG        9  9.0000 #> 25:       Q        Gln    CAG Gln_CA       CTG Gln-CTG        1  4.3345 #> 26:       R        Arg    CGT Arg_CG       ACG Arg-ACG        6  6.0000 #> 27:       R        Arg    CGC Arg_CG       GCG Arg-GCG        0  3.2046 #> 28:       R        Arg    CGA Arg_CG       TCG Arg-TCG        0  0.5550 #> 29:       R        Arg    CGG Arg_CG       CCG Arg-CCG        1  1.0000 #> 30:       I        Ile    ATT Ile_AT       AAT Ile-AAT       13 13.0000 #> 31:       I        Ile    ATC Ile_AT       GAT Ile-GAT        0  6.9433 #> 32:       I        Ile    ATA Ile_AT       TAT Ile-TAT        2  3.2025 #> 33:       M        Met    ATG Met_AT       CAT Met-CAT        5  5.0000 #> 34:       T        Thr    ACT Thr_AC       AGT Thr-AGT       11 11.0000 #> 35:       T        Thr    ACC Thr_AC       GGT Thr-GGT        0  5.8751 #> 36:       T        Thr    ACA Thr_AC       TGT Thr-TGT        4  5.0175 #> 37:       T        Thr    ACG Thr_AC       CGT Thr-CGT        1  2.4820 #> 38:       N        Asn    AAT Asn_AA       ATT Asn-ATT        0  2.1390 #> 39:       N        Asn    AAC Asn_AA       GTT Asn-GTT       10 10.0000 #> 40:       K        Lys    AAA Lys_AA       TTT Lys-TTT        7  7.0000 #> 41:       K        Lys    AAG Lys_AA       CTT Lys-CTT       14 16.5935 #> 42:       S        Ser    AGT Ser_AG       ACT Ser-ACT        0  0.4278 #> 43:       S        Ser    AGC Ser_AG       GCT Ser-GCT        2  2.0000 #> 44:       R        Arg    AGA Arg_AG       TCT Arg-TCT       11 11.0000 #> 45:       R        Arg    AGG Arg_AG       CCT Arg-CCT        1  5.0755 #> 46:       V        Val    GTT Val_GT       AAC Val-AAC       14 14.0000 #> 47:       V        Val    GTC Val_GT       GAC Val-GAC        0  7.4774 #> 48:       V        Val    GTA Val_GT       TAC Val-TAC        2  3.2950 #> 49:       V        Val    GTG Val_GT       CAC Val-CAC        2  2.7410 #> 50:       A        Ala    GCT Ala_GC       AGC Ala-AGC       11 11.0000 #> 51:       A        Ala    GCC Ala_GC       GGC Ala-GGC        0  5.8751 #> 52:       A        Ala    GCA Ala_GC       TGC Ala-TGC        5  6.0175 #> 53:       A        Ala    GCG Ala_GC       CGC Ala-CGC        0  1.8525 #> 54:       D        Asp    GAT Asp_GA       ATC Asp-ATC        0  3.4224 #> 55:       D        Asp    GAC Asp_GA       GTC Asp-GTC       16 16.0000 #> 56:       E        Glu    GAA Glu_GA       TTC Glu-TTC       14 14.0000 #> 57:       E        Glu    GAG Glu_GA       CTC Glu-CTC        2  7.1870 #> 58:       G        Gly    GGT Gly_GG       ACC Gly-ACC        0  3.4224 #> 59:       G        Gly    GGC Gly_GG       GCC Gly-GCC       16 16.0000 #> 60:       G        Gly    GGA Gly_GG       TCC Gly-TCC        3  3.0000 #> 61:       G        Gly    GGG Gly_GG       CCC Gly-CCC        2  3.1115 #>     aa_code amino_acid  codon subfam anticodon trna_id ac_level       W #>              w #>          <num> #>  1: 0.12890590 #>  2: 0.60264561 #>  3: 0.42185193 #>  4: 0.75894175 #>  5: 0.66291018 #>  6: 0.35406032 #>  7: 0.24211288 #>  8: 0.12724862 #>  9: 0.10312472 #> 10: 0.48211649 #> 11: 0.05156236 #> 12: 0.24105825 #> 13: 0.36158737 #> 14: 0.01289059 #> 15: 0.06026456 #> 16: 0.18079368 #> 17: 0.06698406 #> 18: 0.12052912 #> 19: 0.06437460 #> 20: 0.61379456 #> 21: 0.22328020 #> 22: 0.09023413 #> 23: 0.42185193 #> 24: 0.54238105 #> 25: 0.26121674 #> 26: 0.36158737 #> 27: 0.19312381 #> 28: 0.03344683 #> 29: 0.06026456 #> 30: 0.78343930 #> 31: 0.41843493 #> 32: 0.19299726 #> 33: 0.30132281 #> 34: 0.66291018 #> 35: 0.35406032 #> 36: 0.30237744 #> 37: 0.14957664 #> 38: 0.12890590 #> 39: 0.60264561 #> 40: 0.42185193 #> 41: 1.00000000 #> 42: 0.02578118 #> 43: 0.12052912 #> 44: 0.66291018 #> 45: 0.30587278 #> 46: 0.84370386 #> 47: 0.45062223 #> 48: 0.19857173 #> 49: 0.16518516 #> 50: 0.66291018 #> 51: 0.35406032 #> 52: 0.36264200 #> 53: 0.11164010 #> 54: 0.20624944 #> 55: 0.96423298 #> 56: 0.84370386 #> 57: 0.43312140 #> 58: 0.20624944 #> 59: 0.96423298 #> 60: 0.18079368 #> 61: 0.18751318 #>              w"},{"path":"https://mt1022.github.io/cubar/reference/extract_trna_gcn.html","id":null,"dir":"Reference","previous_headings":"","what":"get tRNA gene copy number from GtRNADB — extract_trna_gcn","title":"get tRNA gene copy number from GtRNADB — extract_trna_gcn","text":"extract_trna_gcn get tRNA gene copy number GtRNADB","code":""},{"path":"https://mt1022.github.io/cubar/reference/extract_trna_gcn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get tRNA gene copy number from GtRNADB — extract_trna_gcn","text":"","code":"extract_trna_gcn(trna_seq)"},{"path":"https://mt1022.github.io/cubar/reference/extract_trna_gcn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get tRNA gene copy number from GtRNADB — extract_trna_gcn","text":"trna_seq fasta file tRNA sequences GtRNADB","code":""},{"path":"https://mt1022.github.io/cubar/reference/extract_trna_gcn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get tRNA gene copy number from GtRNADB — extract_trna_gcn","text":"table tRNA gene copy number anticodon","code":""},{"path":"https://mt1022.github.io/cubar/reference/extract_trna_gcn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get tRNA gene copy number from GtRNADB — extract_trna_gcn","text":"","code":"# get tRNA gene copy number for yeast trna_gcn <- extract_trna_gcn(yeast_trna)"},{"path":"https://mt1022.github.io/cubar/reference/get_aau.html","id":null,"dir":"Reference","previous_headings":"","what":"Amino Acid Usage — get_aau","title":"Amino Acid Usage — get_aau","text":"Calculate Amino Acid Usage Frequencies CDS.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_aau.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Amino Acid Usage — get_aau","text":"","code":"get_aau(cf, codon_table = get_codon_table())"},{"path":"https://mt1022.github.io/cubar/reference/get_aau.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Amino Acid Usage — get_aau","text":"cf matrix codon frequencies calculated `count_codons()`. codon_table table genetic code derived get_codon_table create_codon_table.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_aau.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Amino Acid Usage — get_aau","text":"matrix amino acid frequencies CDS.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_aau.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Amino Acid Usage — get_aau","text":"","code":"# estimate amino acid frequencies of yeast CDSs cf_all <- count_codons(yeast_cds) aau_gene <- get_aau(cf_all) head(aau_gene) #>                Ala        Arg        Asn        Asp         Cys         Gln #> YPL071C 0.04487179 0.06410256 0.08974359 0.12820513 0.006410256 0.012820513 #> YLL050C 0.07692308 0.04895105 0.04195804 0.08391608 0.006993007 0.006993007 #> YMR172W 0.05563282 0.05006954 0.11821975 0.05841446 0.002781641 0.050069541 #> YOR185C 0.07727273 0.03636364 0.05454545 0.06363636 0.013636364 0.050000000 #> YLL032C 0.04242424 0.03515152 0.08484848 0.04242424 0.010909091 0.046060606 #> YBR225W 0.05444444 0.04333333 0.06888889 0.06444444 0.008888889 0.031111111 #>                Glu        Gly         His        Ile        Leu        Lys #> YPL071C 0.04487179 0.03846154 0.032051282 0.08974359 0.06410256 0.09615385 #> YLL050C 0.06993007 0.06293706 0.006993007 0.03496503 0.07692308 0.07692308 #> YMR172W 0.04728790 0.05285118 0.022253129 0.06119611 0.08484006 0.05702364 #> YOR185C 0.06363636 0.05909091 0.022727273 0.05000000 0.07727273 0.08181818 #> YLL032C 0.06666667 0.03878788 0.019393939 0.10060606 0.09090909 0.07151515 #> YBR225W 0.05444444 0.03777778 0.031111111 0.06111111 0.08555556 0.08000000 #>                Met        Phe        Pro        Ser        Thr         Trp #> YPL071C 0.03205128 0.02564103 0.02564103 0.05769231 0.03846154 0.032051282 #> YLL050C 0.01398601 0.05594406 0.02797203 0.11188811 0.05594406 0.006993007 #> YMR172W 0.02642559 0.02086231 0.04311544 0.11265647 0.08344924 0.004172462 #> YOR185C 0.01818182 0.05454545 0.05454545 0.02727273 0.05909091 0.013636364 #> YLL032C 0.02545455 0.05454545 0.04000000 0.08121212 0.05939394 0.002424242 #> YBR225W 0.01444444 0.04444444 0.05888889 0.13444444 0.05444444 0.011111111 #>                Tyr        Val #> YPL071C 0.03846154 0.03846154 #> YLL050C 0.04895105 0.08391608 #> YMR172W 0.01808067 0.03059805 #> YOR185C 0.04090909 0.08181818 #> YLL032C 0.04363636 0.04363636 #> YBR225W 0.02888889 0.03222222"},{"path":"https://mt1022.github.io/cubar/reference/get_cai.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate CAI — get_cai","title":"Calculate CAI — get_cai","text":"get_cai calculates Codon Adaptation Index (CAI) input CDS","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate CAI — get_cai","text":"","code":"get_cai(cf, rscu, level = \"subfam\")"},{"path":"https://mt1022.github.io/cubar/reference/get_cai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate CAI — get_cai","text":"cf matrix codon frequencies calculated count_codons(). rscu rscu table containing CAI weight codon. table generated est_rscu prepared manually. level \"subfam\" (default) \"amino_acid\". level determine CAI.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate CAI — get_cai","text":"named vector CAI values","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cai.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate CAI — get_cai","text":"Sharp PM, Li WH. 1987. codon Adaptation Index–measure directional   synonymous codon usage bias, potential applications. Nucleic Acids Res 15:1281-1295.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cai.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate CAI — get_cai","text":"","code":"# estimate CAI of yeast genes based on RSCU of highly expressed genes heg <- head(yeast_exp[order(-yeast_exp$fpkm), ], n = 500) cf_all <- count_codons(yeast_cds) cf_heg <- cf_all[heg$gene_id, ] rscu_heg <- est_rscu(cf_heg) cai <- get_cai(cf_all, rscu_heg) head(cai) #>   YPL071C   YLL050C   YMR172W   YOR185C   YLL032C   YBR225W  #> 0.5590442 0.8212905 0.5112301 0.6534497 0.5670395 0.5485641  hist(cai)"},{"path":"https://mt1022.github.io/cubar/reference/get_codon_table.html","id":null,"dir":"Reference","previous_headings":"","what":"get codon table by NCBI gene code ID — get_codon_table","title":"get codon table by NCBI gene code ID — get_codon_table","text":"get_codon_table creates codon table based given id genetic code NCBI.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_codon_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get codon table by NCBI gene code ID — get_codon_table","text":"","code":"get_codon_table(gcid = \"1\")"},{"path":"https://mt1022.github.io/cubar/reference/get_codon_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get codon table by NCBI gene code ID — get_codon_table","text":"gcid string genetic code id. run show_codon_tables() see available codon tables.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_codon_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get codon table by NCBI gene code ID — get_codon_table","text":"data.table four columns: aa_code, amino_acid, codon, subfam.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_codon_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get codon table by NCBI gene code ID — get_codon_table","text":"","code":"# Standard genetic code get_codon_table() #>     aa_code amino_acid  codon subfam #>      <char>     <char> <char> <char> #>  1:       F        Phe    TTT Phe_TT #>  2:       F        Phe    TTC Phe_TT #>  3:       L        Leu    TTA Leu_TT #>  4:       L        Leu    TTG Leu_TT #>  5:       S        Ser    TCT Ser_TC #>  6:       S        Ser    TCC Ser_TC #>  7:       S        Ser    TCA Ser_TC #>  8:       S        Ser    TCG Ser_TC #>  9:       Y        Tyr    TAT Tyr_TA #> 10:       Y        Tyr    TAC Tyr_TA #> 11:       *          *    TAA   *_TA #> 12:       *          *    TAG   *_TA #> 13:       C        Cys    TGT Cys_TG #> 14:       C        Cys    TGC Cys_TG #> 15:       *          *    TGA   *_TG #> 16:       W        Trp    TGG Trp_TG #> 17:       L        Leu    CTT Leu_CT #> 18:       L        Leu    CTC Leu_CT #> 19:       L        Leu    CTA Leu_CT #> 20:       L        Leu    CTG Leu_CT #> 21:       P        Pro    CCT Pro_CC #> 22:       P        Pro    CCC Pro_CC #> 23:       P        Pro    CCA Pro_CC #> 24:       P        Pro    CCG Pro_CC #> 25:       H        His    CAT His_CA #> 26:       H        His    CAC His_CA #> 27:       Q        Gln    CAA Gln_CA #> 28:       Q        Gln    CAG Gln_CA #> 29:       R        Arg    CGT Arg_CG #> 30:       R        Arg    CGC Arg_CG #> 31:       R        Arg    CGA Arg_CG #> 32:       R        Arg    CGG Arg_CG #> 33:       I        Ile    ATT Ile_AT #> 34:       I        Ile    ATC Ile_AT #> 35:       I        Ile    ATA Ile_AT #> 36:       M        Met    ATG Met_AT #> 37:       T        Thr    ACT Thr_AC #> 38:       T        Thr    ACC Thr_AC #> 39:       T        Thr    ACA Thr_AC #> 40:       T        Thr    ACG Thr_AC #> 41:       N        Asn    AAT Asn_AA #> 42:       N        Asn    AAC Asn_AA #> 43:       K        Lys    AAA Lys_AA #> 44:       K        Lys    AAG Lys_AA #> 45:       S        Ser    AGT Ser_AG #> 46:       S        Ser    AGC Ser_AG #> 47:       R        Arg    AGA Arg_AG #> 48:       R        Arg    AGG Arg_AG #> 49:       V        Val    GTT Val_GT #> 50:       V        Val    GTC Val_GT #> 51:       V        Val    GTA Val_GT #> 52:       V        Val    GTG Val_GT #> 53:       A        Ala    GCT Ala_GC #> 54:       A        Ala    GCC Ala_GC #> 55:       A        Ala    GCA Ala_GC #> 56:       A        Ala    GCG Ala_GC #> 57:       D        Asp    GAT Asp_GA #> 58:       D        Asp    GAC Asp_GA #> 59:       E        Glu    GAA Glu_GA #> 60:       E        Glu    GAG Glu_GA #> 61:       G        Gly    GGT Gly_GG #> 62:       G        Gly    GGC Gly_GG #> 63:       G        Gly    GGA Gly_GG #> 64:       G        Gly    GGG Gly_GG #>     aa_code amino_acid  codon subfam  # Vertebrate Mitochondrial genetic code get_codon_table(gcid = '2') #>     aa_code amino_acid  codon subfam #>      <char>     <char> <char> <char> #>  1:       F        Phe    TTT Phe_TT #>  2:       F        Phe    TTC Phe_TT #>  3:       L        Leu    TTA Leu_TT #>  4:       L        Leu    TTG Leu_TT #>  5:       S        Ser    TCT Ser_TC #>  6:       S        Ser    TCC Ser_TC #>  7:       S        Ser    TCA Ser_TC #>  8:       S        Ser    TCG Ser_TC #>  9:       Y        Tyr    TAT Tyr_TA #> 10:       Y        Tyr    TAC Tyr_TA #> 11:       *          *    TAA   *_TA #> 12:       *          *    TAG   *_TA #> 13:       C        Cys    TGT Cys_TG #> 14:       C        Cys    TGC Cys_TG #> 15:       W        Trp    TGA Trp_TG #> 16:       W        Trp    TGG Trp_TG #> 17:       L        Leu    CTT Leu_CT #> 18:       L        Leu    CTC Leu_CT #> 19:       L        Leu    CTA Leu_CT #> 20:       L        Leu    CTG Leu_CT #> 21:       P        Pro    CCT Pro_CC #> 22:       P        Pro    CCC Pro_CC #> 23:       P        Pro    CCA Pro_CC #> 24:       P        Pro    CCG Pro_CC #> 25:       H        His    CAT His_CA #> 26:       H        His    CAC His_CA #> 27:       Q        Gln    CAA Gln_CA #> 28:       Q        Gln    CAG Gln_CA #> 29:       R        Arg    CGT Arg_CG #> 30:       R        Arg    CGC Arg_CG #> 31:       R        Arg    CGA Arg_CG #> 32:       R        Arg    CGG Arg_CG #> 33:       I        Ile    ATT Ile_AT #> 34:       I        Ile    ATC Ile_AT #> 35:       M        Met    ATA Met_AT #> 36:       M        Met    ATG Met_AT #> 37:       T        Thr    ACT Thr_AC #> 38:       T        Thr    ACC Thr_AC #> 39:       T        Thr    ACA Thr_AC #> 40:       T        Thr    ACG Thr_AC #> 41:       N        Asn    AAT Asn_AA #> 42:       N        Asn    AAC Asn_AA #> 43:       K        Lys    AAA Lys_AA #> 44:       K        Lys    AAG Lys_AA #> 45:       S        Ser    AGT Ser_AG #> 46:       S        Ser    AGC Ser_AG #> 47:       *          *    AGA   *_AG #> 48:       *          *    AGG   *_AG #> 49:       V        Val    GTT Val_GT #> 50:       V        Val    GTC Val_GT #> 51:       V        Val    GTA Val_GT #> 52:       V        Val    GTG Val_GT #> 53:       A        Ala    GCT Ala_GC #> 54:       A        Ala    GCC Ala_GC #> 55:       A        Ala    GCA Ala_GC #> 56:       A        Ala    GCG Ala_GC #> 57:       D        Asp    GAT Asp_GA #> 58:       D        Asp    GAC Asp_GA #> 59:       E        Glu    GAA Glu_GA #> 60:       E        Glu    GAG Glu_GA #> 61:       G        Gly    GGT Gly_GG #> 62:       G        Gly    GGC Gly_GG #> 63:       G        Gly    GGA Gly_GG #> 64:       G        Gly    GGG Gly_GG #>     aa_code amino_acid  codon subfam"},{"path":"https://mt1022.github.io/cubar/reference/get_cscg.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean Codon Stabilization Coefficients — get_cscg","title":"Mean Codon Stabilization Coefficients — get_cscg","text":"get_cscg calculates Mean Codon Stabilization Coefficients CDS.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cscg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean Codon Stabilization Coefficients — get_cscg","text":"","code":"get_cscg(cf, csc)"},{"path":"https://mt1022.github.io/cubar/reference/get_cscg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean Codon Stabilization Coefficients — get_cscg","text":"cf matrix codon frequencies calculated count_codons(). csc table Codon Stabilization Coefficients calculated est_csc().","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cscg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean Codon Stabilization Coefficients — get_cscg","text":"named vector cscg values.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cscg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mean Codon Stabilization Coefficients — get_cscg","text":"Presnyak V, Alhusaini N, Chen YH, Martin S, Morris N, Kline N, Olson S, Weinberg D,   Baker KE, Graveley BR, et al. 2015. Codon optimality major determinant mRNA stability.   Cell 160:1111-1124.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_cscg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean Codon Stabilization Coefficients — get_cscg","text":"","code":"# estimate CSCg of yeast genes yeast_csc <- est_csc(yeast_cds, yeast_half_life) cf_all <- count_codons(yeast_cds) cscg <- get_cscg(cf_all, csc = yeast_csc) head(cscg) #>     YPL071C     YLL050C     YMR172W     YOR185C     YLL032C     YBR225W  #> -0.03363596  0.07754667 -0.01943528  0.02885805 -0.01350414 -0.01366274  hist(cscg)"},{"path":"https://mt1022.github.io/cubar/reference/get_dp.html","id":null,"dir":"Reference","previous_headings":"","what":"Deviation from Proportionality — get_dp","title":"Deviation from Proportionality — get_dp","text":"get_dp calculates Deviation Proportionality CDS.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_dp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deviation from Proportionality — get_dp","text":"","code":"get_dp(   cf,   host_weights,   codon_table = get_codon_table(),   level = \"subfam\",   missing_action = \"ignore\" )"},{"path":"https://mt1022.github.io/cubar/reference/get_dp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deviation from Proportionality — get_dp","text":"cf matrix codon frequencies calculated count_codons(). host_weights named vector tRNA weights codon reflects relative availability tRNAs host organism. codon_table table genetic code derived get_codon_table create_codon_table. level \"subfam\" (default) \"amino_acid\". \"subfam\", deviation calculated codon subfamily level. Otherwise, deviation calculated amino acid level. missing_action Actions take codon group found CDS. Options \"ignore\" (default), \"zero\" (set codon proportions 0).","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_dp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deviation from Proportionality — get_dp","text":"named vector dp values.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_dp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Deviation from Proportionality — get_dp","text":"Chen F, Wu P, Deng S, Zhang H, Hou Y, Hu Z, Zhang J, Chen X, Yang JR. 2020.   Dissimilation synonymous codon usage bias virus-host coevolution due translational   selection. Nat Ecol Evol 4:589-600.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_dp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deviation from Proportionality — get_dp","text":"","code":"# estimate DP of yeast genes cf_all <- count_codons(yeast_cds) trna_weight <- est_trna_weight(yeast_trna_gcn) trna_weight <- setNames(trna_weight$w, trna_weight$codon) dp <- get_dp(cf_all, host_weights = trna_weight) head(dp) #>   YPL071C   YLL050C   YMR172W   YOR185C   YLL032C   YBR225W  #> 0.4158602 0.3747995 0.3446886 0.3269183 0.3186617 0.3131750  hist(dp)"},{"path":"https://mt1022.github.io/cubar/reference/get_enc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate ENC — get_enc","title":"Calculate ENC — get_enc","text":"get_enc computes ENC CDS","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_enc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate ENC — get_enc","text":"","code":"get_enc(cf, codon_table = get_codon_table(), level = \"subfam\")"},{"path":"https://mt1022.github.io/cubar/reference/get_enc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate ENC — get_enc","text":"cf matrix codon frequencies calculated count_codons(). codon_table codon_table table genetic code derived get_codon_table create_codon_table. level \"subfam\" (default) \"amino_acid\". level determine ENC.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_enc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate ENC — get_enc","text":"vector ENC values, sequence names used vector names","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_enc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate ENC — get_enc","text":"- Wright F. 1990. 'effective number codons' used gene. Gene 87:23-29. - Sun X, Yang Q, Xia X. 2013. improved implementation effective number codons (NC).   Mol Biol Evol 30:191-196.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_enc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate ENC — get_enc","text":"","code":"# estimate ENC of yeast genes cf_all <- count_codons(yeast_cds) enc <- get_enc(cf_all) head(enc) #>  YPL071C  YLL050C  YMR172W  YOR185C  YLL032C  YBR225W  #> 52.93616 44.57694 56.03833 50.82037 53.34254 53.85807  hist(enc)"},{"path":"https://mt1022.github.io/cubar/reference/get_fop.html","id":null,"dir":"Reference","previous_headings":"","what":"Fraction of optimal codons (Fop) — get_fop","title":"Fraction of optimal codons (Fop) — get_fop","text":"get_fop calculates fraction optimal codons (Fop) CDS.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_fop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fraction of optimal codons (Fop) — get_fop","text":"","code":"get_fop(cf, op = NULL, codon_table = get_codon_table(), ...)"},{"path":"https://mt1022.github.io/cubar/reference/get_fop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fraction of optimal codons (Fop) — get_fop","text":"cf matrix codon frequencies calculated count_codons(). op character vector optimal codons. Can determined automatically running est_optimal_codons. codon_table table genetic code derived get_codon_table create_codon_table. ... arguments passed est_optimal_codons.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_fop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fraction of optimal codons (Fop) — get_fop","text":"named vector fop values.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_fop.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fraction of optimal codons (Fop) — get_fop","text":"Ikemura T. 1981. Correlation abundance Escherichia coli transfer RNAs   occurrence respective codons protein genes: proposal synonymous   codon choice optimal E. coli translational system. J Mol Biol 151:389-409.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_fop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fraction of optimal codons (Fop) — get_fop","text":"","code":"# estimate Fop of yeast genes cf_all <- count_codons(yeast_cds) fop <- get_fop(cf_all) head(fop) #>   YPL071C   YLL050C   YMR172W   YOR185C   YLL032C   YBR225W  #> 0.4012739 0.7569444 0.4611111 0.5791855 0.4963680 0.4716981  hist(fop)"},{"path":"https://mt1022.github.io/cubar/reference/get_gc.html","id":null,"dir":"Reference","previous_headings":"","what":"GC contents — get_gc","title":"GC contents — get_gc","text":"Calculate GC content whole sequences.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GC contents — get_gc","text":"","code":"get_gc(cf)"},{"path":"https://mt1022.github.io/cubar/reference/get_gc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GC contents — get_gc","text":"cf matrix codon frequencies calculated `count_codons()`.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GC contents — get_gc","text":"named vector GC contents.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GC contents — get_gc","text":"","code":"# estimate GC content of yeast genes cf_all <- count_codons(yeast_cds) gc <- get_gc(cf_all) head(gc) #>   YPL071C   YLL050C   YMR172W   YOR185C   YLL032C   YBR225W  #> 0.3566879 0.3981481 0.4101852 0.4027149 0.3454399 0.3880873  hist(gc)"},{"path":"https://mt1022.github.io/cubar/reference/get_gc3s.html","id":null,"dir":"Reference","previous_headings":"","what":"GC contents at synonymous 3rd codon positions — get_gc3s","title":"GC contents at synonymous 3rd codon positions — get_gc3s","text":"Calculate GC content synonymous 3rd codon positions.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc3s.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GC contents at synonymous 3rd codon positions — get_gc3s","text":"","code":"get_gc3s(cf, codon_table = get_codon_table(), level = \"subfam\")"},{"path":"https://mt1022.github.io/cubar/reference/get_gc3s.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GC contents at synonymous 3rd codon positions — get_gc3s","text":"cf matrix codon frequencies calculated count_codons(). codon_table table genetic code derived get_codon_table create_codon_table. level \"subfam\" (default) \"amino_acid\". level determine GC content synonymous 3rd codon positions.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc3s.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GC contents at synonymous 3rd codon positions — get_gc3s","text":"named vector GC3s values.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc3s.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GC contents at synonymous 3rd codon positions — get_gc3s","text":"Peden JF. 2000. Analysis codon usage.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc3s.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GC contents at synonymous 3rd codon positions — get_gc3s","text":"","code":"# estimate GC3s of yeast genes cf_all <- count_codons(yeast_cds) gc3s <- get_gc3s(cf_all) head(gc3s) #>   YPL071C   YLL050C   YMR172W   YOR185C   YLL032C   YBR225W  #> 0.3082192 0.3571429 0.3902439 0.3474178 0.3204489 0.3375143  hist(gc3s)"},{"path":"https://mt1022.github.io/cubar/reference/get_gc4d.html","id":null,"dir":"Reference","previous_headings":"","what":"GC contents at 4-fold degenerate sites — get_gc4d","title":"GC contents at 4-fold degenerate sites — get_gc4d","text":"Calculate GC content synonymous position codons (using four-fold degenerate sites ).","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc4d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GC contents at 4-fold degenerate sites — get_gc4d","text":"","code":"get_gc4d(cf, codon_table = get_codon_table(), level = \"subfam\")"},{"path":"https://mt1022.github.io/cubar/reference/get_gc4d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GC contents at 4-fold degenerate sites — get_gc4d","text":"cf matrix codon frequencies calculated count_codons(). codon_table table genetic code derived get_codon_table create_codon_table. level \"subfam\" (default) \"amino_acid\". level determine GC contents 4-fold degenerate sites.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc4d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GC contents at 4-fold degenerate sites — get_gc4d","text":"named vector GC4d values.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_gc4d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GC contents at 4-fold degenerate sites — get_gc4d","text":"","code":"# estimate GC4d of yeast genes cf_all <- count_codons(yeast_cds) gc4d <- get_gc4d(cf_all) head(gc4d) #>   YPL071C   YLL050C   YMR172W   YOR185C   YLL032C   YBR225W  #> 0.4047619 0.3114754 0.3652482 0.3372093 0.3259259 0.3304348  hist(gc4d)"},{"path":"https://mt1022.github.io/cubar/reference/get_tai.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate TAI — get_tai","title":"Calculate TAI — get_tai","text":"get_tai calculates tRNA Adaptation Index (TAI) CDS","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_tai.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate TAI — get_tai","text":"","code":"get_tai(cf, trna_w)"},{"path":"https://mt1022.github.io/cubar/reference/get_tai.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate TAI — get_tai","text":"cf matrix codon frequencies calculated count_codons(). trna_w tRNA weight codon, can generated est_trna_weight().","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_tai.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate TAI — get_tai","text":"named vector TAI values","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_tai.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate TAI — get_tai","text":"dos Reis M, Savva R, Wernisch L. 2004. Solving riddle codon usage   preferences: test translational selection. Nucleic Acids Res 32:5036-5044.","code":""},{"path":"https://mt1022.github.io/cubar/reference/get_tai.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate TAI — get_tai","text":"","code":"# calculate TAI of yeast genes based on genomic tRNA copy numbers w <- est_trna_weight(yeast_trna_gcn) cf_all <- count_codons(yeast_cds) tai <- get_tai(cf_all, w) head(tai) #>   YPL071C   YLL050C   YMR172W   YOR185C   YLL032C   YBR225W  #> 0.2950724 0.4451196 0.2818316 0.3573874 0.3149884 0.3092542  hist(tai)"},{"path":"https://mt1022.github.io/cubar/reference/human_mt.html","id":null,"dir":"Reference","previous_headings":"","what":"human mitochondrial CDS sequences — human_mt","title":"human mitochondrial CDS sequences — human_mt","text":"CDSs 13 protein-coding genes human mitochondrial genome extracted ENSEMBL Biomart","code":""},{"path":"https://mt1022.github.io/cubar/reference/human_mt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"human mitochondrial CDS sequences — human_mt","text":"","code":"human_mt"},{"path":"https://mt1022.github.io/cubar/reference/human_mt.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"human mitochondrial CDS sequences — human_mt","text":"DNAStringSet 13 sequences","code":""},{"path":"https://mt1022.github.io/cubar/reference/human_mt.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"human mitochondrial CDS sequences — human_mt","text":"<https://www.ensembl.org/index.html>","code":""},{"path":"https://mt1022.github.io/cubar/reference/human_mt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"human mitochondrial CDS sequences — human_mt","text":"","code":"head(human_mt) #> DNAStringSet object of length 6: #>     width seq                                               names                #> [1]   681 ATGAACGAAAATCTGTTCGCTTC...TCTACCTGCACGACAACACATAA MT-ATP6 #> [2]   346 ATAAACTTCGCCTTAATTTTAAT...AAAAGGATTAGACTGAACCGAAT MT-ND3 #> [3]   956 ATACCCATGGCCAACCTCCTACT...TCCAGCATTCCCCCTCAAACCTA MT-ND1 #> [4]   207 ATGCCCCAACTAAATACTACCGT...ATTCATTGCCCCCACAATCCTAG MT-ATP8 #> [5]  1141 ATGACCCCAATACGCAAAACTAA...AAACAAAATACTCAAATGGGCCT MT-CYB #> [6]   297 ATGCCCCTCATTTACATAAATAT...ACCTAAACCTACTCCAATGCTAA MT-ND4L"},{"path":"https://mt1022.github.io/cubar/reference/plot_ca_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot codon-anticodon pairing relationship — plot_ca_pairs","title":"Plot codon-anticodon pairing relationship — plot_ca_pairs","text":"plot_ca_pairs show possible codon-anticodons pairings","code":""},{"path":"https://mt1022.github.io/cubar/reference/plot_ca_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot codon-anticodon pairing relationship — plot_ca_pairs","text":"","code":"plot_ca_pairs(codon_table = get_codon_table(), pairs = pairs)"},{"path":"https://mt1022.github.io/cubar/reference/plot_ca_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot codon-anticodon pairing relationship — plot_ca_pairs","text":"codon_table table genetic code derived get_codon_table create_codon_table. pairs table codon-anticodon pairing derived ca_pairs","code":""},{"path":"https://mt1022.github.io/cubar/reference/plot_ca_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot codon-anticodon pairing relationship — plot_ca_pairs","text":"plot possible codon-anticodons pairings","code":""},{"path":"https://mt1022.github.io/cubar/reference/plot_ca_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot codon-anticodon pairing relationship — plot_ca_pairs","text":"","code":"# plot possible codon and anticodon pairings for the vertebrate mitochondrial genetic code ctab <- get_codon_table(gcid = '2') pairs <- ca_pairs(ctab, plot = TRUE) plot_ca_pairs(ctab, pairs)   # plot possible codon and anticodon pairings for the standard genetic code in bacteria plot_ca_pairs(pairs = ca_pairs(domain = \"Bacteria\", plot = TRUE))"},{"path":"https://mt1022.github.io/cubar/reference/rev_comp.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse complement — rev_comp","title":"Reverse complement — rev_comp","text":"rev_comp creates reverse complemented version input sequence","code":""},{"path":"https://mt1022.github.io/cubar/reference/rev_comp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse complement — rev_comp","text":"","code":"rev_comp(seqs)"},{"path":"https://mt1022.github.io/cubar/reference/rev_comp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse complement — rev_comp","text":"seqs input sequences, DNAStringSet named vector sequences","code":""},{"path":"https://mt1022.github.io/cubar/reference/rev_comp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse complement — rev_comp","text":"reverse complemented input sequences DNAStringSet.","code":""},{"path":"https://mt1022.github.io/cubar/reference/rev_comp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse complement — rev_comp","text":"","code":"# reverse complement of codons rev_comp(Biostrings::DNAStringSet(c('TAA', 'TAG'))) #> DNAStringSet object of length 2: #>     width seq #> [1]     3 TTA #> [2]     3 CTA"},{"path":"https://mt1022.github.io/cubar/reference/seq_to_codons.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert CDS to codons — seq_to_codons","title":"Convert CDS to codons — seq_to_codons","text":"seq_to_codons converts coding sequence vector codons","code":""},{"path":"https://mt1022.github.io/cubar/reference/seq_to_codons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert CDS to codons — seq_to_codons","text":"","code":"seq_to_codons(seq)"},{"path":"https://mt1022.github.io/cubar/reference/seq_to_codons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert CDS to codons — seq_to_codons","text":"seq DNAString, object can coerced DNAString","code":""},{"path":"https://mt1022.github.io/cubar/reference/seq_to_codons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert CDS to codons — seq_to_codons","text":"character vector codons","code":""},{"path":"https://mt1022.github.io/cubar/reference/seq_to_codons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert CDS to codons — seq_to_codons","text":"","code":"# convert a CDS sequence to a sequence of codons seq_to_codons('ATGTGGTAG') #> [1] \"ATG\" \"TGG\" \"TAG\" seq_to_codons(yeast_cds[[1]]) #>   [1] \"ATG\" \"AGT\" \"TCC\" \"CGG\" \"TTT\" \"GCA\" \"AGA\" \"AGT\" \"AAT\" \"GGC\" \"AAT\" \"CCC\" #>  [13] \"AAC\" \"CAC\" \"ATT\" \"AGG\" \"AAA\" \"AGA\" \"AAT\" \"CAT\" \"TCT\" \"CCA\" \"GAC\" \"CCA\" #>  [25] \"ATA\" \"GGA\" \"ATT\" \"GAT\" \"AAT\" \"TAT\" \"AAA\" \"AGA\" \"AAA\" \"AGA\" \"CTA\" \"ATT\" #>  [37] \"ATA\" \"GAT\" \"TTA\" \"GAG\" \"AAT\" \"TTA\" \"TCC\" \"TTA\" \"AAT\" \"GAT\" \"AAA\" \"GGG\" #>  [49] \"CCC\" \"AAG\" \"AAC\" \"GGA\" \"CAT\" \"GCA\" \"GAT\" \"GAT\" \"AAC\" \"AAT\" \"CTT\" \"ATT\" #>  [61] \"CAT\" \"AAC\" \"AAT\" \"ATA\" \"GTA\" \"TTC\" \"ACA\" \"GAC\" \"GCT\" \"ATT\" \"GAT\" \"GAT\" #>  [73] \"AAG\" \"GTC\" \"CTG\" \"AAA\" \"GAG\" \"ATC\" \"ATC\" \"AAG\" \"TGT\" \"TCC\" \"ACA\" \"AGT\" #>  [85] \"AAA\" \"CGC\" \"GGC\" \"GAC\" \"AAT\" \"GAC\" \"TTG\" \"TTT\" \"TAT\" \"GAC\" \"AAA\" \"ATA\" #>  [97] \"TGG\" \"GAA\" \"CGT\" \"TTG\" \"AGA\" \"GAA\" \"AAA\" \"AGG\" \"CTA\" \"CAA\" \"ATA\" \"ATA\" #> [109] \"AAA\" \"TGG\" \"GTA\" \"GAT\" \"TAT\" \"AAG\" \"GAA\" \"ATT\" \"GCT\" \"TAT\" \"CTA\" \"AGC\" #> [121] \"TGG\" \"TGG\" \"AAG\" \"TGG\" \"TTC\" \"CAT\" \"AAT\" \"CAA\" \"ATG\" \"ACT\" \"TCG\" \"AAA\" #> [133] \"TAC\" \"ACT\" \"TAT\" \"GAT\" \"GGA\" \"GAG\" \"GCT\" \"GAT\" \"ACC\" \"GAT\" \"GTT\" \"GAA\" #> [145] \"ATG\" \"ATG\" \"GCA\" \"GTG\" \"GAT\" \"ACT\" \"GAT\" \"GTG\" \"GAT\" \"ATG\" \"GAT\" \"GCG\" #> [157] \"TAA\""},{"path":"https://mt1022.github.io/cubar/reference/show_codon_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"show available codon tables — show_codon_tables","title":"show available codon tables — show_codon_tables","text":"show_codon_tables print table available genetic code NCBI Biostrings::GENETIC_CODE_TABLE.","code":""},{"path":"https://mt1022.github.io/cubar/reference/show_codon_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"show available codon tables — show_codon_tables","text":"","code":"show_codon_tables()"},{"path":"https://mt1022.github.io/cubar/reference/show_codon_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"show available codon tables — show_codon_tables","text":"return value (NULL). Available codon tables printed directly.","code":""},{"path":"https://mt1022.github.io/cubar/reference/show_codon_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"show available codon tables — show_codon_tables","text":"","code":"# print available NCBI codon table IDs and descriptions. show_codon_tables() #>  1: Standard #>  2: Vertebrate Mitochondrial #>  3: Yeast Mitochondrial #>  4: Mold Mitochondrial; Protozoan Mitochondrial; Coelenterate Mitochondrial; Mycoplasma; Spiroplasma #>  5: Invertebrate Mitochondrial #>  6: Ciliate Nuclear; Dasycladacean Nuclear; Hexamita Nuclear #>  9: Echinoderm Mitochondrial; Flatworm Mitochondrial #> 10: Euplotid Nuclear #> 11: Bacterial, Archaeal and Plant Plastid #> 12: Alternative Yeast Nuclear #> 13: Ascidian Mitochondrial #> 14: Alternative Flatworm Mitochondrial #> 15: Blepharisma Macronuclear #> 16: Chlorophycean Mitochondrial #> 21: Trematode Mitochondrial #> 22: Scenedesmus obliquus Mitochondrial #> 23: Thraustochytrium Mitochondrial #> 24: Pterobranchia Mitochondrial #> 25: Candidate Division SR1 and Gracilibacteria #> 26: Pachysolen tannophilus Nuclear"},{"path":"https://mt1022.github.io/cubar/reference/slide.html","id":null,"dir":"Reference","previous_headings":"","what":"slide window interval generator — slide","title":"slide window interval generator — slide","text":"slide generates data.table start, center, end columns sliding window analysis.","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"slide window interval generator — slide","text":"","code":"slide(from, to, step = 1, before = 0, after = 0)"},{"path":"https://mt1022.github.io/cubar/reference/slide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"slide window interval generator — slide","text":"integer, start sequence integer, end sequence step integer, step size integer, number values center window integer, number values center window","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"slide window interval generator — slide","text":"data.table start, center, end columns","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"slide window interval generator — slide","text":"","code":"slide(1, 10, step = 2, before = 1, after = 1) #>    start center   end #>    <num>  <num> <num> #> 1:     1      2     3 #> 2:     3      4     5 #> 3:     5      6     7 #> 4:     7      8     9"},{"path":"https://mt1022.github.io/cubar/reference/slide_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"apply a cub index to a sliding window — slide_apply","title":"apply a cub index to a sliding window — slide_apply","text":"slide_apply applies function sliding window codons.","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"apply a cub index to a sliding window — slide_apply","text":"","code":"slide_apply(seq, .f, step = 1, before = 0, after = 0, ...)"},{"path":"https://mt1022.github.io/cubar/reference/slide_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"apply a cub index to a sliding window — slide_apply","text":"seq DNAString, sequence .f function, codon index calculation function apply, example, get_enc. step integer, step size number codons integer, number codons center window integer, number codons center window ... additional arguments pass function .f","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"apply a cub index to a sliding window — slide_apply","text":"data.table start, center, end, codon usage index columns","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"apply a cub index to a sliding window — slide_apply","text":"","code":"slide_apply(yeast_cds[[1]], get_enc, step = 1, before = 10, after = 10) #>      start center   end    index #>      <num>  <num> <num>    <num> #>   1:     1     31    63 55.15243 #>   2:     4     34    66 55.20681 #>   3:     7     37    69 55.63983 #>   4:    10     40    72 54.41121 #>   5:    13     43    75 54.34740 #>  ---                             #> 133:   397    427   459 49.88711 #> 134:   400    430   462 49.24240 #> 135:   403    433   465 49.44166 #> 136:   406    436   468 49.55795 #> 137:   409    439   471 50.11617"},{"path":"https://mt1022.github.io/cubar/reference/slide_codon.html","id":null,"dir":"Reference","previous_headings":"","what":"sliding window of codons — slide_codon","title":"sliding window of codons — slide_codon","text":"slide_codon generates data.table start, center, end columns   sliding window analysis codons.","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide_codon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sliding window of codons — slide_codon","text":"","code":"slide_codon(seq, step = 1, before = 0, after = 0)"},{"path":"https://mt1022.github.io/cubar/reference/slide_codon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sliding window of codons — slide_codon","text":"seq DNAString, sequence step integer, step size integer, number codons center window integer, number codons center window","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide_codon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sliding window of codons — slide_codon","text":"data.table start, center, end columns","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide_codon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sliding window of codons — slide_codon","text":"","code":"x <- Biostrings::DNAString('ATCTACATAGCTACGTAGCTCGATGCTAGCATGCATCGTACGATCGTCGATCGTAG') slide_codon(x, step = 3, before = 1, after = 1) #>    start center   end #>    <num>  <num> <num> #> 1:     1      4     9 #> 2:    10     13    18 #> 3:    19     22    27 #> 4:    28     31    36 #> 5:    37     40    45 #> 6:    46     49    54"},{"path":"https://mt1022.github.io/cubar/reference/slide_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"plot sliding window codon usage — slide_plot","title":"plot sliding window codon usage — slide_plot","text":"slide_plot visualizes codon usage sliding window.","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot sliding window codon usage — slide_plot","text":"","code":"slide_plot(windt, index_name = \"Index\")"},{"path":"https://mt1022.github.io/cubar/reference/slide_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot sliding window codon usage — slide_plot","text":"windt data.table, sliding window codon usage generated slide_apply. index_name character, name index display.","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot sliding window codon usage — slide_plot","text":"ggplot2 plot.","code":""},{"path":"https://mt1022.github.io/cubar/reference/slide_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot sliding window codon usage — slide_plot","text":"","code":"sw <- slide_apply(yeast_cds[[1]], get_enc, step = 1, before = 10, after = 10) slide_plot(sw)"},{"path":"https://mt1022.github.io/cubar/reference/yeast_cds.html","id":null,"dir":"Reference","previous_headings":"","what":"yeast CDS sequences — yeast_cds","title":"yeast CDS sequences — yeast_cds","text":"CDSs protein-coding genes Saccharomyces_cerevisiae","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_cds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"yeast CDS sequences — yeast_cds","text":"","code":"yeast_cds"},{"path":"https://mt1022.github.io/cubar/reference/yeast_cds.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"yeast CDS sequences — yeast_cds","text":"DNAStringSet 6600 sequences","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_cds.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"yeast CDS sequences — yeast_cds","text":"<https://ftp.ensembl.org/pub/release-107/fasta/saccharomyces_cerevisiae/cds/Saccharomyces_cerevisiae.R64-1-1.cds..fa.gz>","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_cds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"yeast CDS sequences — yeast_cds","text":"","code":"head(yeast_cds) #> DNAStringSet object of length 6: #>     width seq                                               names                #> [1]   471 ATGAGTTCCCGGTTTGCAAGAAG...CTGATGTGGATATGGATGCGTAA YPL071C #> [2]   432 ATGTCTAGATCTGGTGTTGCTGT...GCAGAGGCGCTGGTTCTCATTAA YLL050C #> [3]  2160 ATGTCTGGAATGGGTATTGCGAT...AAGAGAGCCTTGCTGGAATATAG YMR172W #> [4]   663 ATGTCAGCACCTGCTCAAAACAA...ATGAAGACGATGCTGATTTATAA YOR185C #> [5]  2478 ATGGATAACTTCAAAATTTACAG...AATATCAAAATGGCAGAAAATGA YLL032C #> [6]  2703 ATGGGCTCCAATAAGGAAGCAAA...CAAAGCTGCCATATACCAAATAA YBR225W"},{"path":"https://mt1022.github.io/cubar/reference/yeast_exp.html","id":null,"dir":"Reference","previous_headings":"","what":"yeast mRNA expression levels — yeast_exp","title":"yeast mRNA expression levels — yeast_exp","text":"Yeast mRNA FPKM determined rRNA-depleted (RiboZero) total RNA-Seq libraries. RUN1_0_WT RUN2_0_WT (0 min RNA Pol II repression) averaged used .","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_exp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"yeast mRNA expression levels — yeast_exp","text":"","code":"yeast_exp"},{"path":"https://mt1022.github.io/cubar/reference/yeast_exp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"yeast mRNA expression levels — yeast_exp","text":"data.frame 6717 rows three columns: gene_id gene ID gene_name gene name fpkm mRNA expression level Fragments per kilobase per million reads","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_exp.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"yeast mRNA expression levels — yeast_exp","text":"<https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE57385>","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_exp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"yeast mRNA expression levels — yeast_exp","text":"Presnyak V, Alhusaini N, Chen YH, Martin S, Morris N, Kline N, Olson S, Weinberg D, Baker KE, Graveley BR, et al. 2015. Codon optimality major determinant mRNA stability. Cell 160:1111-1124.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_exp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"yeast mRNA expression levels — yeast_exp","text":"","code":"head(yeast_exp) #> # A tibble: 6 × 3 #>   gene_id gene_name  fpkm #>   <chr>   <chr>     <dbl> #> 1 YAL001C TFC3       28.8 #> 2 YAL002W VPS8       19.2 #> 3 YAL003W EFB1      889.  #> 4 YAL004W YAL004w    84.1 #> 5 YAL005C SSA1      385.  #> 6 YAL007C ERP2      123."},{"path":"https://mt1022.github.io/cubar/reference/yeast_half_life.html","id":null,"dir":"Reference","previous_headings":"","what":"Half life of yeast mRNAs — yeast_half_life","title":"Half life of yeast mRNAs — yeast_half_life","text":"Half life yeast mRNAs Saccharomyces_cerevisiae calculated rRNA-deleted total RNAs Presnyak et al.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_half_life.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Half life of yeast mRNAs — yeast_half_life","text":"","code":"yeast_half_life"},{"path":"https://mt1022.github.io/cubar/reference/yeast_half_life.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Half life of yeast mRNAs — yeast_half_life","text":"data.frame 3888 rows three columns: gene_id gene id gene_name gene name half_life mRNA half life minutes","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_half_life.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Half life of yeast mRNAs — yeast_half_life","text":"<https://doi.org/10.1016/j.cell.2015.02.029>","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_half_life.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Half life of yeast mRNAs — yeast_half_life","text":"Presnyak V, Alhusaini N, Chen YH, Martin S, Morris N, Kline N, Olson S, Weinberg D, Baker KE, Graveley BR, et al. 2015. Codon optimality major determinant mRNA stability. Cell 160:1111-1124.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_half_life.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Half life of yeast mRNAs — yeast_half_life","text":"","code":"head(yeast_half_life) #>   gene_id gene_name half_life #> 1 YAL001C      TFC3 10.794423 #> 2 YAL003W      EFB1 43.425357 #> 3 YAL007C      ERP2 10.089357 #> 4 YAL008W     FUN14 27.462701 #> 5 YAL009W      SPO7  4.378069 #> 6 YAL010C     MDM10  5.827223"},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna.html","id":null,"dir":"Reference","previous_headings":"","what":"yeast tRNA sequences — yeast_trna","title":"yeast tRNA sequences — yeast_trna","text":"Yeast tRNA sequences obtained gtRNAdb.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"yeast tRNA sequences — yeast_trna","text":"","code":"yeast_trna"},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"yeast tRNA sequences — yeast_trna","text":"RNAStringSet length 275.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"yeast tRNA sequences — yeast_trna","text":"<http://gtrnadb.ucsc.edu/genomes/eukaryota/Scere3/sacCer3-mature-tRNAs.fa>","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"yeast tRNA sequences — yeast_trna","text":"Chan PP, Lowe TM. 2016. GtRNAdb 2.0: expanded database transfer RNA genes identified complete draft genomes. Nucleic Acids Res 44:D184-189.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"yeast tRNA sequences — yeast_trna","text":"","code":"yeast_trna #> RNAStringSet object of length 275: #>       width seq                                             names                #>   [1]    73 GGGCGUGUGGCGUAGUCGGUAG...GGUUCGAUUCCGGACUCGUCCA Saccharomyces_cer... #>   [2]    73 GGGCGUGUGGCGUAGUCGGUAG...GGUUCGAUUCCGGACUCGUCCA Saccharomyces_cer... #>   [3]    73 GGGCGUGUGGCGUAGUCGGUAG...GGUUCGAUUCCGGACUCGUCCA Saccharomyces_cer... #>   [4]    73 GGGCGUGUGGCGUAGUCGGUAG...GGUUCGAUUCCGGACUCGUCCA Saccharomyces_cer... #>   [5]    73 GGGCGUGUGGCGUAGUCGGUAG...GGUUCGAUUCCGGACUCGUCCA Saccharomyces_cer... #>   ...   ... ... #> [271]    72 AGCGCCGUGGCGCAGUGGAAGC...GGAUCGAAACCGAGCGGCGCUA Saccharomyces_cer... #> [272]    72 AGCGCCGUGGCGCAGUGGAAGC...GGAUCGAAACCGAGCGGCGCUA Saccharomyces_cer... #> [273]    72 AGCGCCGUGGCGCAGUGGAAGC...GGAUCGAAACCGAGCGGCGCUA Saccharomyces_cer... #> [274]    72 AGCGCCGUGGCGCAGUGGAAGC...GGAUCGAAACCGAGCGGCGCUA Saccharomyces_cer... #> [275]    72 AGCGCCGUGGCGCAGUGGAAGC...GGAUCGAAACCGAGCGGCGCUA Saccharomyces_cer..."},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna_gcn.html","id":null,"dir":"Reference","previous_headings":"","what":"yeast tRNA gene copy numbers (GCN) — yeast_trna_gcn","title":"yeast tRNA gene copy numbers (GCN) — yeast_trna_gcn","text":"Yeast tRNA gene copy numbers (GCN) anticodon obtained gtRNAdb.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna_gcn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"yeast tRNA gene copy numbers (GCN) — yeast_trna_gcn","text":"","code":"yeast_trna_gcn"},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna_gcn.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"yeast tRNA gene copy numbers (GCN) — yeast_trna_gcn","text":"named vector length 41. Value names anticodons.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna_gcn.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"yeast tRNA gene copy numbers (GCN) — yeast_trna_gcn","text":"<http://gtrnadb.ucsc.edu/genomes/eukaryota/Scere3/sacCer3-mature-tRNAs.fa>","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna_gcn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"yeast tRNA gene copy numbers (GCN) — yeast_trna_gcn","text":"Chan PP, Lowe TM. 2016. GtRNAdb 2.0: expanded database transfer RNA genes identified complete draft genomes. Nucleic Acids Res 44:D184-189.","code":""},{"path":"https://mt1022.github.io/cubar/reference/yeast_trna_gcn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"yeast tRNA gene copy numbers (GCN) — yeast_trna_gcn","text":"","code":"yeast_trna_gcn #>  #> Ala-AGC Ala-TGC Arg-ACG Arg-CCG Arg-CCT Arg-TCT Asn-GTT Asp-GTC Cys-GCA Gln-CTG  #>      11       5       6       1       1      11      10      16       4       1  #> Gln-TTG Glu-CTC Glu-TTC Gly-CCC Gly-GCC Gly-TCC His-GTG Ile-AAT Ile-TAT Leu-CAA  #>       9       2      14       2      16       3       7      13       2      10  #> Leu-GAG Leu-TAA Leu-TAG Lys-CTT Lys-TTT Met-CAT Phe-GAA Pro-AGG Pro-TGG Ser-AGA  #>       1       7       3      14       7       5      10       2      10      11  #> Ser-CGA Ser-GCT Ser-TGA Thr-AGT Thr-CGT Thr-TGT Trp-CCA Tyr-GTA Val-AAC Val-CAC  #>       1       2       3      11       1       4       6       8      14       2  #> Val-TAC  #>       2"},{"path":[]},{"path":"https://mt1022.github.io/cubar/news/index.html","id":"cubar-110","dir":"Changelog","previous_headings":"","what":"cubar 1.1.0","title":"cubar 1.1.0","text":"CRAN release: 2024-12-07 Added options codon-family level analysis (default, subfamily). Improved documentation GitHub workflow.","code":""},{"path":"https://mt1022.github.io/cubar/news/index.html","id":"cubar-100","dir":"Changelog","previous_headings":"","what":"cubar 1.0.0","title":"cubar 1.0.0","text":"CRAN release: 2024-08-01 est_optimal_codons get_fop now work codon frequency matrix like cubar functions. codon optimization can done family(amino acid) subfamily level now optimal codons can estimated level using either codon bias gene expression levels (Thanks @maltesemike valuable suggestions feedback). false discovery rate controlled fdr argument. two RSCU columns (RSCU rscu) output est_optimal_codons get_fop. Now rscu kept represents RSCU values. New functions perform sliding window analysis codon usage: slide, slide_codon, slide_apply slide_plot. New function calculate deviation proportionality (Dp) host tRNA availability: get_dp.","code":""},{"path":"https://mt1022.github.io/cubar/news/index.html","id":"cubar-060","dir":"Changelog","previous_headings":"","what":"cubar 0.6.0","title":"cubar 0.6.0","text":"CRAN release: 2024-07-04 Add util functions (codon_optimize & codon_diff) Fix url failure gtRNAdb, caused remove cubar cran :(","code":""},{"path":"https://mt1022.github.io/cubar/news/index.html","id":"cubar-051","dir":"Changelog","previous_headings":"","what":"cubar 0.5.1","title":"cubar 0.5.1","text":"fix bug get_cscg caused error input codon frequency matrix single row. finish unit tests functions internal data.","code":""},{"path":"https://mt1022.github.io/cubar/news/index.html","id":"cubar-050","dir":"Changelog","previous_headings":"","what":"cubar 0.5.0","title":"cubar 0.5.0","text":"CRAN release: 2024-01-09 fixed bug est_trna_weight. Now zero w values replaced geometric mean (rather arithmetic mean) non-zero w values. fixed unexpected warnings est_optimal_codons. fixed bugs update input codon table due data.table reference semantics. added new vignette explaining mathematical details implementation.","code":""},{"path":"https://mt1022.github.io/cubar/news/index.html","id":"cubar-042","dir":"Changelog","previous_headings":"","what":"cubar 0.4.2","title":"cubar 0.4.2","text":"CRAN release: 2023-11-18 adjust formatting fix typo get_enc code","code":""},{"path":"https://mt1022.github.io/cubar/news/index.html","id":"cubar-041","dir":"Changelog","previous_headings":"","what":"cubar 0.4.1","title":"cubar 0.4.1","text":"New vignette mitochondrial codon usage analysis. Fix bug get_enc non-standard genetic code.","code":""},{"path":"https://mt1022.github.io/cubar/news/index.html","id":"cubar-040","dir":"Changelog","previous_headings":"","what":"cubar 0.4.0","title":"cubar 0.4.0","text":"CRAN release: 2023-07-17 Released CRAN.","code":""},{"path":"https://mt1022.github.io/cubar/news/index.html","id":"cubar-032","dir":"Changelog","previous_headings":"","what":"cubar 0.3.2","title":"cubar 0.3.2","text":"Initial CRAN submission.","code":""}]
